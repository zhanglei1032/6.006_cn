1
00:00:00,000 --> 00:00:00,060



2
00:00:00,060 --> 00:00:01,770
The following content is provided
提供以下内容

3
00:00:01,770 --> 00:00:04,009
under a Creative Commons license.
根据知识共享许可。 

4
00:00:04,009 --> 00:00:06,859
Your support will help MIT OpenCourseWare continue
您的支持将帮助MIT OpenCourseWare继续

5
00:00:06,860 --> 00:00:10,720
to offer high quality educational resources for free.
免费提供高质量的教育资源。 

6
00:00:10,720 --> 00:00:13,330
To make a donation or view additional materials
捐款或查看其他材料

7
00:00:13,330 --> 00:00:17,225
from hundreds of MIT courses, visit MIT OpenCourseWare
从数百门麻省理工学院的课程中，访问MIT OpenCourseWare 

8
00:00:17,225 --> 00:00:17,850
at ocw.mit.edu.
在ocw.mit.edu。 

9
00:00:17,850 --> 00:00:20,907



10
00:00:20,907 --> 00:00:21,489
PROFESSOR: OK.
教授：好的。 

11
00:00:21,489 --> 00:00:25,019
So who's going lecture?
那谁去上课？ 

12
00:00:25,019 --> 00:00:27,289
Good.
好。 

13
00:00:27,289 --> 00:00:29,905
Does everything makes sense?
一切都有意义吗？ 

14
00:00:29,905 --> 00:00:31,051
AUDIENCE: Mostly.
听众：主要是。 

15
00:00:31,251 --> 00:00:33,710
PROFESSOR: That's good, because we're going to do problems.
教授：很好，因为我们要解决问题。 

16
00:00:33,710 --> 00:00:34,460
AUDIENCE: Awesome.
听众：太棒了。 

17
00:00:34,460 --> 00:00:37,240
PROFESSOR: So, what I want to talk about is, first,
教授：所以，我首先要谈的是

18
00:00:37,240 --> 00:00:39,750
there's a subtlety in the Rubik's cube problem, which I'm
我在魔方问题中有一个微妙之处

19
00:00:39,750 --> 00:00:42,462
guessing nobody has seen yet, but we're going to talk about
猜测还没有人见过，但我们将要谈论

20
00:00:42,462 --> 00:00:44,920
it anyway, because otherwise you'll trip on it while you're
无论如何，因为否则您会在旅途中绊倒

21
00:00:44,920 --> 00:00:46,340
doing the problem.
做问题。 

22
00:00:46,340 --> 00:00:48,780
And then we're going to talk about one or maybe two
然后我们要谈一两个

23
00:00:48,780 --> 00:00:49,380
problems.
问题。 

24
00:00:49,380 --> 00:00:51,273
And I'm excited about the problem titled,
我很高兴看到这个标题的问题， 

25
00:00:51,473 --> 00:00:53,139
"there's StarCraft and counter strikes,"
 “有《星际争霸》和反恐精英，” 

26
00:00:53,140 --> 00:00:55,049
so, let's hope we get to them.
所以，我们希望我们能找到他们。 

27
00:00:55,049 --> 00:00:57,959



28
00:00:57,960 --> 00:01:00,600
AUDIENCE: I'm curious, did you write this week's problem set?
听众：我很好奇，你写了这周的习题集吗？ 

29
00:01:00,600 --> 00:01:02,630
Because there's some Chinese in there.
因为那里有一些中国人。 

30
00:01:02,630 --> 00:01:03,059
PROFESSOR: No.
教授：不。 

31
00:01:03,259 --> 00:01:03,967
AUDIENCE: Oh, OK.
听众：哦，好。 

32
00:01:03,968 --> 00:01:06,579
PROFESSOR: No, someone else wrote it.
教授：不，是别人写的。 

33
00:01:06,579 --> 00:01:08,674
I suggested putting that in there, though.
我建议把它放在那里。 

34
00:01:08,674 --> 00:01:11,674



35
00:01:11,674 --> 00:01:13,856
AUDIENCE: You had an awesome internship, right?
听众：你有一个很棒的实习吧？ 

36
00:01:13,856 --> 00:01:14,810
[INAUDIBLE]
 [听不清] 

37
00:01:14,811 --> 00:01:17,566
AUDIENCE: Wait, did you make all the AMD [INAUDIBLE] questions?
听众：等等，您是否提出了所有AMD [音频不清晰]问题？ 

38
00:01:17,766 --> 00:01:18,599
PROFESSOR:Of course.
教授：当然可以。 

39
00:01:18,599 --> 00:01:19,265
That's my stuff.
那是我的东西。 

40
00:01:19,266 --> 00:01:22,531



41
00:01:22,531 --> 00:01:23,030
OK.
好。 

42
00:01:23,030 --> 00:01:25,280
So Rubik's cubes.
因此，鲁比克的立方体。 

43
00:01:25,280 --> 00:01:27,319
Did everyone see a 2 by 2 by 2 Rubik's cube?
每个人都看到2 x 2 x 2 Rubik的立方体吗？ 

44
00:01:27,319 --> 00:01:28,859
You guys are going to lecture, right?
你们要去听课吧？ 

45
00:01:28,859 --> 00:01:29,700
You have one.
你有一个。 

46
00:01:29,700 --> 00:01:31,039
Yeah.
是的

47
00:01:31,239 --> 00:01:34,209
Did you guys see Eric's 2 by 2 by 2 Rubik's cube?
你们看到过Eric的2 x 2 x 2 Rubik立方体吗？ 

48
00:01:34,209 --> 00:01:36,829



49
00:01:36,829 --> 00:01:37,959
It looks sort of like this.
看起来像这样。 

50
00:01:37,959 --> 00:01:48,139



51
00:01:48,140 --> 00:01:51,230
All right, so big Rubik's cube has how many
好吧，这么大的魔方有多少个

52
00:01:51,230 --> 00:01:53,319
small cubelets in it?
里面有小方块？ 

53
00:01:53,319 --> 00:01:53,859
AUDIENCE: 80.
听众：80。 

54
00:01:53,859 --> 00:01:55,819
AUDIENCE: 80.
听众：80。 

55
00:01:55,819 --> 00:01:58,269
AUDIENCE: I like cubelets better than cubies.
听众：我比立方体更喜欢立方体。 

56
00:01:58,269 --> 00:01:59,686
Cubies is hard to say.
多维数据集很难说。 

57
00:01:59,686 --> 00:02:01,269
PROFESSOR: Yeah, I would say cubicles.
教授：是的，我要说隔间。 

58
00:02:01,269 --> 00:02:03,259
So let's go for-- let's try cubelets
所以我们去尝试一下

59
00:02:03,260 --> 00:02:05,209
and see how this works.
并查看其工作原理。 

60
00:02:05,409 --> 00:02:06,409
OK.
好。 

61
00:02:06,409 --> 00:02:11,750
So each cubelet has six faces, but three faces
所以每个立方体有六个面，但是三个面

62
00:02:11,750 --> 00:02:13,460
are always facing inwards.
总是向内。 

63
00:02:13,460 --> 00:02:15,960
They're always attached to the center of the cube.
它们始终附着在立方体的中心。 

64
00:02:15,960 --> 00:02:17,810
So we don't care about them.
所以我们不在乎他们。 

65
00:02:17,810 --> 00:02:19,759
We only care about the other three faces.
我们只关心其他三个面孔。 

66
00:02:19,759 --> 00:02:22,060
So if you have a plastic Rubik's cube.
因此，如果您有塑料魔方。 

67
00:02:22,060 --> 00:02:27,360
Say this is a plastic-- This is a plastic cube.
说这是塑料-这是塑料立方体。 

68
00:02:27,360 --> 00:02:30,870
Then you're going to have eight plastic cubelets.
然后，您将拥有八个塑料立方体。 

69
00:02:30,870 --> 00:02:32,722
Each cubelet has three colored faces
每个立方体都有三个彩色的面

70
00:02:32,722 --> 00:02:34,430
and three faces that we don't care about.
和我们不关心的三张脸。 

71
00:02:34,430 --> 00:02:38,439



72
00:02:38,439 --> 00:02:42,020
So how many total plastic faces in a cubelet, sorry,
那么，一个立方体中有多少塑料面，对不起， 

73
00:02:42,020 --> 00:02:44,728
plastic cube?
塑料立方体？ 

74
00:02:44,728 --> 00:02:46,144
AUDIENCE: Twenty-four. [INAUDIBLE]
听众：二十四岁。 [听不清] 

75
00:02:46,144 --> 00:02:50,974



76
00:02:50,974 --> 00:02:51,849
PROFESSOR: All right.
教授：好的。 

77
00:02:51,849 --> 00:02:54,009
Now let's play with an imaginary cube.
现在让我们玩一个假想的立方体。 

78
00:02:54,009 --> 00:02:56,223
And I call this a wireframe cube,
我称其为线框立方体

79
00:02:56,223 --> 00:02:57,389
because I draw it like this.
因为我是这样画的

80
00:02:57,389 --> 00:03:11,799



81
00:03:11,800 --> 00:03:14,460
So, here pretend you have the skeleton of a Rubik's cube,
因此，这里假设您拥有魔方的骨架， 

82
00:03:14,460 --> 00:03:17,310
made out of wires or out of wood or something.
用电线或木头或其他东西制成。 

83
00:03:17,509 --> 00:03:22,129
So it's basically a small sheet of wood, small piece of wood,
所以基本上是一小块木头，一小块木头， 

84
00:03:22,129 --> 00:03:24,199
small sheet of wood, so on and so forth.
小片木头，依此类推。 

85
00:03:24,199 --> 00:03:28,310
And so this doesn't have any colors in it,
因此，其中没有任何颜色， 

86
00:03:28,310 --> 00:03:32,699
but it's the right shape and sort of the right look.
但这是正确的形状和正确的外观。 

87
00:03:32,699 --> 00:03:35,439
So the way you would build the configuration is,
因此，您构建配置的方式是

88
00:03:35,439 --> 00:03:41,050
you take 24 plastic faces that you get from a plastic cube,
你从塑料立方体上取了24个塑料面， 

89
00:03:41,050 --> 00:03:45,590
and you paste them one by one onto the faces
然后将它们一一粘贴到脸上

90
00:03:45,590 --> 00:03:47,430
of a wireframe cube.
线框多维数据集。 

91
00:03:47,430 --> 00:03:50,000
And they claim that this can build any configuration
他们声称这可以建立任何配置

92
00:03:50,199 --> 00:03:53,569
that you can think about.
您可以考虑的。 

93
00:03:53,569 --> 00:03:56,109
If you look at a cube, after no matter how many moves
如果看一个立方体，无论移动多少

94
00:03:56,110 --> 00:03:58,750
you've done to it, it's going to have
你已经做到了，它将有

95
00:03:58,750 --> 00:04:01,419
some-- it's going to have the faces somewhere, right?
一些-到处都会有面孔，对吧？ 

96
00:04:01,419 --> 00:04:03,274
So you can take the faces and face them
这样你就可以面对他们

97
00:04:03,275 --> 00:04:05,250
where they belong and there you go.
他们属于哪里，你去了那里。 

98
00:04:05,250 --> 00:04:07,560
You have a real cube built out of a wireframe
您具有使用线框构建的真实立方体

99
00:04:07,560 --> 00:04:08,569
and plastic faces.
和塑料的面孔。 

100
00:04:08,569 --> 00:04:16,810



101
00:04:16,810 --> 00:04:19,629
How many wireframe faces there are?
有多少个线框面？ 

102
00:04:19,629 --> 00:04:21,863
Please don't get this wrong.
请不要误解。 

103
00:04:21,863 --> 00:04:22,779
AUDIENCE: Twenty-four.
听众：二十四岁。 

104
00:04:22,779 --> 00:04:25,106
PROFESSOR: OK.
教授：好的。 

105
00:04:25,107 --> 00:04:26,732
AUDIENCE: There are some configurations
听众：有一些配置

106
00:04:26,732 --> 00:04:28,807
that aren't possible, right?
那是不可能的，对吧？ 

107
00:04:28,807 --> 00:04:29,189
PROFESSOR: OK.
教授：好的。 

108
00:04:29,389 --> 00:04:31,399
There are some configurations that aren't possible,
有些配置是不可能的， 

109
00:04:31,399 --> 00:04:32,589
and that is very good news.
这是一个好消息。 

110
00:04:32,589 --> 00:04:33,639
We'll get to that later.
我们稍后再讨论。 

111
00:04:33,639 --> 00:04:41,829



112
00:04:41,829 --> 00:04:46,060
Let's see how the code talks about these faces.
让我们看看代码如何谈论这些面孔。 

113
00:04:46,060 --> 00:04:49,720
So suppose we have a cubelet that has these faces.
因此，假设我们有一个具有这些面的立方体。 

114
00:04:49,720 --> 00:04:56,740
Front faces yellow, this face is blue, and this face is orange.
正面为黄色，正面为蓝色，正面为橙色。 

115
00:04:56,740 --> 00:05:01,579
This facing code is called-- so this yellow face here
这个面对的代码被称为-所以这里的黄脸

116
00:05:01,579 --> 00:05:06,519
is called y o b.
被称为哟b。 

117
00:05:06,519 --> 00:05:08,971
So y is yellow, that's the yellow face,
 y是黄色，那是黄色的脸， 

118
00:05:08,971 --> 00:05:11,109
and is the yellow facing the cubelet that
面对立方体的黄色是

119
00:05:11,110 --> 00:05:14,879
has a yellow face, an orange face, and a blue face.
有一张黄色的脸，一张橙色的脸和一张蓝色的脸。 

120
00:05:14,879 --> 00:05:17,009
Fortunately, there aren't two cubelets
幸运的是，没有两个立方体

121
00:05:17,009 --> 00:05:20,180
that have the same face color, so this is good enough
具有相同的脸色，所以就足够了

122
00:05:20,180 --> 00:05:22,598
to distinguish between all of them.
区分所有人。 

123
00:05:22,598 --> 00:05:24,389
Let's see if you guys are paying attention.
让我们看看你们是否在关注。 

124
00:05:24,389 --> 00:05:27,329
How would I call this face?
我怎么称呼这张脸？ 

125
00:05:27,329 --> 00:05:32,673



126
00:05:32,673 --> 00:05:33,339
AUDIENCE: o y b?
听众：oyb？ 

127
00:05:33,339 --> 00:05:37,913



128
00:05:37,913 --> 00:05:38,579
PROFESSOR: Yeah.
教授：是的。 

129
00:05:38,579 --> 00:05:43,669
Either that or o b y, whichever one the code happens to use.
要么顺从，要么碰巧使用该代码。 

130
00:05:43,670 --> 00:05:45,810
So the principal is, these are the colors
所以原理是，这些是颜色

131
00:05:45,810 --> 00:05:49,959
and the first one is the face that you're pointing at.
第一个是您要指向的脸。 

132
00:05:49,959 --> 00:05:53,310
So there are 24 plastic faces, so there
所以有24个塑料面

133
00:05:53,310 --> 00:05:55,959
are 24 names for these plastic faces.
这些塑料面孔的24个名称。 

134
00:05:55,959 --> 00:05:57,824
Let's see how we name the wireframe faces.
让我们看看如何命名线框面。 

135
00:05:57,824 --> 00:06:01,649



136
00:06:01,649 --> 00:06:07,569
If I take this face-- so we don't have colors here,
如果我采取这张脸-所以我们这里没有颜色， 

137
00:06:07,569 --> 00:06:08,449
they're all the same.
他们都是一样的。 

138
00:06:08,449 --> 00:06:11,550
So instead we care about their position.
因此，我们关心他们的位置。 

139
00:06:11,550 --> 00:06:14,449
A cube has a front and a back, right?
立方体有正面和背面，对吗？ 

140
00:06:14,649 --> 00:06:18,769
This cubelet is on the front somewhere, right?
这个立方体在前面的某个地方，对不对？ 

141
00:06:18,769 --> 00:06:23,659
So I'm going to have front somewhere in the name.
因此，我将在名称中占据领先位置。 

142
00:06:23,660 --> 00:06:29,610
It has an upper face and a lower face.
它具有上表面和下表面。 

143
00:06:29,610 --> 00:06:32,033
Is this going to be upper or lower?
这是较高还是较低？ 

144
00:06:32,033 --> 00:06:34,990
AUDIENCE: Upper.
听众：上层。 

145
00:06:34,990 --> 00:06:36,615
PROFESSOR: And the left or right?
教授：那是左还是右？ 

146
00:06:36,815 --> 00:06:37,524
PROFESSOR: Right.
教授：对。 

147
00:06:37,524 --> 00:06:40,870



148
00:06:40,870 --> 00:06:41,569
PROFESSOR: OK.
教授：好的。 

149
00:06:41,569 --> 00:06:46,701
So front upper right, which face am I looking at?
那么右上角，我在看哪张脸？ 

150
00:06:46,701 --> 00:06:47,776
AUDIENCE: The front.
听众：前面。 

151
00:06:47,776 --> 00:06:48,360
PROFESSOR: OK.
教授：好的。 

152
00:06:48,360 --> 00:06:51,129



153
00:06:51,329 --> 00:06:53,629
f u r, fur.
皮毛

154
00:06:53,629 --> 00:06:55,439
How about this space?
这个空间怎么样？ 

155
00:06:55,439 --> 00:06:59,524



156
00:06:59,524 --> 00:07:00,439
AUDIENCE: [INAUDIBLE].
听众：[听不清]。 

157
00:07:00,439 --> 00:07:04,939



158
00:07:04,939 --> 00:07:07,603
PROFESSOR: So far so good?
教授：到目前为止还好吗？ 

159
00:07:07,603 --> 00:07:09,490
Or it could be r u f, right?
还是可能是ruf，对吗？ 

160
00:07:09,490 --> 00:07:10,908
PROFESSOR: Or it could be r u f.
教授：或者可能是ru f。 

161
00:07:10,908 --> 00:07:11,824
AUDIENCE: [INAUDIBLE].
听众：[听不清]。 

162
00:07:11,824 --> 00:07:17,569



163
00:07:17,769 --> 00:07:20,322
PROFESSOR: I really don't know what it means, I'm behind.
教授：我真的不知道这意味着什么，我落后了。 

164
00:07:20,322 --> 00:07:21,204
AUDIENCE: Ruff like a dog?
听众：像狗一样吹牛？ 

165
00:07:21,404 --> 00:07:22,829
It has fur.
它有皮毛。 

166
00:07:22,829 --> 00:07:23,099
PROFESSOR: Oh, ruff ruff ruff.
教授：哦，,！ 

167
00:07:23,100 --> 00:07:23,600
OK.
好。 

168
00:07:23,600 --> 00:07:24,500
That's not too bad.
还算不错

169
00:07:24,500 --> 00:07:25,833
I was afraid of something worse.
我害怕更糟的事情。 

170
00:07:25,833 --> 00:07:26,970
OK.
好。 

171
00:07:26,970 --> 00:07:28,069
That's cool.
这很酷。 

172
00:07:28,269 --> 00:07:32,859
So a configuration will take plastic faces
因此，配置将采用塑料表面

173
00:07:32,860 --> 00:07:34,889
and face them onto the wireframe faces.
并将它们面对在线框表面上。 

174
00:07:34,889 --> 00:07:37,459



175
00:07:37,459 --> 00:07:40,729
So a configuration is going to be an array of 24 elements.
因此，配置将由24个元素组成。 

176
00:07:40,730 --> 00:07:47,819



177
00:07:47,819 --> 00:07:51,659
And the first element is going to tell me which plastic face
第一个要告诉我的是塑料脸

178
00:07:51,660 --> 00:07:57,069
ends up in-- Let's say if you are the second one,
结束于-假设您是第二个， 

179
00:07:57,269 --> 00:08:03,606
says which plastic face ends up in r u f,
说出哪些塑料面最终变成棕褐色， 

180
00:08:03,607 --> 00:08:06,009
and the third one, let's assume it's the space.
第三个，我们假设它是空间。 

181
00:08:06,209 --> 00:08:09,204



182
00:08:09,204 --> 00:08:10,035
AUDIENCE: Ruff.
听众：鲁夫。 

183
00:08:10,035 --> 00:08:10,701
PROFESSOR: Ruff.
教授：鲁夫。 

184
00:08:10,701 --> 00:08:14,000



185
00:08:14,199 --> 00:08:16,120
And there are 21 more faces, right?
还有21张脸，对吗？ 

186
00:08:16,120 --> 00:08:17,959
So each face has a number from zero
所以每个脸都有一个从零开始的数字

187
00:08:17,959 --> 00:08:22,989
to 23, because we're in Python, so we like zero-based indexing.
到23，因为我们在Python中，所以我们喜欢从零开始的索引。 

188
00:08:22,990 --> 00:08:29,050
And 24 elements in the array, 24 plastic faces.
阵列中有24个元素，有24个塑料面。 

189
00:08:29,050 --> 00:08:32,798
Which plastic face goes into f u r?
哪个塑料面会进入毛皮？ 

190
00:08:32,798 --> 00:08:37,970
Assuming this cubelet here-- see, I said cubicle anyway.
假设这里有这个小立方体，反正我还是说小隔间。 

191
00:08:37,970 --> 00:08:41,945
This cubelet here goes here in exactly this configuration.
此处的多维数据集正是以这种配置在此处运行的。 

192
00:08:41,945 --> 00:08:45,350



193
00:08:45,350 --> 00:08:47,576
AUDIENCE: [INAUDIBLE].
听众：[听不清]。 

194
00:08:47,576 --> 00:08:49,769
PROFESSOR: Yeah.
教授：是的。 

195
00:08:49,769 --> 00:08:53,110
So this face ends up here.
因此，这张脸在这里结束。 

196
00:08:53,110 --> 00:08:55,629
And that's what it means that the first element in the array
这就是数组中的第一个元素

197
00:08:55,629 --> 00:08:57,419
is y o b.
是b。 

198
00:08:57,419 --> 00:08:59,415
How about r u f?
 ruf怎么样？ 

199
00:08:59,416 --> 00:09:00,089
Who ends up in r u f?
谁最终变成了ruf？ 

200
00:09:00,289 --> 00:09:03,881



201
00:09:03,881 --> 00:09:05,645
AUDIENCE: [INAUDIBLE].
听众：[听不清]。 

202
00:09:05,645 --> 00:09:06,312
AUDIENCE: B o y.
听众：拜拜。 

203
00:09:06,312 --> 00:09:10,210



204
00:09:10,210 --> 00:09:14,113
PROFESSOR: And who ends up in e r f?
教授：谁最终以erf告终？ 

205
00:09:14,313 --> 00:09:15,230
AUDIENCE: [INAUDIBLE].
听众：[听不清]。 

206
00:09:15,230 --> 00:09:19,346



207
00:09:19,346 --> 00:09:19,929
PROFESSOR: OK.
教授：好的。 

208
00:09:19,929 --> 00:09:22,679
So does everyone understand configurations?
那么每个人都了解配置吗？ 

209
00:09:22,679 --> 00:09:24,421
Does this make sense?
这有意义吗？ 

210
00:09:24,422 --> 00:09:25,047
AUDIENCE: Yeah.
听众：是的。 

211
00:09:25,047 --> 00:09:26,543
I got lost somewhere in there.
我迷路了。 

212
00:09:26,543 --> 00:09:30,037
Can you explain the order for f u r and [INAUDIBLE]?
您能解释一下皮草和[听不清]的顺序吗？ 

213
00:09:30,037 --> 00:09:31,526
Like front upright?
像前柱一样吗？ 

214
00:09:31,726 --> 00:09:32,309
PROFESSOR: Oh.
教授：哦。 

215
00:09:32,309 --> 00:09:34,906
So do you mean-- so the order of the letters.
所以你的意思是-字母的顺序。 

216
00:09:34,907 --> 00:09:36,240
So there are two orderings here.
因此，这里有两个排序。 

217
00:09:36,240 --> 00:09:39,500
One is the order of the letters and there is an order.
一个是字母的顺序，然后是一个顺序。 

218
00:09:39,500 --> 00:09:41,570
I think the code uses clockwise order,
我认为代码使用顺时针顺序， 

219
00:09:41,570 --> 00:09:44,970
but what really matters is the first letter tells you which
但真正重要的是第一个字母告诉您

220
00:09:44,970 --> 00:09:46,403
face you're talking about.
面对你在谈论。 

221
00:09:46,403 --> 00:09:48,019
AUDIENCE: So this is front face.
听众：这是正面。 

222
00:09:48,019 --> 00:09:50,758
PROFESSOR: Face, up face.
教授：面朝上。 

223
00:09:50,758 --> 00:09:51,666
AUDIENCE: What's up?
听众：怎么了？ 

224
00:09:51,666 --> 00:09:53,940
What's front?
前面是什么？ 

225
00:09:53,940 --> 00:09:57,480
PROFESSOR: So for this cubelet, this is front,
教授：所以对于这个立方体，这是最前面的， 

226
00:09:57,480 --> 00:09:58,730
this is the right, this is up.
这是正确的，这是向上。 

227
00:09:58,730 --> 00:10:02,109



228
00:10:02,309 --> 00:10:11,229
This cubelet wold have a front, an up, and a left.
这块立方体有一个正面，一个上方和一个左侧。 

229
00:10:11,230 --> 00:10:13,580
So now there are 24 faces and all
所以现在有24张脸

230
00:10:13,580 --> 00:10:16,370
of them get numbers from 0 23.
他们从0 23。 

231
00:10:16,370 --> 00:10:19,399
And here we assume that f u r is space zero,
这里我们假设毛发是零空间

232
00:10:19,399 --> 00:10:21,799
r u f is space 1, and e r f is face 2, which
 ruf是空间1，而erf是面2， 

233
00:10:21,799 --> 00:10:26,829
is not quite [INAUDIBLE], but you'll have the mapping there.
还不是[音频不清晰]，但是您将在其中找到映射。 

234
00:10:26,830 --> 00:10:27,330
OK.
好。 

235
00:10:27,330 --> 00:10:30,610
So a configuration is in an array of 24 elements
因此，配置包含24个元素

236
00:10:30,610 --> 00:10:33,450
and it maps plastic faces to wireframe faces, which
并将塑料面映射到线框面

237
00:10:33,450 --> 00:10:36,329
brings us to, how many configurations are there?
带我们到那里，有多少种配置？ 

238
00:10:36,529 --> 00:10:43,207



239
00:10:43,207 --> 00:10:45,846
AUDIENCE: You mean like mapping 4 factorial?
听众：您是说喜欢映射4阶乘？ 

240
00:10:45,846 --> 00:10:46,429
PROFESSOR: OK.
教授：好的。 

241
00:10:46,429 --> 00:10:49,000



242
00:10:49,000 --> 00:10:50,279
So let's see what it does.
因此，让我们看看它的作用。 

243
00:10:50,279 --> 00:10:51,625
We have 24 plastic faces.
我们有24个塑料面。 

244
00:10:51,625 --> 00:10:57,600



245
00:10:57,600 --> 00:11:00,349
From 0 to 23.
从0到23。 

246
00:11:00,549 --> 00:11:04,831
And they have to be mapped to 24 positions.
并且必须将它们映射到24个位置。 

247
00:11:04,831 --> 00:11:06,081
AUDIENCE: [INTERPOSING VOICES]
听众：[插入语音] 

248
00:11:06,081 --> 00:11:13,537



249
00:11:13,537 --> 00:11:15,324
AUDIENCE: There's six colors, aren't there?
听众：有六种颜色，不是吗？ 

250
00:11:15,524 --> 00:11:17,039
AUDIENCE: Yeah.
听众：是的。 

251
00:11:17,039 --> 00:11:21,021
PROFESSOR: There are six colors, but if this is also yellow,
教授：有六种颜色，但如果也是黄色， 

252
00:11:21,022 --> 00:11:21,980
but there's a red here.
但是这里有红色。 

253
00:11:21,980 --> 00:11:24,159
This is a different face, see, this is yellow,
这是一张不同的脸，看，这是黄色的， 

254
00:11:24,159 --> 00:11:26,230
red, and there's a green down here.
红色，这里有绿色。 

255
00:11:26,230 --> 00:11:29,960
Then this is the yellow face of the yellow, green, red cubelet.
这是黄色，绿色，红色立方体的黄色面。 

256
00:11:29,960 --> 00:11:31,599
So we care about the individual faces.
因此，我们关心个人面孔。 

257
00:11:31,799 --> 00:11:33,140
So yeah, your answer was right.
是的，您的答案是正确的。 

258
00:11:33,140 --> 00:11:34,889
I'm trying to explain it to everyone else.
我正在尝试向其他人解释。 

259
00:11:34,889 --> 00:11:36,158
But your answer is right.
但是你的答案是正确的。 

260
00:11:36,158 --> 00:11:37,033
AUDIENCE: Well, wait.
听众：好吧，等等。 

261
00:11:37,033 --> 00:11:40,485
But you can't-- I mean, we talk about some are impossible.
但是您不能-我的意思是，我们谈论一些不可能的事情。 

262
00:11:40,485 --> 00:11:43,539
Like, you're always gonna have a grouping of y o b.
就像，您总是会有一组yo b。 

263
00:11:43,539 --> 00:11:45,351
That's never gonna change.
那永远不会改变。 

264
00:11:45,351 --> 00:11:46,059
PROFESSOR: Right.
教授：对。 

265
00:11:46,059 --> 00:11:48,869
So some of these aren't reachable,
所以其中一些是无法达到的， 

266
00:11:48,870 --> 00:11:50,870
because you're not allowed to break up the cube.
因为不允许您分解多维数据集。 

267
00:11:50,870 --> 00:11:51,730
AUDIENCE: Yeah.
听众：是的。 

268
00:11:51,730 --> 00:11:53,508
PROFESSOR: And that's OK.
教授：没关系。 

269
00:11:53,708 --> 00:11:55,500
This is still how the code represents them.
这仍然是代码表示它们的方式。 

270
00:11:55,500 --> 00:11:59,654
So I'm asking if you had-- if all these would be possible,
所以我问你是否有-如果所有这些都可能， 

271
00:11:59,654 --> 00:12:01,879
how many would we get?
我们会得到多少？ 

272
00:12:01,879 --> 00:12:04,470
And the answer is that to map 24 plastic faces
答案是要映射24个塑料面

273
00:12:04,470 --> 00:12:06,849
to 24 wireframe faces.
到24个线框面。 

274
00:12:07,049 --> 00:12:13,120
So this mapping is called-- anyone good with math?
因此，这种映射称为-擅长数学的人吗？ 

275
00:12:13,120 --> 00:12:14,460
AUDIENCE: 1 to 1.
观众：1比1。 

276
00:12:14,460 --> 00:12:15,359
AUDIENCE: Bijection.
听众：双射。 

277
00:12:15,559 --> 00:12:16,449
PROFESSOR: OK.
教授：好的。 

278
00:12:16,450 --> 00:12:22,320
So when you're taking-- OK.
所以，当您服用时-好。 

279
00:12:22,320 --> 00:12:26,190
So when we have two sets and you have a bijection between them
所以当我们有两个集合，而你在两个集合之间有一个双射

280
00:12:26,190 --> 00:12:31,069
or 1 to 1 mapping, that function is also called?
或1对1映射，该函数也称为？ 

281
00:12:31,269 --> 00:12:32,269
AUDIENCE: [INAUDIBLE].
听众：[听不清]。 

282
00:12:32,269 --> 00:12:34,352
PROFESSOR: You probably don't know the answer yet.
教授：您可能还不知道答案。 

283
00:12:34,352 --> 00:12:38,899
You have to wait until the end of 6042.
您必须等到6042结束。 

284
00:12:38,899 --> 00:12:41,299
So I'm trying to hint that right now, if you remember
所以我现在想暗示一下，如果您还记得的话

285
00:12:41,299 --> 00:12:44,264
the end of 6042, maybe the answer is somewhere there.
 6042年末，也许答案就在那儿。 

286
00:12:44,264 --> 00:12:44,729
AUDIENCE: Blur?.
听众：模糊吗？ 

287
00:12:44,929 --> 00:12:49,829



288
00:12:49,830 --> 00:12:52,569
AUDIENCE: Perfect.
听众：完美。 

289
00:12:52,769 --> 00:12:54,918
AUDIENCE: A perfect match
观众：完美的搭配

290
00:12:54,918 --> 00:12:55,710
AUDIENCE: Permut--.
听众：排列- 

291
00:12:55,710 --> 00:12:57,286



292
00:12:57,486 --> 00:12:59,819
AUDIENCE: I totally learned about that in middle school,
听众：我在中学时就完全了解了这一点， 

293
00:12:59,820 --> 00:13:01,000
I think.
我认为。 

294
00:13:01,000 --> 00:13:03,275
PROFESSOR: OK.
教授：好的。 

295
00:13:03,275 --> 00:13:03,774
So this is--
所以这是- 

296
00:13:03,774 --> 00:13:05,590
AUDIENCE: Permutations and combinations.
听众：排列和组合。 

297
00:13:05,590 --> 00:13:07,240
PROFESSOR: So this is a permutation.
教授：这是一个排列。 

298
00:13:07,240 --> 00:13:08,320
AUDIENCE: Yeah.
听众：是的。 

299
00:13:08,320 --> 00:13:11,095
PROFESSOR: How many permutations do you have out of 24 elements?
教授：您有24个元素中有多少个排列？ 

300
00:13:11,095 --> 00:13:15,100



301
00:13:15,100 --> 00:13:17,182
AUDIENCE: Does that order [? mean ?] [? matters ?]
听众：命令吗？意思 ？] [？有关系吗？] 

302
00:13:17,182 --> 00:13:19,154
[INAUDIBLE] 24 [INAUDIBLE].
 [听不清] 24 [听不清]。 

303
00:13:19,154 --> 00:13:23,110



304
00:13:23,110 --> 00:13:25,576
PROFESSOR: So this is a lot of permutations, right?
教授：因此，这是很多排列的，对吗？ 

305
00:13:25,576 --> 00:13:27,159
It's a good thing that we're not going
我们不去是一件好事

306
00:13:27,159 --> 00:13:29,829
to explore most of these configurations.
探索其中的大多数配置。 

307
00:13:29,830 --> 00:13:31,980
So we said before, that we're going
所以我们之前说过，我们要

308
00:13:31,980 --> 00:13:36,490
to build a graph where the vertices are configurations,
在顶点为配置的情况下构建图， 

309
00:13:36,490 --> 00:13:37,979
and the edges are moves that get us
边缘是使我们前进的动作

310
00:13:38,179 --> 00:13:41,459
from one configuration to another configuration.
从一种配置到另一种配置。 

311
00:13:41,460 --> 00:13:43,719
Can they afford to build this graph first and then run
他们能否负担得起先构建此图然后运行

312
00:13:43,919 --> 00:13:46,849
BFS on it?
 BFS就可以了吗？ 

313
00:13:46,850 --> 00:13:48,190
Not going to work, right?
不上班吧？ 

314
00:13:48,190 --> 00:13:51,209
We don't have enough RAM for this.
我们没有足够的RAM用于此。 

315
00:13:51,409 --> 00:13:53,219
So instead we're going to have to operate
所以相反，我们将不得不操作

316
00:13:53,220 --> 00:13:55,580
on an implicit graph for presentation.
在用于表示的隐式图上。 

317
00:13:55,580 --> 00:13:58,340
Well, fortunately, BFS doesn't want the whole graph.
好吧，幸运的是，BFS不需要整个图表。 

318
00:13:58,340 --> 00:14:00,620
The way BFS works is it has a list of nodes
 BFS的工作方式是它具有节点列表

319
00:14:00,620 --> 00:14:02,980
that it has to visit, and when it visits a node,
它必须访问，并且当它访问节点时， 

320
00:14:02,980 --> 00:14:05,969
it wants to know its neighbors.
它想知道它的邻居。 

321
00:14:06,169 --> 00:14:08,279
And that's it.
就是这样。 

322
00:14:08,279 --> 00:14:09,399
Yes?
是？ 

323
00:14:09,399 --> 00:14:11,289
Everyone happy with it?
每个人都满意吗？ 

324
00:14:11,289 --> 00:14:14,039
So all they have to do is, in order
所以他们要做的就是

325
00:14:14,039 --> 00:14:16,029
to build this implicit graph representation,
建立这个隐式图表示

326
00:14:16,029 --> 00:14:18,199
is we have to know the start node,
是我们必须知道起始节点， 

327
00:14:18,200 --> 00:14:20,469
So BFS can start somewhere.
因此BFS可以从某个地方开始。 

328
00:14:20,669 --> 00:14:23,189
And we have to be able to give it a node,
而且我们必须能够给它一个节点， 

329
00:14:23,190 --> 00:14:25,860
we have to be able to generate all the neighbor nodes.
我们必须能够生成所有邻居节点。 

330
00:14:25,860 --> 00:14:27,360
So given the configuration, we have
所以给定配置，我们有

331
00:14:27,360 --> 00:14:29,075
to be able to generate the configurations that
能够生成配置

332
00:14:29,275 --> 00:14:33,949
would result by applying most of that configuration.
通过应用大多数该配置将得到结果。 

333
00:14:33,950 --> 00:14:36,609
So what are the moves that you can do with this?
那么，您可以采取哪些措施？ 

334
00:14:36,809 --> 00:14:38,439
Suppose you have a cubelet.
假设您有一个立方体。 

335
00:14:38,440 --> 00:14:39,819
What are the possible moves?
有哪些可能的举动？ 

336
00:14:40,019 --> 00:14:41,029
There aren't that many.
没有那么多。 

337
00:14:41,029 --> 00:14:44,839
We're interested in the simplest kind of moves.
我们对最简单的举动感兴趣。 

338
00:14:44,840 --> 00:14:46,565
AUDIENCE: [INAUDIBLE]
观众：[听不清] 

339
00:14:46,765 --> 00:14:49,259
AUDIENCE: Yeah, you can make the right side
听众：是的，你可以做右边

340
00:14:49,259 --> 00:14:52,759
go right, which is equivalent to the left side going left.
向右走，相当于左侧向左走。 

341
00:14:52,759 --> 00:14:57,759
And then you can do [INAUDIBLE] 4, left [INAUDIBLE].
然后，您可以执行[听不清] 4，然后离开[听不清]。 

342
00:14:57,759 --> 00:14:59,259
AUDIENCE: It's a nice number.
听众：这是一个不错的数字。 

343
00:14:59,259 --> 00:15:00,240
PROFESSOR: OK.
教授：好的。 

344
00:15:00,240 --> 00:15:04,610
I think there are a few more, so here's how I look at it.
我想还有更多，所以这就是我的看法。 

345
00:15:04,610 --> 00:15:07,460
You can take the front face, so these four,
你可以把正面，所以这四个， 

346
00:15:07,460 --> 00:15:10,229
and do a clockwise rotation, 90 degrees,
然后顺时针旋转90度， 

347
00:15:10,429 --> 00:15:13,259
or you can do a counterclockwise rotation, 90 degrees.
或者您可以逆时针旋转90度。 

348
00:15:13,259 --> 00:15:16,830
And you can do that for each face.
您可以为每张脸做这些。 

349
00:15:16,830 --> 00:15:20,470
AUDIENCE: But doing a front clockwise rotation is the same
听众：但是顺时针旋转是一样的

350
00:15:20,470 --> 00:15:23,499
as doing a back counter clockwise rotation, which
像逆时针旋转一样， 

351
00:15:23,499 --> 00:15:24,726
is [? it-- ?]
是[？它-？] 

352
00:15:24,726 --> 00:15:26,699
AUDIENCE: Yeah.
听众：是的。 

353
00:15:26,700 --> 00:15:27,969
PROFESSOR: Doing a front clockwise,
教授：顺时针方向转动， 

354
00:15:28,169 --> 00:15:30,399
doing a back counterclockwise is the same thing
逆时针方向后退是一回事

355
00:15:30,399 --> 00:15:32,990
after you account for symmetries.
在考虑对称性之后。 

356
00:15:32,990 --> 00:15:33,490
Yeah.
是的

357
00:15:33,490 --> 00:15:35,080
AUDIENCE: Exactly.
听众：是的。 

358
00:15:35,080 --> 00:15:36,330
AUDIENCE: So it's six?
听众：是六点？ 

359
00:15:36,330 --> 00:15:36,319
PROFESSOR: Yep.
教授：是的。 

360
00:15:36,519 --> 00:15:38,727
So there's only six after you account for symmetries.
因此，考虑对称性后只有六个。 

361
00:15:38,727 --> 00:15:40,329
Let's play devil's advocate and assume
让我们扮演魔鬼的拥护者并承担

362
00:15:40,330 --> 00:15:41,620
we don't account for symmetries.
我们不考虑对称性。 

363
00:15:41,620 --> 00:15:43,085
We're actually doing the code, because I
我们实际上正在执行代码，因为我

364
00:15:43,285 --> 00:15:45,609
need to teach you something.
需要教你一些东西。 

365
00:15:45,610 --> 00:15:47,615
So let's assume we don't apply.
因此，假设我们不适用。 

366
00:15:47,615 --> 00:15:48,990
By the way, how would you account
顺便问一下

367
00:15:48,990 --> 00:15:51,110
for symmetries, easy way?
对于对称性，简单的方法？ 

368
00:15:51,110 --> 00:15:52,990
Did anyone read the comments in the code?
是否有人阅读了代码中的注释？ 

369
00:15:52,990 --> 00:15:58,091



370
00:15:58,091 --> 00:15:58,590
OK.
好。 

371
00:15:58,590 --> 00:16:03,125
So would you account for symmetries.
因此，您会考虑对称性。 

372
00:16:03,125 --> 00:16:04,610
AUDIENCE: Doesn't it just happen?
听众：这不是真的吗？ 

373
00:16:04,610 --> 00:16:10,070



374
00:16:10,070 --> 00:16:11,850
The permutation is going to [INAUDIBLE].
排列将变为[音频不清晰]。 

375
00:16:11,850 --> 00:16:13,065
AUDIENCE: Can you just look at it,
听众：你能看看吗， 

376
00:16:13,265 --> 00:16:18,429
like, each space is neighboring faces, and [INAUDIBLE]?
例如，每个空间都是相邻的面孔，[听不清]？ 

377
00:16:18,429 --> 00:16:22,579
PROFESSOR: So the way we do it is we anchor one cubelet.
教授：因此，我们的方法是锚定一个立方体。 

378
00:16:22,580 --> 00:16:27,870
So we have one cubelet that is a plastic cubelet that
因此，我们有一个塑料立方体， 

379
00:16:27,870 --> 00:16:30,909
is always going to go here.
总是要去这里。 

380
00:16:30,909 --> 00:16:34,319
So three plastic faces here are always
所以这里总是有三个塑料面

381
00:16:34,320 --> 00:16:39,339
going to go to three wireframed faces here.
这里要去三个线框的面孔。 

382
00:16:39,339 --> 00:16:40,679
And if you fix those three faces then
如果修好这三张脸， 

383
00:16:40,879 --> 00:16:43,689
you don't have simple symmetries anymore.
您不再具有简单的对称性。 

384
00:16:43,690 --> 00:16:44,500
All right?
好吧？ 

385
00:16:44,500 --> 00:16:47,683
Three axes of symmetry, so fixing three faces settles it.
三个对称轴，因此固定三个面即可解决它。 

386
00:16:47,683 --> 00:16:50,774



387
00:16:50,774 --> 00:16:52,940
AUDIENCE: Wait, so then how many moves are possible?
听众：等等，那么可以移动几步呢？ 

388
00:16:52,940 --> 00:16:55,229
12?
 12点？ 

389
00:16:55,429 --> 00:16:56,089
AUDIENCE: No.
听众：不。 

390
00:16:56,090 --> 00:16:57,960
But you only do one thing, though.
但是，您只能做一件事。 

391
00:16:57,960 --> 00:16:59,980
Now you don't do counterclock-- you don't do.
现在您不做时钟-您不做时钟。 

392
00:16:59,980 --> 00:17:01,190
AUDIENCE: If one is anchored, there's six left.
听众：如果锚定一个，则剩下六个。 

393
00:17:01,190 --> 00:17:01,340
AUDIENCE: Yeah.
听众：是的。 

394
00:17:01,340 --> 00:17:01,370
Yeah.
是的

395
00:17:01,370 --> 00:17:02,702
You don't move the anchored one.
您不会移动锚定的那个。 

396
00:17:02,702 --> 00:17:05,259



397
00:17:05,259 --> 00:17:07,549
AUDIENCE: Oh yeah, because you can only [INAUDIBLE] two
听众：哦，是的，因为你只能[听不清]两个

398
00:17:07,549 --> 00:17:11,255
of the-- three of the faces now, but.
其中的三个面孔，不过。 

399
00:17:11,256 --> 00:17:11,638
PROFESSOR: OK.
教授：好的。 

400
00:17:11,838 --> 00:17:15,389
So let's look at the left face.
因此，让我们看一下左脸。 

401
00:17:15,390 --> 00:17:17,660
So you have a configuration.
这样便有了配置。 

402
00:17:17,660 --> 00:17:20,210
So you can move the left face clockwise,
这样您可以顺时针方向移动左脸， 

403
00:17:20,210 --> 00:17:21,759
left face counterclockwise.
左脸逆时针旋转。 

404
00:17:21,759 --> 00:17:26,910
You can move the top face clockwise, top face
您可以顺时针移动顶面

405
00:17:26,910 --> 00:17:28,680
counterclockwise, and a couple more.
逆时针，还有更多。 

406
00:17:28,680 --> 00:17:32,240



407
00:17:32,240 --> 00:17:35,609
So what does a move look like?
那么，举动看起来像什么？ 

408
00:17:35,609 --> 00:17:36,669
Someone said it before.
有人说过

409
00:17:36,670 --> 00:17:39,190



410
00:17:39,190 --> 00:17:42,549
So when you're doing a move, what's going to happen is,
因此，当您采取行动时，将会发生的事情是， 

411
00:17:42,549 --> 00:17:44,652
a move doesn't create plastic faces
此举不会产生可塑的面孔

412
00:17:44,652 --> 00:17:45,909
and it doesn't destroy them, right?
并不会摧毁它们，对不对？ 

413
00:17:46,109 --> 00:17:51,579
It just changes their position on the wireframe.
它只是改变它们在线框上的位置。 

414
00:17:51,579 --> 00:17:55,149
So if you have an initial configuration that
因此，如果您具有初始配置， 

415
00:17:55,150 --> 00:17:57,359
has plastic faces assigned to wireframe faces,
将塑料面分配给线框面， 

416
00:17:57,559 --> 00:18:02,339
and you have a final configuration,
并完成了最终配置， 

417
00:18:02,339 --> 00:18:09,881
these plastic faces are going to end up somewhere
这些塑料面孔将最终消失在某个地方

418
00:18:09,882 --> 00:18:10,389
on the wireframe.
在线框上。 

419
00:18:10,589 --> 00:18:13,379



420
00:18:13,380 --> 00:18:15,130
And that's true for all the plastic faces.
所有塑料面都是这样。 

421
00:18:15,130 --> 00:18:19,069
So the plastic faces are going to end up somewhere.
因此，塑料面将最终出现在某处。 

422
00:18:19,269 --> 00:18:22,930
Also, what's nice is if we look at the wireframe,
而且，好的是，如果我们看一下线框， 

423
00:18:22,930 --> 00:18:27,940
if I do a clockwise rotation in the front, whatever
如果我在前面顺时针旋转，无论

424
00:18:27,940 --> 00:18:31,440
plastic face was here is going to end up here.
塑料的脸在这里要在这里结束。 

425
00:18:31,440 --> 00:18:34,519
Whatever plastic face was here is going to end up here,
无论这里的塑料脸是什么， 

426
00:18:34,519 --> 00:18:37,374
so on and so forth.
等等等等。 

427
00:18:37,374 --> 00:18:41,457
So it's a function of rotation [INAUDIBLE] inside [INAUDIBLE].
因此，这是[听不清]内部旋转[听不清]的功能。 

428
00:18:41,657 --> 00:18:45,692
Like the four faces that correspond to each other,
就像彼此对应的四个脸一样， 

429
00:18:45,692 --> 00:18:46,539
rotate.
旋转。 

430
00:18:46,539 --> 00:18:47,930
PROFESSOR: OK.
教授：好的。 

431
00:18:47,930 --> 00:18:52,009
That's some good-- that's going deeper than want to go.
很好-比想去的要深入。 

432
00:18:52,009 --> 00:18:55,529
I want to account for something simpler.
我想解释一些简单的问题。 

433
00:18:55,529 --> 00:18:58,119
So my point is that the arrows will always,
所以我的意思是箭头将永远

434
00:18:58,119 --> 00:19:02,029
if I do a right clockwise rotation,
如果我顺时针旋转， 

435
00:19:02,029 --> 00:19:04,879
the arrows will always look the same.
箭头将始终看起来相同。 

436
00:19:04,880 --> 00:19:08,200
So the only thing that changes is what's inside the array.
所以唯一改变的是数组内部。 

437
00:19:08,200 --> 00:19:10,670
But if you take one configuration array
但是，如果您采用一个配置阵列

438
00:19:10,670 --> 00:19:13,750
and you move things according to the way you're
然后按照自己的方式移动事物

439
00:19:13,750 --> 00:19:17,390
supposed to move them for the front clockwise move,
应该将它们向前顺时针移动， 

440
00:19:17,390 --> 00:19:20,711
you're going to get the right result.
您将获得正确的结果。 

441
00:19:20,711 --> 00:19:22,420
So what is this a bunch of arrows called?
那么这串箭叫什么呢？ 

442
00:19:22,420 --> 00:19:25,509
What does it do?
它有什么作用？ 

443
00:19:25,509 --> 00:19:26,750
What does it do to the faces?
它对脸有什么作用？ 

444
00:19:26,750 --> 00:19:29,286
What does it do to the elements of the array?
它对数组的元素有什么作用？ 

445
00:19:29,286 --> 00:19:30,919
AUDIENCE: It moves in different spots.
听众：它在不同的位置移动。 

446
00:19:31,119 --> 00:19:32,981
PROFESSOR: OK, so fancy math name?
教授：好的，那么漂亮的数学名称吗？ 

447
00:19:32,981 --> 00:19:34,279
AUDIENCE: Shuffle.
听众：随机播放。 

448
00:19:34,279 --> 00:19:35,761
PROFESSOR: OK.
教授：好的。 

449
00:19:35,761 --> 00:19:36,970
So this is what I got before.
这就是我以前得到的。 

450
00:19:36,970 --> 00:19:38,428
This is how you think of it, right?
您是怎么想的，对吗？ 

451
00:19:38,428 --> 00:19:42,203
It's a shuffle, so fancy math name for a shuttle.
这是一个混洗，所以穿梭的数学名称如此奇特。 

452
00:19:42,403 --> 00:19:43,339
AUDIENCE: [INAUDIBLE].
听众：[听不清]。 

453
00:19:43,339 --> 00:19:46,105
PROFESSOR: All right.
教授：好的。 

454
00:19:46,105 --> 00:19:48,849
AUDIENCE: Something going on here.
听众：这里发生了什么。 

455
00:19:48,849 --> 00:19:50,337
PROFESSOR: So then a move is a?
教授：那么那是一个举动吗？ 

456
00:19:50,337 --> 00:19:51,837
AUDIENCE: Rotation [? permutation?].
听众：轮换[？排列？]。 

457
00:19:51,837 --> 00:19:54,753



458
00:19:54,753 --> 00:19:55,253
[INAUDIBLE]
 [听不清] 

459
00:19:55,253 --> 00:20:00,639



460
00:20:00,640 --> 00:20:03,410
PROFESSOR: All right, so the thing is-- the difficult part
教授：好的，这就是-困难的部分

461
00:20:03,410 --> 00:20:05,190
of the code is you have two things that
代码的两点是

462
00:20:05,190 --> 00:20:07,119
are represented by permutations.
用排列表示。 

463
00:20:07,319 --> 00:20:12,029
Configurations are permutations of plastic faces
配置是塑料面的排列

464
00:20:12,029 --> 00:20:16,539
onto the array, onto the array of wireframes faces.
到线框面阵列上。 

465
00:20:16,539 --> 00:20:20,144
And then a move is a permutation of a configuration
然后移动就是配置的排列

466
00:20:20,144 --> 00:20:21,269
into another configuration.
进入另一种配置。 

467
00:20:21,269 --> 00:20:24,339



468
00:20:24,339 --> 00:20:26,419
OK, so now if I want to compute neighbors,
好，现在如果我要计算邻居， 

469
00:20:26,420 --> 00:20:28,730
I take-- we think there are six moves,
我认为-我们认为有六个动作， 

470
00:20:28,730 --> 00:20:31,519
so I'm going to take six moves.
所以我要采取六个动作。 

471
00:20:31,519 --> 00:20:33,950
I'm going to type out the permutations, so 6 times
我要输入排列，所以6次

472
00:20:33,950 --> 00:20:37,799
24 numbers, and that's it.
 24个数字，仅此而已。 

473
00:20:37,799 --> 00:20:39,921
Now I can compute neighbors.
现在我可以计算邻居了。 

474
00:20:39,921 --> 00:20:40,795
Does that make sense?
那有意义吗？ 

475
00:20:40,795 --> 00:20:43,440



476
00:20:43,440 --> 00:20:45,942
AUDIENCE: I think you have all the permutations.
听众：我认为您可以进行所有排列。 

477
00:20:45,942 --> 00:20:47,650
PROFESSOR: So there are six moves, right?
教授：所以有六个动作，对吗？ 

478
00:20:47,650 --> 00:20:48,063
AUDIENCE: Yeah, but then it's right.
听众：是的，但是那是对的。 

479
00:20:48,063 --> 00:20:48,579
Oh yeah--
哦耶 - 

480
00:20:48,779 --> 00:20:52,720
PROFESSOR: If I take a configuration,
教授：如果我进行配置， 

481
00:20:52,720 --> 00:20:55,009
and I apply the permutation for this move,
我将这一排列应用于此动作， 

482
00:20:55,009 --> 00:20:56,549
I'm going to get a new configuration,
我将获得一个新的配置， 

483
00:20:56,549 --> 00:20:57,960
and that's its neighbor.
那是它的邻居。 

484
00:20:57,960 --> 00:21:04,399
So if I apply the permutation for LC 4,
因此，如果我将置换应用于LC 4， 

485
00:21:04,599 --> 00:21:06,779
left clockwise to this configuration,
顺时针向左转到此配置， 

486
00:21:06,779 --> 00:21:08,950
I get the new configuration.
我得到了新的配置。 

487
00:21:08,950 --> 00:21:11,789
So all I need to do is hard code those configurations,
所以我要做的就是硬编码这些配置， 

488
00:21:11,789 --> 00:21:12,539
and then I'm done.
然后我就完成了。 

489
00:21:12,539 --> 00:21:14,349
I can compute neighbors.
我可以计算邻居。 

490
00:21:14,349 --> 00:21:15,559
But that's a lot of typing.
但这需要大量输入。 

491
00:21:15,559 --> 00:21:17,480
I don't want to type as much.
我不想输入太多。 

492
00:21:17,480 --> 00:21:20,170
I want to reduce my burden a little bit.
我想减轻一点负担。 

493
00:21:20,170 --> 00:21:23,629
And we can do that by noticing that some moves are associated
我们可以通过注意一些动作来做到这一点

494
00:21:23,829 --> 00:21:25,460
with some other moves.
和其他一些动作。 

495
00:21:25,460 --> 00:21:28,356
So, if I go left clockwise move, that's
所以，如果我顺时针左移，那就是

496
00:21:28,356 --> 00:21:30,190
the inverse of a left counterclockwise move.
逆时针向左移动的反方向。 

497
00:21:30,190 --> 00:21:32,909



498
00:21:33,109 --> 00:21:37,219
So, if given the permutation, I could compute its inverse,
因此，如果给出了排列，我可以计算其逆， 

499
00:21:37,220 --> 00:21:40,634
then I wouldn't have to type as many permutations.
那么我就不必键入太多的排列。 

500
00:21:40,634 --> 00:21:41,598
Right?
对？ 

501
00:21:41,598 --> 00:21:42,639
Why do I care about that?
我为什么要在乎呢？ 

502
00:21:42,640 --> 00:21:46,121
Did anyone take 6004?
有人拿过6004吗？ 

503
00:21:46,121 --> 00:21:46,419
Remember?
记得？ 

504
00:21:46,619 --> 00:21:49,569
So at some lab, which is the dreaded beta lab,
因此，在一个可怕的Beta实验室中， 

505
00:21:49,569 --> 00:21:52,656
you have to write the control block for a processor, right?
您必须为处理器编写控制块，对吗？ 

506
00:21:52,656 --> 00:21:54,990
And that's a lot of zeros and 1's that you have to type.
这是您必须输入的很多零和1。 

507
00:21:54,990 --> 00:21:57,857
And if you get one wrong, good luck to [INAUDIBLE].
如果您弄错了，请[听不清]。 

508
00:21:57,857 --> 00:22:00,809
[INTERPOSING VOICES]
 [插入语音] 

509
00:22:00,809 --> 00:22:03,436
AUDIENCE: 18 wide and 64 tall.
听众：18宽64高。 

510
00:22:03,436 --> 00:22:04,410
PROFESSOR: I know.
教授：我知道。 

511
00:22:04,411 --> 00:22:05,872
AUDIENCE: Copy and paste like.
听众：复制并粘贴。 

512
00:22:05,872 --> 00:22:06,846
AUDIENCE: Yeah, and copy paste.
听众：是的，然后复制粘贴。 

513
00:22:06,846 --> 00:22:07,346
[INAUDIBLE]
 [听不清] 

514
00:22:07,346 --> 00:22:10,645



515
00:22:10,645 --> 00:22:11,229
PROFESSOR: OK.
教授：好的。 

516
00:22:11,229 --> 00:22:12,690
Bad memory.
记性不好。 

517
00:22:12,690 --> 00:22:13,965
Let's move on.
让我们继续。 

518
00:22:14,165 --> 00:22:14,980
Let's move on.
让我们继续。 

519
00:22:14,980 --> 00:22:17,920
So two good news, two pieces of good news.
所以有两个好消息，有两个好消息。 

520
00:22:17,920 --> 00:22:20,428
One, some of these are redundant in our case, two,
一，在我们的案例中，其中有些是多余的，二， 

521
00:22:20,628 --> 00:22:23,169
we wrote everything for you, so you don't have to write them,
我们为您编写了所有内容，因此您不必编写它们， 

522
00:22:23,170 --> 00:22:25,740
we're just teaching you how we did them,
我们只是在教你如何做， 

523
00:22:25,740 --> 00:22:29,029
because the inverse of a permutation is cool
因为排列的逆很酷

524
00:22:29,029 --> 00:22:31,053
and I think it's a good concept to know.
我认为这是一个很好的概念。 

525
00:22:31,054 --> 00:22:32,720
So let's look at how a permutation looks
因此，让我们看一下排列的外观

526
00:22:32,720 --> 00:22:34,819
like and compute its inverse and then move on
喜欢并计算其逆，然后继续

527
00:22:34,819 --> 00:22:36,039
to other nice problems.
其他好的问题。 

528
00:22:36,039 --> 00:22:43,460



529
00:22:43,460 --> 00:22:48,539
OK so let's take a presentation of five elements,
好，让我们介绍五个要素， 

530
00:22:48,539 --> 00:22:50,500
not going to go to 24 on the board here.
这里不会去董事会的24。 

531
00:22:50,500 --> 00:22:53,329



532
00:22:53,329 --> 00:22:55,189
3, 5, 1, 2, 4.
 3、5、1、2、4 

533
00:22:55,190 --> 00:22:57,940
This is how permutations look like in math mode.
这就是数学模式下的排列方式。 

534
00:22:57,940 --> 00:22:59,519
If you want to be more explicit, you
如果您想更加明确， 

535
00:22:59,519 --> 00:23:01,730
can add a row numbers above.
可以在上面添加行号。 

536
00:23:01,730 --> 00:23:04,829



537
00:23:04,829 --> 00:23:07,859
And this is a bit more explicit about what a permutation does.
这一点对置换的作用更为明确。 

538
00:23:07,859 --> 00:23:11,009
So permutation takes an input list, let's say a b c d e.
因此，排列需要一个输入列表，比方说abcd e。 

539
00:23:11,009 --> 00:23:14,350



540
00:23:14,351 --> 00:23:16,649
And for this is an output list, according to the recipe that
这是一个输出列表，根据配方

541
00:23:16,849 --> 00:23:17,789
you see here .
你看这里。 

542
00:23:17,789 --> 00:23:21,109
So this pretty much says, the first element of the output
这就是说，输出的第一个元素

543
00:23:21,109 --> 00:23:25,059
is the third element of the input.
是输入的第三个元素。 

544
00:23:25,059 --> 00:23:27,849
The second element of the output is the fifth element
输出的第二个元素是第五个元素

545
00:23:27,849 --> 00:23:28,654
in the input.
在输入中。 

546
00:23:28,654 --> 00:23:30,879



547
00:23:30,880 --> 00:23:32,380
Wait, this is the wrong permutation.
等等，这是错误的排列。 

548
00:23:32,380 --> 00:23:40,257



549
00:23:40,257 --> 00:23:42,514
It doesn't look as pretty, so I'm changing the permutation.
它看起来并不漂亮，所以我正在更改排列。 

550
00:23:42,714 --> 00:23:46,569



551
00:23:46,569 --> 00:23:48,970
The third element of the output is the first element
输出的第三个元素是第一个元素

552
00:23:48,970 --> 00:23:50,789
in the input.
在输入中。 

553
00:23:50,789 --> 00:23:56,289
The fourth element of the output is which letter?
输出的第四个元素是哪个字母？ 

554
00:23:56,289 --> 00:23:57,290
So which letter?
那是哪封信？ 

555
00:23:57,290 --> 00:24:00,059
AUDIENCE: Oh. [INAUDIBLE]
听众：哦。 [听不清] 

556
00:24:00,059 --> 00:24:03,214
PROFESSOR: And the fifth element of the output is which letter?
教授：输出的第五个元素是哪个字母？ 

557
00:24:03,214 --> 00:24:06,971



558
00:24:06,971 --> 00:24:10,740
AUDIENCE: Did you mean to get c instead of a?
听众：您是要得到c而不是a吗？ 

559
00:24:10,740 --> 00:24:11,240
No.
没有。 

560
00:24:11,240 --> 00:24:12,263
PROFESSOR: Yeah.
教授：是的。 

561
00:24:12,263 --> 00:24:13,929
That would make more sense, wouldn't it?
那会更有意义，不是吗？ 

562
00:24:13,930 --> 00:24:15,799
Thank you.
谢谢。 

563
00:24:15,799 --> 00:24:16,299
OK.
好。 

564
00:24:16,299 --> 00:24:20,839
So if this is permutation pi, then this
所以如果这是排列pi 

565
00:24:20,839 --> 00:24:24,559
is the effect of applying pi to this original list.
将pi应用于此原始列表的效果。 

566
00:24:24,559 --> 00:24:28,980
Now the inverse of a permutation by minus 1
现在减去-1的排列的逆

567
00:24:28,980 --> 00:24:32,669
is another bunch of arrows, and what I want to do
是另一束箭，我想做什么

568
00:24:32,869 --> 00:24:36,343
is, if I take this, which is the output of pi,
是，如果我将其作为pi的输出， 

569
00:24:36,344 --> 00:24:37,759
and I run it through these arrows,
然后我通过这些箭头

570
00:24:37,759 --> 00:24:41,809
I want to get back a b c d e.
我想找回abcd e。 

571
00:24:41,809 --> 00:24:44,829
So I want to undo the effect of pi.
所以我想撤销pi的作用。 

572
00:24:44,829 --> 00:24:45,329
OK.
好。 

573
00:24:45,329 --> 00:24:46,699
How do I compute this inverse?
如何计算此逆？ 

574
00:24:46,700 --> 00:24:48,419
How do I compute pi minus 1 given pi?
如何计算给定的pi减去1？ 

575
00:24:48,619 --> 00:24:58,500



576
00:24:58,500 --> 00:25:00,759
AUDIENCE: Wait, you're giving us the initial,
听众：等等，您是给我们提供初始的， 

577
00:25:00,759 --> 00:25:03,640
when we start with c d a e b?
什么时候开始使用cdaeb？ 

578
00:25:03,640 --> 00:25:05,140
PROFESSOR: You only start with this.
教授：您只能从此开始。 

579
00:25:05,140 --> 00:25:07,220
This doesn't matter at all.
没关系。 

580
00:25:07,220 --> 00:25:09,339
A different list would get different results.
不同的列表将得到不同的结果。 

581
00:25:09,339 --> 00:25:14,919
So this is the permutation, and I want pi to the minus 1.
所以这是排列，我希望pi为负1。 

582
00:25:14,920 --> 00:25:20,890
AUDIENCE: So you take the value.
听众：所以您认为有价值。 

583
00:25:20,890 --> 00:25:23,150
So you have 3 4 1 5 2.
所以你有3 4 1 5 2 

584
00:25:23,150 --> 00:25:28,920
So the value at index 1 you put that index,
因此，将索引1的值放在该索引上， 

585
00:25:28,920 --> 00:25:35,390
that index has a value of index 3, et cetera.
该索引的值为3，等等。 

586
00:25:35,390 --> 00:25:37,379
AUDIENCE: So c would go to position 1?
听众：那么c会转到位置1？ 

587
00:25:37,579 --> 00:25:39,821
AUDIENCE: Wait.
听众：等等。 

588
00:25:39,821 --> 00:25:41,041
PROFESSOR: OK.
教授：好的。 

589
00:25:41,041 --> 00:25:42,750
AUDIENCE: Is it true that you can run pi,
听众：您可以运行pi吗， 

590
00:25:42,750 --> 00:25:49,029
so the number of times it will eventually equal pi inverse?
那么它最终等于pi逆的次数是多少？ 

591
00:25:49,029 --> 00:25:52,271
PROFESSOR: Yes, but that's complicated algebra
教授：是的，但是那是复杂的代数

592
00:25:52,271 --> 00:25:53,116
to prove that.
证明这一点。 

593
00:25:53,116 --> 00:25:54,200
AUDIENCE: Not forget that.
听众：别忘了。 

594
00:25:54,200 --> 00:25:57,092



595
00:25:57,092 --> 00:26:00,650
Just like make that [INAUDIBLE] thing that you made
就像使您所做的[音频不清晰] 

596
00:26:00,650 --> 00:26:02,130
and sort of flip it.
并进行翻转。 

597
00:26:02,130 --> 00:26:03,000
PROFESSOR: OK.
教授：好的。 

598
00:26:03,000 --> 00:26:04,640
I like that.
我喜欢。 

599
00:26:04,640 --> 00:26:12,148
So 34152, 1 2 3 4 5.
所以34152，1 2 3 4 5。 

600
00:26:12,348 --> 00:26:13,889
Except this doesn't look very pretty,
除非看起来不太漂亮， 

601
00:26:13,890 --> 00:26:15,188
so I need to sort them again, right?
所以我需要再次对它们进行排序，对吗？ 

602
00:26:15,388 --> 00:26:22,349
So 1 3, 2 5, 3 1, 4 2, 5 4.
所以1 3，2 5，3 1，4 2，5 4。 

603
00:26:22,349 --> 00:26:24,870



604
00:26:24,871 --> 00:26:25,169
Right?
对？ 

605
00:26:25,369 --> 00:26:28,079
Did you guys come up with it now?
你们现在想出来了吗？ 

606
00:26:28,079 --> 00:26:29,990
Congrats.
恭喜。 

607
00:26:29,990 --> 00:26:30,740
So this is good.
所以这很好。 

608
00:26:30,740 --> 00:26:32,198
This is how you compute an inverse.
这就是您计算逆的方式。 

609
00:26:32,198 --> 00:26:34,640
Let's figure out why you compute an inverse that way.
让我们弄清楚为什么以这种方式计算逆。 

610
00:26:34,640 --> 00:26:36,200
Let's look at b.
让我们看一下b。 

611
00:26:36,200 --> 00:26:40,730
So b starts out at position 2, right?
那么b从第2位开始吧？ 

612
00:26:40,730 --> 00:26:52,029
And then pi of 5 equals 2, which means that, after applying 5,
然后pi等于5等于2，这意味着应用5之后， 

613
00:26:52,029 --> 00:26:55,500
b is going to go to position 5.
 b将转到位置5。 

614
00:26:55,500 --> 00:27:00,220
So pi inverse has to take b and put it where?
所以pi逆必须取b并将其放在哪里？ 

615
00:27:00,220 --> 00:27:01,059
Back to 2, right?
回到2，对不对？ 

616
00:27:01,059 --> 00:27:04,159
Otherwise it's not a good inverse.
否则，它不是一个很好的逆。 

617
00:27:04,160 --> 00:27:08,659
So pi inverse of 2.
因此pi为2的倒数。 

618
00:27:08,859 --> 00:27:10,409
So the second element in the output
所以输出中的第二个元素

619
00:27:10,410 --> 00:27:12,374
has to be which element in the input?
必须是输入中的哪个元素？ 

620
00:27:12,374 --> 00:27:15,159



621
00:27:15,359 --> 00:27:17,159
5, right?
 5，对吗？ 

622
00:27:17,160 --> 00:27:19,639
Otherwise, this wouldn't undo the effect of pi.
否则，这不会消除pi的影响。 

623
00:27:19,839 --> 00:27:24,549



624
00:27:24,549 --> 00:27:28,139
So if you write out our permutation and split
因此，如果您写出我们的排列和分割

625
00:27:28,140 --> 00:27:31,586
the index and the value, we get the inverse permutation.
索引和值，我们得到逆排列。 

626
00:27:31,586 --> 00:27:34,170
So you can compute that with a couple of lines of Python code.
因此，您可以使用几行Python代码进行计算。 

627
00:27:34,170 --> 00:27:36,769



628
00:27:36,769 --> 00:27:37,269
OK.
好。 

629
00:27:37,269 --> 00:27:41,240
So this lets us now compute some of the permutations there.
因此，这使我们现在可以计算那里的一些排列。 

630
00:27:41,240 --> 00:27:43,460
So we only have to type up two, three, four,
所以我们只需要输入2、3、4， 

631
00:27:43,460 --> 00:27:44,892
or something like that.
或类似的东西。 

632
00:27:44,892 --> 00:27:46,149
It's a bit nicer and you guys don't
更好一点，你们不要

633
00:27:46,349 --> 00:27:48,679
have to type up any, because we gave them to you.
必须输入任何内容，因为我们已将它们提供给您。 

634
00:27:48,680 --> 00:27:51,200
Aren't we nice?
我们不是很好吗？ 

635
00:27:51,200 --> 00:27:51,700
All right.
好吧。 

636
00:27:51,700 --> 00:27:53,582
Any questions about permutations or Rubik's cubes?
对排列或魔方有任何疑问吗？ 

637
00:27:53,782 --> 00:27:56,789



638
00:27:56,789 --> 00:27:58,619
AUDIENCE: Wait, so to get high inverse
听众：等等，所以要得到高反比

639
00:27:58,619 --> 00:28:02,311
based off those numbers, you just-- well,
根据这些数字，您- 

640
00:28:02,311 --> 00:28:03,909
it's the same thing.
这是同一件事。 

641
00:28:03,910 --> 00:28:06,119
Wait, but 5 got flipped.
等待，但是5被翻转了。 

642
00:28:06,319 --> 00:28:09,429
Or you think the maybe if the inverse of that matrix then?
还是您认为该矩阵的倒数呢？ 

643
00:28:09,430 --> 00:28:12,259
PROFESSOR: So you take these two and you flip them, right?
教授：那么，您把这两个拿倒，就对了吗？ 

644
00:28:12,259 --> 00:28:13,175
AUDIENCE: [INAUDIBLE].
听众：[听不清]。 

645
00:28:13,175 --> 00:28:16,139



646
00:28:16,140 --> 00:28:19,329
PROFESSOR: And then you keep these bound, but you sort them.
教授：然后，您将它们绑定，但将它们排序。 

647
00:28:19,529 --> 00:28:22,700



648
00:28:22,700 --> 00:28:28,477
2 5, 3 1, 4, no-- 3 5 1 2 4.
 2 5、3 1、4，否-3 5 1 2 4。 

649
00:28:28,477 --> 00:28:30,518
AUDIENCE: Oh they're still based off the top row?
听众：哦，他们仍然排在第一位吗？ 

650
00:28:30,518 --> 00:28:31,277
AUDIENCE: Yeah.
听众：是的。 

651
00:28:31,277 --> 00:28:31,784
AUDIENCE: Oh, OK.
听众：哦，好。 

652
00:28:31,984 --> 00:28:34,076
AUDIENCE: Wait, how did he get the second one?
听众：等等，他是怎么得到第二个的？ 

653
00:28:34,076 --> 00:28:35,410
AUDIENCE: Based off the top row.
听众：基于第一行。 

654
00:28:35,410 --> 00:28:38,889
PROFESSOR: So you sort this one, but you keep the bonds,
教授：因此，您可以对此进行排序，但是您可以保持联系， 

655
00:28:39,089 --> 00:28:42,779
so 3 ends up here and it gives it 1, 4 ends up here
所以3结束于此处，它得到1，1，4结束于此处

656
00:28:42,779 --> 00:28:45,599
and it gives us 2.
它给了我们2。 

657
00:28:45,599 --> 00:28:46,359
OK.
好。 

658
00:28:46,359 --> 00:28:49,369
So this make sense?
所以这有意义吗？ 

659
00:28:49,369 --> 00:28:49,869
Good.
好。 

660
00:28:49,869 --> 00:28:51,589
We're remembering that, that's good.
我们记得这一点，这很好。 

661
00:28:51,589 --> 00:28:52,889
Now let's talk about a problem.
现在让我们谈一个问题。 

662
00:28:52,890 --> 00:28:54,890
So this is a Rubik's cube, this is how it works.
这就是魔方，这就是它的工作原理。 

663
00:28:54,890 --> 00:28:57,750
Hopefully we will remember how to solve game.
希望我们会记住如何解决游戏。 

664
00:28:57,750 --> 00:29:05,130
Let's try to solve StarCraft Well,
让我们尝试解决《星际争霸》， 

665
00:29:05,130 --> 00:29:06,526
of course we're going to cheat.
当然，我们要作弊。 

666
00:29:06,526 --> 00:29:08,650
We're going to solve a simpler version of StarCraft
我们将解决一个更简单的《星际争霸》版本

667
00:29:08,650 --> 00:29:11,210
because it turns out you can't really solve StarCraft
因为事实证明您无法真正解决《星际争霸》 

668
00:29:11,210 --> 00:29:14,950
with the computers that we have now.
与我们现在拥有的计算机。 

669
00:29:14,950 --> 00:29:17,470
So let's make a few simplifying assumptions.
因此，让我们做一些简化的假设。 

670
00:29:17,470 --> 00:29:20,980
Who play StarCraft, by the way?
顺便说一下，谁在玩《星际争霸》？ 

671
00:29:20,980 --> 00:29:21,579
Two?
二？ 

672
00:29:21,579 --> 00:29:22,079
OK.
好。 

673
00:29:22,079 --> 00:29:23,817
So you guys, please pay attention
所以你们请注意

674
00:29:23,817 --> 00:29:25,650
to the simplifying assumptions, because this
简化的假设，因为

675
00:29:25,650 --> 00:29:26,990
isn't real StarCraft.
不是真正的《星际争霸》。 

676
00:29:26,990 --> 00:29:31,829
It's a lot easier, so that we can build a problem out of it.
这要容易得多，因此我们可以从中解决问题。 

677
00:29:31,829 --> 00:29:32,329
All right.
好吧。 

678
00:29:32,329 --> 00:29:38,069
So we're going to play with a race called Zerg.
因此，我们将参加一场名为Zerg的比赛。 

679
00:29:38,069 --> 00:29:44,230
And so the idea of StarCraft is you build an army
因此，《星际争霸》的构想就是你组建一支军队

680
00:29:44,230 --> 00:29:45,819
and then you take this army and you
然后你带着这支军队，你

681
00:29:45,819 --> 00:29:48,139
destroy your opponent, nice and simple.
消灭对手，好而简单。 

682
00:29:48,140 --> 00:29:50,659
Good old violent games.
好老的暴力游戏。 

683
00:29:50,859 --> 00:29:54,240
So we're going to look at the build order part of the game.
因此，我们将研究游戏的构建顺序部分。 

684
00:29:54,240 --> 00:29:56,839
So the build order is the opening strategy and it takes
因此，构建顺序是开放策略，它需要

685
00:29:56,839 --> 00:30:00,829
care of the building process, so it's the strategy that says,
关心构建过程，因此策略就是这样， 

686
00:30:00,829 --> 00:30:02,819
what are you going to build and when,
您打算建造什么，何时建造， 

687
00:30:02,819 --> 00:30:05,759
in order to come up with an army as quickly as possible?
为了尽快出兵？ 

688
00:30:05,759 --> 00:30:08,970
So the main goal is to amass an army quickly and then take
所以主要目标是迅速集结一支军队，然后采取

689
00:30:08,970 --> 00:30:10,731
that army and destroy the opponent.
那支军队消灭了对手。 

690
00:30:10,731 --> 00:30:12,440
And yes, I know, not real life StarCraft,
是的，我知道，不是现实生活中的《星际争霸》， 

691
00:30:12,440 --> 00:30:13,779
but let's go with it.
但是，让我们继续吧。 

692
00:30:13,779 --> 00:30:18,879



693
00:30:18,880 --> 00:30:21,660
OK, so these are the rules in our toy StarCraft
好，这些是我们《玩具星际争霸》中的规则

694
00:30:21,660 --> 00:30:26,690
And the Zerg is started with a building called the hatchery.
虫族始于一栋名为孵化场的建筑。 

695
00:30:26,690 --> 00:30:29,809
And out of a hatchery-- the currency of the game,
在孵化场之外-游戏的货币， 

696
00:30:29,809 --> 00:30:31,169
by the way, is minerals.
顺便说一下，是矿物质。 

697
00:30:31,170 --> 00:30:33,509
We'll write that down as dollars.
我们将其记为美元。 

698
00:30:33,509 --> 00:30:38,039
So out of a hatchery you can build a drone
因此，在孵化场之外，您可以建造无人机

699
00:30:38,039 --> 00:30:40,399
by spending 50 minerals.
花费了50种矿物质

700
00:30:40,400 --> 00:30:44,759
You can build an overlord by spending 100,
您可以花费100来建立一个霸主， 

701
00:30:44,759 --> 00:30:49,970
or you can build a Zergling by spending 50.
或者您可以花费50来打造一只Zergling。 

702
00:30:49,970 --> 00:30:51,940
All right, what do each of these do?
好吧，这些分别做什么？ 

703
00:30:51,940 --> 00:30:55,180
A drone harvests minerals for you, so it's a worker.
无人机为您收获矿物质，所以它是一名工人。 

704
00:30:55,180 --> 00:30:59,049
So, for every drone that you have,
因此，对于您拥有的每架无人机， 

705
00:30:59,049 --> 00:31:00,500
you get eight minerals a second.
你每秒得到八种矿物质。 

706
00:31:00,500 --> 00:31:03,220



707
00:31:03,220 --> 00:31:05,899
So drone gets you eight minerals a second.
因此，无人机每秒可以为您提供八种矿物质。 

708
00:31:06,099 --> 00:31:08,059
As Zergling is your attack unit, so this
由于虫族是您的攻击单位，因此

709
00:31:08,059 --> 00:31:10,129
is the guy that you want to build in the end.
到底是你想建立的那个人。 

710
00:31:10,130 --> 00:31:12,399
So this destroys your opponents.
因此，这会摧毁您的对手。 

711
00:31:12,599 --> 00:31:16,019
I don't know how to make a nice icon for that, so big
我不知道该怎么做一个好图标

712
00:31:16,019 --> 00:31:17,539
smiley green.
笑脸绿色。 

713
00:31:17,539 --> 00:31:20,259
This makes it happy.
这让它高兴。 

714
00:31:20,259 --> 00:31:20,849
All right.
好吧。 

715
00:31:20,849 --> 00:31:22,679
Overlords help you control your units,
霸主可以帮助您控制自己的单位， 

716
00:31:22,680 --> 00:31:26,629
so drones and Zerglings are units.
因此，无人机和Zerglings是单位。 

717
00:31:26,829 --> 00:31:29,669
You can't build-- for every eight units that you build,
您无法建立-每建立八个单位， 

718
00:31:29,670 --> 00:31:31,129
you have to have an overlord.
你必须有一个霸主。 

719
00:31:31,329 --> 00:31:32,960
Otherwise, you can't build more units
否则，您将无法建造更多单位

720
00:31:32,960 --> 00:31:34,710
until you build overlords.
直到您建立霸主。 

721
00:31:34,710 --> 00:31:38,000
So if you have eight drones, you can't build a ninth on one
因此，如果您有八架无人驾驶飞机，那么您就无法在其中一架上建立第九架

722
00:31:38,000 --> 00:31:38,950
you build an overlord.
你建立一个霸主。 

723
00:31:38,950 --> 00:31:41,299
If you have eight drones and these eight Zerglings,
如果您有八架无人机和这八只幼虫， 

724
00:31:41,299 --> 00:31:43,019
you have to build a second overlord
你必须建立第二个霸主

725
00:31:43,019 --> 00:31:45,839
to be able to build more units.
能够建造更多的单位。 

726
00:31:45,839 --> 00:31:49,224
So one overlord can help you control eight units.
因此，一位霸主可以帮助您控制八个单位。 

727
00:31:49,224 --> 00:31:52,129



728
00:31:52,130 --> 00:31:53,900
In order to build a Zergling, which
为了建立一只Zergling， 

729
00:31:53,900 --> 00:31:55,316
is what you want to do in the end,
到底是你想做的

730
00:31:55,316 --> 00:31:57,930
because these are the attack units, you need to spend $50,
因为这些是攻击单元，您需要花费50美元， 

731
00:31:57,930 --> 00:32:00,279
and you also need to have one building called
而且您还需要有一栋名为

732
00:32:00,279 --> 00:32:01,089
a spawning pool.
产卵池。 

733
00:32:01,089 --> 00:32:05,069



734
00:32:05,069 --> 00:32:07,250
You what?
你什么？ 

735
00:32:07,250 --> 00:32:07,799
All right.
好吧。 

736
00:32:07,799 --> 00:32:09,960
So how do you build that spawning pool?
那么如何建立产卵池呢？ 

737
00:32:09,960 --> 00:32:12,390
Drones can work for you, but they can also
无人机可以为您服务，但他们也可以

738
00:32:12,390 --> 00:32:13,879
transform into buildings.
转变成建筑物。 

739
00:32:14,079 --> 00:32:16,749
So a drone mutates into a building, and after it mutates,
因此，无人驾驶飞机变异到建筑物中，然后变异， 

740
00:32:16,749 --> 00:32:19,039
it doesn't work for you anymore, by the way, so no more
顺便说一句，它不再对您有用

741
00:32:19,039 --> 00:32:20,500
minerals.
矿物质。 

742
00:32:20,500 --> 00:32:28,230
So a drone can mutate into the spawning pool for 200 minerals,
这样一架无人驾驶飞机可以变异进入产卵池，容纳200种矿物质， 

743
00:32:28,230 --> 00:32:29,230
I think.
我认为。 

744
00:32:29,230 --> 00:32:31,740
It can mutate into a hatchery.
它可以变异为孵化场。 

745
00:32:31,740 --> 00:32:35,589
That's the same thing that you have up here for,
这就是您要在这里做的事情， 

746
00:32:35,589 --> 00:32:37,230
how much is it?
多少钱？ 

747
00:32:37,230 --> 00:32:40,339
$450.
 $ 450。 

748
00:32:40,339 --> 00:32:43,589
And it can mutate into an evolution chamber
它可以变异为进化室

749
00:32:43,589 --> 00:32:51,029
that we'll talk about soon, for $400.
我们将很快讨论，价格为400美元。 

750
00:32:51,029 --> 00:32:51,529
OK.
好。 

751
00:32:51,529 --> 00:32:54,359
Why do we care about having more than one hatchery?
我们为什么要考虑拥有多个孵化场？ 

752
00:32:54,359 --> 00:32:57,649
One hatchery can build one unit per second, no more than that.
一个孵化场每秒可以建造一个单位，仅此而已。 

753
00:32:57,650 --> 00:33:00,689



754
00:33:00,689 --> 00:33:02,480
So once you have a lot of drones and you're
所以一旦你有很多无人机，你就

755
00:33:02,480 --> 00:33:05,220
making a lot of money, you need to have a lot of hatcheries
赚很多钱，你需要有很多孵化场

756
00:33:05,220 --> 00:33:07,180
so that you can spend the money.
这样您就可以花钱了。 

757
00:33:07,180 --> 00:33:09,670
Our goal is not to amass money, it's to build units, right?
我们的目标不是积累资金，而是建立单位，对吧？ 

758
00:33:09,670 --> 00:33:10,803
So money doesn't help you, I'm going
所以钱对你没有帮助，我要

759
00:33:11,003 --> 00:33:12,336
to spend it as fast as possible.
尽快花费。 

760
00:33:12,336 --> 00:33:15,140



761
00:33:15,140 --> 00:33:16,099
OK.
好。 

762
00:33:16,299 --> 00:33:19,125
An evolution chamber lets you build-- let's
进化室让您建立-让我们

763
00:33:19,125 --> 00:33:20,849
you upgrade research to technologies.
您将研究升级为技术。 

764
00:33:20,849 --> 00:33:22,599
And these technologies aren't like badges.
这些技术不像徽章。 

765
00:33:22,599 --> 00:33:26,419
Once you get them, you keep them.
一旦获得它们，就保留它们。 

766
00:33:26,420 --> 00:33:28,630
So you can research an attack upgrade
这样您就可以研究攻击升级

767
00:33:28,630 --> 00:33:33,359
and you can research a defense upgrade.
您可以研究防御升级。 

768
00:33:33,559 --> 00:33:38,029
They're both 1,000 minerals, but you only have to do it once.
它们都是1,000种矿物质，但您只需要做一次。 

769
00:33:38,029 --> 00:33:40,039
Why do I care about these?
我为什么要关心这些？ 

770
00:33:40,039 --> 00:33:43,339
They decide how strong your Zerglings are.
他们决定您的幼虫有多强壮。 

771
00:33:43,339 --> 00:33:47,869
So, given a Zergling, at the beginning of the game,
因此，在游戏开始时，如果给一只幼虫， 

772
00:33:47,869 --> 00:33:50,669
you don't have the attack upgrade,
您没有攻击升级， 

773
00:33:50,670 --> 00:33:52,759
and you don't have a defense upgrade.
而且您没有防御升级。 

774
00:33:52,759 --> 00:33:55,150
So the Zerglings attack is 1.
因此，幼虫攻击为1。 

775
00:33:55,150 --> 00:33:57,159
If you research the attack upgrade,
如果您研究攻击升级， 

776
00:33:57,359 --> 00:33:59,579
but you haven't researched the defense one,
但是您还没有研究过防御

777
00:33:59,579 --> 00:34:02,529
their total power is 133.
他们的总力量是133。 

778
00:34:02,529 --> 00:34:05,009
If you research the defense upgrade, but not the attack
如果您研究防御升级，而不是攻击

779
00:34:05,009 --> 00:34:07,670
upgrade, their total power is 1.2.
升级，它们的总功率为1.2。 

780
00:34:07,670 --> 00:34:11,750
And after your research both of them, their total power is 2.
经过两个人的研究，它们的总强度为2。 

781
00:34:11,750 --> 00:34:13,730
Again, oversimplifying.
再次，过于简化。 

782
00:34:13,730 --> 00:34:17,480
So, we have to build an army that's as powerful as possible.
因此，我们必须建立一支尽可能强大的军队。 

783
00:34:17,480 --> 00:34:21,369
So in the end you want to have both of these researched.
因此，最终您需要对这两项进行研究。 

784
00:34:21,369 --> 00:34:21,869
All right.
好吧。 

785
00:34:21,869 --> 00:34:24,079
Now there's one more limitation, that is,
现在还有一个限制，那就是

786
00:34:24,079 --> 00:34:27,279
you cannot control more than 200 of these units total,
您总共不能控制200个以上的单元， 

787
00:34:27,280 --> 00:34:29,130
because even if you have a lot of overlords,
因为即使你有很多霸主， 

788
00:34:29,130 --> 00:34:33,099
your brain isn't immensely huge, so you can only control 200
你的大脑不是很大，所以你只能控制2​​00 

789
00:34:33,099 --> 00:34:34,199
units.
单位。 

790
00:34:34,199 --> 00:34:40,489
So we want to build these 200 units as fast as possible.
因此，我们希望尽快构建这200个单元。 

791
00:34:40,489 --> 00:34:44,699
And out of these 200 units, we want
在这200个单位中，我们要

792
00:34:44,699 --> 00:34:49,329
to have at least 150 Zerglings.
至少有150只幼虫。 

793
00:34:49,329 --> 00:34:50,793
If you build 200 drones, you're not
如果您建造200架无人机， 

794
00:34:50,793 --> 00:34:52,460
going to attack your opponent with that,
以此来攻击你的对手， 

795
00:34:52,460 --> 00:34:54,650
those aren't very useful.
这些不是很有用。 

796
00:34:54,650 --> 00:34:56,650
But you need some drones in order to make money,
但是你需要一些无人机才能赚钱， 

797
00:34:56,650 --> 00:34:58,280
so you need the balance.
所以你需要平衡。 

798
00:34:58,280 --> 00:35:02,170
So the goal is to get to 200 units as quickly as possible,
因此，目标是尽快达到200个单位， 

799
00:35:02,170 --> 00:35:03,532
and at least 150 Zergs.
至少150虫。 

800
00:35:03,532 --> 00:35:05,960



801
00:35:06,159 --> 00:35:07,960
Yes?
是？ 

802
00:35:07,960 --> 00:35:10,559
Evolution chamber.
进化室。 

803
00:35:10,559 --> 00:35:13,811
Easy, that's too much.
很简单，太多了。 

804
00:35:13,811 --> 00:35:14,309
OK.
好。 

805
00:35:14,309 --> 00:35:15,623
So how do we solve this?
那么我们该如何解决呢？ 

806
00:35:15,623 --> 00:35:18,500



807
00:35:18,500 --> 00:35:19,416
AUDIENCE: [INAUDIBLE].
听众：[听不清]。 

808
00:35:19,416 --> 00:35:23,480



809
00:35:23,679 --> 00:35:26,829
PROFESSOR: So how do we solve this?
教授：那我们该如何解决呢？ 

810
00:35:26,829 --> 00:35:29,063
AUDIENCE: Watch the pros play.
观众：观看专业人士的比赛。 

811
00:35:29,063 --> 00:35:31,480
PROFESSOR: Well, they're going to play real StarCraft this
教授：好吧，他们将扮演真正的《星际争霸》 

812
00:35:31,480 --> 00:35:34,621
is toy StarCraft this is six-level 6 StarCraft so it's
是玩具星际争霸这是6级6星际争霸，所以它是

813
00:35:34,621 --> 00:35:37,319
not going to work.
不上班。 

814
00:35:37,320 --> 00:35:39,030
But there is a simple strategy, because I
但是有一个简单的策略，因为我

815
00:35:39,030 --> 00:35:42,688
haven't added one last constraint.
尚未添加最后一个约束。 

816
00:35:42,688 --> 00:35:44,500
AUDIENCE: Lets me guess.
听众：让我猜。 

817
00:35:44,699 --> 00:35:45,309
PROFESSOR: No.
教授：不。 

818
00:35:45,309 --> 00:35:48,340
It's going to be harassing your enemy.
这会骚扰你的敌人。 

819
00:35:48,340 --> 00:35:50,590
But if you don't have to harass your enemy intuitively
但是如果您不必直观地骚扰敌人

820
00:35:50,590 --> 00:35:52,900
and build your economy first, so first
首先建立您的经济

821
00:35:53,099 --> 00:35:54,949
build your drones and hatcheries,
建立您的无人机和孵化场， 

822
00:35:54,949 --> 00:35:57,221
and then pop out Zerglings, right?
然后弹出幼虫，对吗？ 

823
00:35:57,222 --> 00:35:58,230
So there's a greedy strategy.
因此，有一个贪婪的策略。 

824
00:35:58,429 --> 00:36:00,449
If you spend about an hour with a sheet of paper,
如果您用一张纸花一个小时左右， 

825
00:36:00,449 --> 00:36:02,073
you can realize what is the right order
你可以意识到什么是正确的顺序

826
00:36:02,074 --> 00:36:05,510
to build drones and hatcheries and overlords,
建造无人机，孵化场和霸主， 

827
00:36:05,510 --> 00:36:08,480
so that you get to a nice big economy, and then, Bam!
这样您就可以拥有一个不错的大经济体，然后Bam！ 

828
00:36:08,679 --> 00:36:10,943
Build Zerglings.
建造幼虫。 

829
00:36:10,943 --> 00:36:13,110
Once you get to 50 drones, you start build Zerglings
一旦达到50架无人机，就可以开始建造Zerglings 

830
00:36:13,110 --> 00:36:14,130
as fast as possible.
尽可能快。 

831
00:36:14,130 --> 00:36:16,670



832
00:36:16,670 --> 00:36:19,539
So this is a greedy strategy, you
所以这是一个贪婪的策略

833
00:36:19,539 --> 00:36:21,250
don't need to do a lot of work for that.
不需要为此做很多工作。 

834
00:36:21,250 --> 00:36:23,041
So we want to make things more interesting.
因此，我们希望使事情变得更有趣。 

835
00:36:23,041 --> 00:36:25,250
So in order to make things more interesting,
因此，为了使事情变得更有趣， 

836
00:36:25,449 --> 00:36:26,779
the game time goes in seconds.
游戏时间以秒为单位。 

837
00:36:26,780 --> 00:36:28,820
Everything that we had here is in seconds.
我们在这里拥有的一切都在几秒钟内。 

838
00:36:28,820 --> 00:36:36,664
Every two minutes, so two minutes, which is 120 seconds.
每两分钟，即两分钟，即120秒。 

839
00:36:36,864 --> 00:36:38,489
So every two minutes I want to assemble
所以每两分钟我要组装一次

840
00:36:38,489 --> 00:36:41,569
a small pack of Zerglings and send them
一小袋幼虫并将其发送

841
00:36:41,570 --> 00:36:42,960
to the enemy to harass them.
对敌人进行骚扰。 

842
00:36:43,159 --> 00:36:45,139
And the Antonio enemy will defend themselves
安东尼奥的敌人会保卫自己

843
00:36:45,139 --> 00:36:46,690
and they will destroy my Zerglings,
他们会摧毁我的幼虫， 

844
00:36:46,690 --> 00:36:49,360
but they won't be able to focus on the game very well.
但他们将无法很好地专注于游戏。 

845
00:36:49,360 --> 00:36:52,320
So I need to do this in order to have a good chance to win.
所以我需要这样做，以便有一个很好的获胜机会。 

846
00:36:52,320 --> 00:36:54,289
If I don't do this, my strategy is invalid.
如果我不这样做，则我的策略无效。 

847
00:36:54,289 --> 00:36:57,070
AUDIENCE: Does the enemy, does it do that to us as well?
听众：敌人是否也对我们这样做？ 

848
00:36:57,070 --> 00:36:58,119
PROFESSOR: No.
教授：不。 

849
00:36:58,119 --> 00:36:58,960
We're sending them facts.
我们正在向他们发送事实。 

850
00:36:59,159 --> 00:37:01,230
We are going to have a really fast strategy, because we're
我们将有一个非常快速的策略，因为我们

851
00:37:01,230 --> 00:37:03,449
computing the optimal strategy, so they're not
计算最佳策略，所以他们没有

852
00:37:03,449 --> 00:37:04,409
going to have time.
要有时间。 

853
00:37:04,409 --> 00:37:06,839
They're going to be fighting us off.
他们将与我们抗争。 

854
00:37:06,840 --> 00:37:09,329
OK, how many Zerglings do I send?
好，我要寄几只幼虫？ 

855
00:37:09,329 --> 00:37:12,170
I have to send enough Zerglings so that the attack
我必须派出足够的幼虫，以便攻击

856
00:37:12,170 --> 00:37:19,197
power at minutes 2m is 6 times log 1 plus m.
 2m分钟的功率是log 1 plus m的6倍。 

857
00:37:19,197 --> 00:37:21,030
You knew there has to be some mapping there.
您知道那里必须有一些映射。 

858
00:37:21,030 --> 00:37:23,719



859
00:37:23,719 --> 00:37:27,079
So the reason for this is, let's look at the first two minutes.
因此，原因是，让我们看一下前两分钟。 

860
00:37:27,079 --> 00:37:30,049
After two minutes, if we haven't researched any upgrades,
两分钟后，如果我们还没有研究任何升级， 

861
00:37:30,050 --> 00:37:32,500
we need to send this in six Zerglings.
我们需要在六个幼虫中寄出。 

862
00:37:32,500 --> 00:37:34,800
If we researched both upgrades, we only
如果我们研究了两个升级，我们只会

863
00:37:34,800 --> 00:37:37,179
need to send in three Zerglings.
需要发送三个幼虫。 

864
00:37:37,378 --> 00:37:38,920
If we researched one of the upgrades,
如果我们研究了其中一种升级， 

865
00:37:38,920 --> 00:37:41,039
we need to send in five Zerglings.
我们需要寄出五个幼虫。 

866
00:37:41,239 --> 00:37:42,910
So this is the total attack power,
这就是总的攻击力

867
00:37:42,911 --> 00:37:45,159
not the numbers are of Zerglings that we need to send.
而不是我们需要发送的幼虫的数量。 

868
00:37:45,159 --> 00:37:50,480



869
00:37:50,480 --> 00:37:53,630
AUDIENCE: And is minutes?
听众：是分钟吗？ 

870
00:37:53,630 --> 00:37:55,110
PROFESSOR: Actually, it's basically
教授：其实，基本上

871
00:37:55,110 --> 00:37:59,809
which attack wave you're doing, so every two minutes.
您正在执行哪个攻击波，因此每两分钟一次。 

872
00:37:59,809 --> 00:38:00,599
AUDIENCE: Oh, OK.
听众：哦，好。 

873
00:38:00,599 --> 00:38:03,059
So the first one is m equals zero.
所以第一个是m等于零。 

874
00:38:03,059 --> 00:38:05,063
PROFESSOR: And 1.
教授：还有1。 

875
00:38:05,063 --> 00:38:07,230
That is not the one attacking right in the beginning
那不是一开始就进攻的权利

876
00:38:07,230 --> 00:38:08,764
when we don't have Zerglings.
当我们没有幼虫时。 

877
00:38:08,764 --> 00:38:09,480
AUDIENCE: [INAUDIBLE].
听众：[听不清]。 

878
00:38:09,679 --> 00:38:12,309
PROFESSOR: Equals 1, n equals 2, n equals 3, so on and so forth.
教授：等于1，n等于2，n等于3，依此类推。 

879
00:38:12,309 --> 00:38:13,934
AUDIENCE: How did you get that formula?
听众：你是怎么得到这个公式的？ 

880
00:38:13,934 --> 00:38:16,978



881
00:38:16,978 --> 00:38:18,175
OK.
好。 

882
00:38:18,175 --> 00:38:19,799
PROFESSOR: Is it making your life hard?
教授：这使您的生活艰难吗？ 

883
00:38:19,800 --> 00:38:23,233
Would that be logged base 2, or is that log base 10?
是以2为基础记录还是以10为基础记录？ 

884
00:38:23,233 --> 00:38:24,199
PROFESSOR: Sure, log base 2.
教授：好的，以2为底的对数。 

885
00:38:24,398 --> 00:38:31,203



886
00:38:31,204 --> 00:38:31,704
Fine.
精细。 

887
00:38:31,704 --> 00:38:36,856



888
00:38:36,856 --> 00:38:38,440
OK, so how are we going to solve this?
好，那我们该如何解决呢？ 

889
00:38:38,440 --> 00:38:40,460
Intuitively, how did we solve all the game
直观地讲，我们如何解决所有游戏

890
00:38:40,460 --> 00:38:44,659
problems, all the problems recently?
问题，最近所有问题？ 

891
00:38:44,659 --> 00:38:46,000
What are we going to do?
我们会做什么？ 

892
00:38:46,000 --> 00:38:47,981
AUDIENCE: [INAUDIBLE].
听众：[听不清]。 

893
00:38:47,981 --> 00:38:49,440
PROFESSOR: So the first thing we're
教授：所以我们第一件事

894
00:38:49,440 --> 00:38:50,992
going to build a graph, right?
要建立一个图形，对不对？ 

895
00:38:50,992 --> 00:38:51,880
AUDIENCE: Yeah.
听众：是的。 

896
00:38:51,880 --> 00:38:52,846
PROFESSOR: So build a graph.
教授：因此，建立一个图表。 

897
00:38:53,045 --> 00:38:55,889



898
00:38:55,889 --> 00:38:58,239
The vertices are the states of the game,
顶点是游戏的状态， 

899
00:38:58,239 --> 00:39:00,699
so a vertex shows me what state I'm in
所以一个顶点告诉我我处于什么状态

900
00:39:00,699 --> 00:39:05,929
and an edge shows possible moves that I do.
边缘显示了我可能执行的操作。 

901
00:39:05,929 --> 00:39:09,791
So what I need to keep track in the vertex, what's my state?
所以我需要在顶点处跟踪，我的状态是什么？ 

902
00:39:09,791 --> 00:39:12,648
AUDIENCE: How much money you have, and how many units
听众：您有多少钱，有多少单位

903
00:39:12,648 --> 00:39:14,552
you have?
你有？ 

904
00:39:14,552 --> 00:39:16,731
And maybe how fast you're making money?
也许您赚钱有多快？ 

905
00:39:16,931 --> 00:39:18,869
AUDIENCE: Oh, unless the states, are
听众：哦，除非有州，否则

906
00:39:18,869 --> 00:39:21,273
states-- they're not movable?
状态-它们不动吗？ 

907
00:39:21,273 --> 00:39:23,440
Oh, I guess they could be moveable [INAUDIBLE] could
哦，我想它们可能是可移动的[听不清] 

908
00:39:23,440 --> 00:39:25,251
do nothing, in the next second, right?
在下一秒什么都不做，对吧？ 

909
00:39:25,251 --> 00:39:27,710
PROFESSOR: So you're saying you need to keep track of time,
教授：所以您是说您需要跟踪时间， 

910
00:39:27,710 --> 00:39:28,474
too?
太？ 

911
00:39:28,474 --> 00:39:29,839
AUDIENCE: I don't know.
听众：我不知道。 

912
00:39:29,840 --> 00:39:30,900
PROFESSOR: OK so maybe time.
教授：好的，也许是时间。 

913
00:39:31,099 --> 00:39:33,920



914
00:39:33,920 --> 00:39:35,668
What else?
还有什么？ 

915
00:39:35,668 --> 00:39:36,920
AUDIENCE: Badge [INAUDIBLE] thing.
听众：徽章[听不清]。 

916
00:39:37,119 --> 00:39:39,115
PROFESSOR: OK so upgrades.
教授：好的，请升级。 

917
00:39:39,115 --> 00:39:42,103



918
00:39:42,103 --> 00:39:43,894
You said units, I'm going to say buildings.
您说的是单位，我要说的是建筑物。 

919
00:39:43,894 --> 00:39:47,380



920
00:39:47,380 --> 00:39:50,190
AUDIENCE: Wait, is Zergling is a building?
听众：等等，Zergling是建筑物吗？ 

921
00:39:50,190 --> 00:39:53,099
PROFESSOR: A Zergling is a unit, so-
教授：Zergling是一个单元，所以- 

922
00:39:53,099 --> 00:39:54,529
AUDIENCE: Overlords.
听众：霸主。 

923
00:39:54,530 --> 00:39:57,590
PROFESSOR: Unit, unit, unit.
教授：单位，单位，单位。 

924
00:39:57,590 --> 00:40:01,510
Building, building, building, upgrade, upgrade.
建筑，建筑，建筑，升级，升级。 

925
00:40:01,510 --> 00:40:04,032
So let's see how are we going to keep track of them.
因此，让我们看看如何跟踪它们。 

926
00:40:04,231 --> 00:40:05,065
That's a good point.
那是个很好的观点。 

927
00:40:05,065 --> 00:40:08,869
We started looking at units, we started looking at units.
我们开始查看单位，开始查看单位。 

928
00:40:08,869 --> 00:40:10,849
So how do I keep track of my units?
那我该如何追踪我的单位呢？ 

929
00:40:10,849 --> 00:40:13,179
What I need to know?
我需要知道什么？ 

930
00:40:13,179 --> 00:40:18,110
AUDIENCE: The number of drones, overlords, servlings.
听众：无人驾驶飞机，霸主和服务的数量。 

931
00:40:18,110 --> 00:40:21,539
PROFESSOR: Droids, drones, overlords, Zerglings.
教授：机器人，无人机，霸主，幼虫。 

932
00:40:21,739 --> 00:40:22,239
OK.
好。 

933
00:40:22,239 --> 00:40:23,072
How about buildings?
建筑物呢？ 

934
00:40:23,072 --> 00:40:26,417



935
00:40:26,418 --> 00:40:27,900
AUDIENCE: [INAUDIBLE] PHEC--
听众：[听不清] PHEC-- 

936
00:40:27,900 --> 00:40:29,179
PROFESSOR: Almost.
教授：差不多了。 

937
00:40:29,179 --> 00:40:30,769
So I want to know the number of hatcheries,
所以我想知道孵化场的数量， 

938
00:40:30,969 --> 00:40:33,279
because this is how fast I can produce.
因为这是我可以生产的速度。 

939
00:40:33,280 --> 00:40:37,681
But then how many spawning pools am I going to build?
但是我要建造多少个产卵池呢？ 

940
00:40:37,681 --> 00:40:38,179
Good.
好。 

941
00:40:38,179 --> 00:40:39,929
So that was StarCraft player 1.
那就是星际争霸1。 

942
00:40:39,929 --> 00:40:42,299
Once you have a spawning pool, you can build Zerglings,
有了产卵池后，就可以构建Zerglings， 

943
00:40:42,300 --> 00:40:44,260
there's no reason to build more than one.
没有理由建造不止一个。 

944
00:40:44,260 --> 00:40:46,217
So a spawning pool is going to be like a badge.
因此，产卵池将像徽章一样。 

945
00:40:46,416 --> 00:40:48,250
Once you build it, you have it, you're done.
一旦构建完成，就完成了。 

946
00:40:48,250 --> 00:40:49,976
So it's Boolean.
所以它是布尔值。 

947
00:40:49,976 --> 00:40:51,900
AUDIENCE: Wait, what's a spawning pool again?
听众：等等，又是什么产卵池？ 

948
00:40:51,900 --> 00:40:53,280
PROFESSOR: So a spawning pool is something
教授：产卵池是什么

949
00:40:53,280 --> 00:40:55,280
that you build off a drone and once you have it,
建造一架无人驾驶飞机，一旦拥有它， 

950
00:40:55,280 --> 00:40:57,940
you can build Zerglings from a hatchery.
您可以从孵化场建造Zerglings。 

951
00:40:57,940 --> 00:40:58,987
So that's all it does.
这就是全部。 

952
00:40:58,987 --> 00:41:00,612
AUDIENCE: Why would you want two if you
听众：如果要，你为什么要两个

953
00:41:00,612 --> 00:41:02,735
can build four Zerglings?
可以造四个幼虫？ 

954
00:41:02,735 --> 00:41:05,110
PROFESSOR: So the spawning pool doesn't build a Zergling.
教授：因此产卵池不会造出Zergling。 

955
00:41:05,110 --> 00:41:07,559
See, the hatchery builds the Zerglings.
看到，孵化场建造了幼虫。 

956
00:41:07,559 --> 00:41:09,018
So the spawning pool is just there.
因此产卵池就在那里。 

957
00:41:09,018 --> 00:41:10,600
You need to have it to cross the edge.
您需要让它越过边缘。 

958
00:41:10,601 --> 00:41:11,456
Otherwise you can't.
否则，你不能。 

959
00:41:11,456 --> 00:41:11,797
AUDIENCE: OK.
听众：好的。 

960
00:41:11,996 --> 00:41:13,302
I understand.
我明白。 

961
00:41:13,302 --> 00:41:13,885
PROFESSOR: OK.
教授：好的。 

962
00:41:13,885 --> 00:41:16,809



963
00:41:16,809 --> 00:41:20,719
So what else for buildings?
那么建筑物还有什么呢？ 

964
00:41:20,719 --> 00:41:23,219
Whether you have it or not, right?
是否拥有它，对吗？ 

965
00:41:23,219 --> 00:41:23,829
OK.
好。 

966
00:41:23,829 --> 00:41:26,172
How about upgrades?
升级怎么样？ 

967
00:41:26,172 --> 00:41:28,900
[INAUDIBLE] a u, d u.
 [听不清] au，d u。 

968
00:41:28,900 --> 00:41:33,059
PROFESSOR: So two flags, a u, d u.
教授：所以，两个标志au，d u。 

969
00:41:33,059 --> 00:41:33,559
Cool.
凉。 

970
00:41:33,559 --> 00:41:37,539
So now we have the thorny issues of money and time.
因此，现在我们面临着金钱和时间的棘手问题。 

971
00:41:37,539 --> 00:41:41,460
Let's say that we're going to have some sort of approximation
假设我们将要进行某种近似

972
00:41:41,460 --> 00:41:44,389
that's going to allow us to not keep track of money,
这将使我们无法跟踪金钱， 

973
00:41:44,389 --> 00:41:47,289
because money is-- you can have a lot of money,
因为钱是-您可以拥有很多钱， 

974
00:41:47,289 --> 00:41:50,056
so that will give us an explosion of states.
这样一来，我们的国家便会激增。 

975
00:41:50,056 --> 00:41:52,139
So we're going to assume that we're spending money
所以我们假设我们要花钱

976
00:41:52,139 --> 00:41:54,129
as fast as possible, because that's
尽可能快，因为那是

977
00:41:54,130 --> 00:41:56,054
what you usually want to do.
您通常想要做什么。 

978
00:41:56,054 --> 00:41:59,039
AUDIENCE: So should your money always be zero then?
听众：那你的钱应该永远为零吗？ 

979
00:41:59,039 --> 00:42:00,485
PROFESSOR: Almost.
教授：差不多了。 

980
00:42:00,485 --> 00:42:01,920
It's very close to that.
这非常接近。 

981
00:42:01,920 --> 00:42:05,840
So you start off with no money.
因此，您一开始就没有钱。 

982
00:42:05,840 --> 00:42:07,309
You accumulate money, then you're
你积累金钱，然后你

983
00:42:07,309 --> 00:42:10,230
going to issue some build orders and build something.
将发出一些建造订单并建造一些东西。 

984
00:42:10,230 --> 00:42:12,210
And your money's going to drop, maybe
而且您的钱将会减少，也许

985
00:42:12,210 --> 00:42:14,269
to zero, maybe to almost zero.
零，也许几乎为零。 

986
00:42:14,469 --> 00:42:16,769
Then you wait to accumulate more money,
然后，您等待积累更多的钱， 

987
00:42:16,769 --> 00:42:18,630
issue another build order.
发出另一个构建命令。 

988
00:42:18,630 --> 00:42:22,460
Wait to accumulate more money, hopefully it goes faster now.
等待积累更多的钱，希望它现在能更快。 

989
00:42:22,659 --> 00:42:24,455
Issue another build order.
发出另一个构建命令。 

990
00:42:24,456 --> 00:42:26,329
We're going to approximate that every time we
每次我们都要近似

991
00:42:26,329 --> 00:42:27,889
issue a build order, so every time we
发出建造订单，所以每次我们

992
00:42:27,889 --> 00:42:29,349
tell our things to build something,
告诉我们要建造的东西， 

993
00:42:29,349 --> 00:42:32,420
the money will drop to zero.
钱将降为零。 

994
00:42:32,420 --> 00:42:34,269
So that doesn't mean you can only build one thing
所以这并不意味着你只能建造一件事

995
00:42:34,469 --> 00:42:36,119
and then your money drops to zero.
然后您的钱降为零。 

996
00:42:36,119 --> 00:42:39,549
If you wait for a few seconds and then you
如果您等待几秒钟，然后

997
00:42:39,550 --> 00:42:42,190
have two hatcheries and tell both of them to build drones,
有两个孵化场，并告诉他们两个建造无人机， 

998
00:42:42,389 --> 00:42:45,639
you build two drones and then your money goes to zero.
你造了两架无人机，然后你的钱变成了零。 

999
00:42:45,639 --> 00:42:48,908
So that means that if we model our states carefully,
因此，这意味着，如果我们仔细建模我们的状态， 

1000
00:42:48,909 --> 00:42:50,250
we don't have to keep track of money.
我们不必跟踪钱。 

1001
00:42:50,449 --> 00:42:56,721



1002
00:42:56,722 --> 00:42:58,563
AUDIENCE: You should probably keep track of time.
听众：您可能应该跟踪时间。 

1003
00:42:58,762 --> 00:43:01,697



1004
00:43:01,697 --> 00:43:04,000
AUDIENCE: Actually keep track of the rate
听众：实际上跟踪汇率

1005
00:43:04,000 --> 00:43:06,469
you're gathering though, right?
你在聚会吧？ 

1006
00:43:06,469 --> 00:43:08,750
PROFESSOR: So what's the rate that you're gathering?
教授：那么您的集会率是多少？ 

1007
00:43:08,750 --> 00:43:11,054
AUDIENCE: It's the number of--
听众：这是- 

1008
00:43:11,054 --> 00:43:14,440
AUDIENCE: Oh [INAUDIBLE] drones, yeah. [INAUDIBLE], OK.
听众：哦[听不清]无人机，是的。 [听不清]，好的。 

1009
00:43:14,440 --> 00:43:17,721
PROFESSOR: So this multiplied by 8%.
教授：所以这乘以8％。 

1010
00:43:17,721 --> 00:43:19,947
AUDIENCE: So we should keep track of time.
听众：所以我们应该跟踪时间。 

1011
00:43:19,947 --> 00:43:20,530
PROFESSOR: OK.
教授：好的。 

1012
00:43:20,530 --> 00:43:23,240
So how would we solve it if we keep track of time?
那么，如果我们跟踪时间，该如何解决呢？ 

1013
00:43:23,440 --> 00:43:26,879



1014
00:43:26,880 --> 00:43:28,449
AUDIENCE: You multiply
听众：你乘

1015
00:43:28,449 --> 00:43:30,282
AUDIENCE: Can you do that layer thing again?
听众：你能再做一次分层的事情吗？ 

1016
00:43:30,282 --> 00:43:31,190
Where is that?
哪里是？ 

1017
00:43:31,190 --> 00:43:34,766
PROFESSOR: So you're going to have-- so what's a layer?
教授：那么您将拥有-那么什么是层？ 

1018
00:43:34,766 --> 00:43:35,856
AUDIENCE: Actually, never mind.
听众：其实，没关系。 

1019
00:43:36,056 --> 00:43:39,189



1020
00:43:39,190 --> 00:43:41,039
AUDIENCE: I want to know what a layer is.
听众：我想知道什么是图层。 

1021
00:43:41,239 --> 00:43:41,967
PROFESSOR: Sorry?
教授：对不起？ 

1022
00:43:41,967 --> 00:43:43,675
AUDIENCE: I want to know what a layer is.
听众：我想知道什么是图层。 

1023
00:43:43,675 --> 00:43:47,000
PROFESSOR: So last time we-- we solved problems by saying that,
教授：所以，上次我们说的是解决问题的方法， 

1024
00:43:47,000 --> 00:43:48,679
so we had the graph of streets.
所以我们有了街道图。 

1025
00:43:48,679 --> 00:43:50,000
We had a highway graph.
我们有一个公路图。 

1026
00:43:50,000 --> 00:43:51,820
And that was a 2D graph.
那是2D图。 

1027
00:43:51,820 --> 00:43:54,190
And we made it into a 3D graph by adding time
我们通过添加时间将其制作成3D图形

1028
00:43:54,190 --> 00:43:56,260
as a third dimension.
作为第三维。 

1029
00:43:56,260 --> 00:43:58,570
So we had layers, where each layer was,
所以我们有几层，每一层在哪里， 

1030
00:43:58,570 --> 00:44:00,309
said that you're at a point in the graph
说你在图中的一点

1031
00:44:00,309 --> 00:44:03,779
at a certain point in time.
在某个时间点。 

1032
00:44:03,780 --> 00:44:05,568
So there's a layer 4 times 0, layer 4 time 1,
因此，有一个4乘以0的层，4乘以1的层， 

1033
00:44:05,768 --> 00:44:06,559
so on and so forth.
等等等等。 

1034
00:44:06,559 --> 00:44:09,250
And you start at time 0 and kept going up the graph.
并且您从时间0开始，并一直在上升。 

1035
00:44:09,250 --> 00:44:12,686



1036
00:44:12,686 --> 00:44:14,299
AUDIENCE: You have a flag that says,
听众：您有一个标语， 

1037
00:44:14,300 --> 00:44:15,980
I've just purchased something?
我刚买东西吗？ 

1038
00:44:16,179 --> 00:44:19,599
Because that way then you'll know that you've completely
因为那样一来，您就会知道自己已经完全

1039
00:44:19,599 --> 00:44:23,420
exhausted your-- that maybe that will tell you
精疲力竭-也许那会告诉你

1040
00:44:23,420 --> 00:44:25,501
that you can't buy anything for awhile, right?
暂时不能买东西，对吧？ 

1041
00:44:25,501 --> 00:44:27,561
Because if we're not keeping track of money then
因为如果我们不跟踪钱的话

1042
00:44:27,561 --> 00:44:28,699
we should know [INAUDIBLE].
我们应该知道[听不清]。 

1043
00:44:28,699 --> 00:44:29,282
PROFESSOR: OK.
教授：好的。 

1044
00:44:29,282 --> 00:44:31,199
So that's a good point.
这是一个好点。 

1045
00:44:31,199 --> 00:44:35,279
So if I have-- so suppose here I have to wait for five seconds
所以如果我有-假设在这里我必须等待五秒钟

1046
00:44:35,280 --> 00:44:36,860
to get enough money to do a move.
以获得足够的钱来搬家。 

1047
00:44:37,059 --> 00:44:38,880
If I keep track of time in my state and I
如果我跟踪自己所在州的时间， 

1048
00:44:38,880 --> 00:44:41,431
have five things here.
这里有五件事。 

1049
00:44:41,431 --> 00:44:43,179
I also have to keep track of money, right?
我也要跟踪钱，对吧？ 

1050
00:44:43,179 --> 00:44:44,928
I have to know how much money I'm getting,
我要知道我能赚多少钱

1051
00:44:44,929 --> 00:44:46,599
so that I know where I'm buying things.
这样我就知道我在哪里买东西。 

1052
00:44:46,599 --> 00:44:49,019
On the other hand, in this case, if I
另一方面，在这种情况下，如果我

1053
00:44:49,019 --> 00:44:51,619
keep track of both time and money as states,
保持时间和金钱状态， 

1054
00:44:51,619 --> 00:44:53,190
I can implement a precise strategy.
我可以执行一个精确的策略。 

1055
00:44:53,190 --> 00:44:54,523
I don't need this approximation.
我不需要这个近似值。 

1056
00:44:54,523 --> 00:44:57,059



1057
00:44:57,059 --> 00:45:01,610
If I do that, then what search algorithm would I use?
如果这样做，我将使用哪种搜索算法？ 

1058
00:45:01,610 --> 00:45:05,730
So if I have time in states, so each vertex in my note
因此，如果我有时间在状态中，那么笔记中的每个顶点

1059
00:45:05,929 --> 00:45:09,489
says that I get from some states to some other state
说我从某些州到其他州

1060
00:45:09,489 --> 00:45:12,199
in one unit of time.
在一个时间单位内。 

1061
00:45:12,199 --> 00:45:15,974
What algorithm do I use to search for my strategy?
我用什么算法搜索我的策略？ 

1062
00:45:15,974 --> 00:45:20,099



1063
00:45:20,099 --> 00:45:20,599
Yeah.
是的

1064
00:45:20,599 --> 00:45:21,659
Why do I use BFS?
为什么要使用BFS？ 

1065
00:45:21,659 --> 00:45:23,500
AUDIENCE: Because every edge has the same weight.
听众：因为每个边缘都有相同的权重。 

1066
00:45:23,699 --> 00:45:25,449
PROFESSOR: Every edge has the same weight, right?
教授：每个边缘都有相同的重量，对吗？ 

1067
00:45:25,449 --> 00:45:27,039
So if we keep track of time, then
因此，如果我们跟踪时间， 

1068
00:45:27,039 --> 00:45:29,969
we-- we keep track of time, we keep track of money,
我们-我们跟踪时间，我们跟踪金钱， 

1069
00:45:29,969 --> 00:45:32,591
we use BFS, we have a solution.
我们使用BFS，我们有一个解决方案。 

1070
00:45:32,592 --> 00:45:33,092
So.
所以。 

1071
00:45:33,092 --> 00:45:44,039



1072
00:45:44,239 --> 00:45:46,679
Let's try to not do it, either of these.
让我们尝试不做任何一个。 

1073
00:45:46,679 --> 00:45:48,289
If I don't want to keep track of time
如果我不想跟踪时间

1074
00:45:48,289 --> 00:45:50,639
and I don't want to keep track of money,
而且我不想跟踪钱， 

1075
00:45:50,639 --> 00:45:53,359
what would an edge be?
边缘会是什么？ 

1076
00:45:53,360 --> 00:45:57,880
If I want to say that, hey, this is a state and this is a state.
如果我要说的话，嘿，这是一个状态，这是一个状态。 

1077
00:45:57,880 --> 00:45:59,878
What should be the edge connecting them.
连接它们的边缘应该是什么？ 

1078
00:45:59,878 --> 00:46:01,420
AUDIENCE: What other item you got is.
听众：您还有什么其他东西。 

1079
00:46:01,420 --> 00:46:04,170
AUDIENCE: Is that after a second?
听众：那是一秒钟之后吗？ 

1080
00:46:04,170 --> 00:46:05,730
PROFESSOR: So the distance between these
教授：所以这些之间的距离

1081
00:46:05,929 --> 00:46:07,549
won't be a second, right?
一秒钟不会吧？ 

1082
00:46:07,550 --> 00:46:09,130
If I have to wait for five seconds to
如果我要等五秒钟

1083
00:46:09,130 --> 00:46:11,670
accumulate enough to issue this build order
积累足够发出此构建订单

1084
00:46:11,670 --> 00:46:13,625
that would get me the state then--
那会让我有状态- 

1085
00:46:13,824 --> 00:46:15,324
AUDIENCE: The time you have to wait?
听众：您该等什么时间？ 

1086
00:46:15,324 --> 00:46:18,059



1087
00:46:18,059 --> 00:46:20,221
PROFESSOR: So that's what I would put on an edge.
教授：那就是我的优势。 

1088
00:46:20,221 --> 00:46:22,219
So this way I don't have to keep track of money,
这样我就不必跟踪钱了

1089
00:46:22,219 --> 00:46:23,677
I don't have to keep track of time.
我不必跟踪时间。 

1090
00:46:23,677 --> 00:46:25,130
So the graph is smaller.
因此该图较小。 

1091
00:46:25,130 --> 00:46:27,349
So I can look into bigger graphs.
因此，我可以研究更大的图表。 

1092
00:46:27,349 --> 00:46:30,699
If I do this, what algorithm do I use?
如果执行此操作，应使用哪种算法？ 

1093
00:46:30,699 --> 00:46:33,403
To find my strategy?
找到我的策略？ 

1094
00:46:33,403 --> 00:46:34,320
AUDIENCE: [INAUDIBLE].
听众：[听不清]。 

1095
00:46:34,320 --> 00:46:36,309
[INTERPOSING VOICES]
 [插入语音] 

1096
00:46:36,309 --> 00:46:38,099
PROFESSOR: So no time, no money.
教授：所以没有时间，没有钱。 

1097
00:46:38,099 --> 00:46:41,650



1098
00:46:41,650 --> 00:46:43,670
And [? extra ?].
然后[？额外？]。 

1099
00:46:43,670 --> 00:46:46,010
So this looks reasonably easy, right?
因此，这看起来相当容易，对吧？ 

1100
00:46:46,010 --> 00:46:49,280
I mean, if you want to get from one state to another,
我的意思是，如果您想从一种状态进入另一种状态， 

1101
00:46:49,280 --> 00:46:50,690
you see what you'd have to build,
您会看到需要构建的内容， 

1102
00:46:50,889 --> 00:46:52,869
you see how much it costs, and you
你看它要花多少钱，你

1103
00:46:52,869 --> 00:46:55,909
see how much you have to wait to accumulate those resources.
看看您需要等​​待多少时间来累积这些资源。 

1104
00:46:55,909 --> 00:46:57,434
Except there's one glitch.
除了一个小故障。 

1105
00:46:57,434 --> 00:47:01,840



1106
00:47:01,840 --> 00:47:02,789
How do we deal with this?
我们该如何处理？ 

1107
00:47:02,989 --> 00:47:05,879
How do we make sure that we do our attacks on time and how do
我们如何确保我们按时进行攻击以及如何做

1108
00:47:05,880 --> 00:47:10,518
we know that we're-- how do we keep track of them?
我们知道我们-我们如何跟踪他们？ 

1109
00:47:10,518 --> 00:47:12,880
AUDIENCE: What is this again representing?
听众：这又代表什么？ 

1110
00:47:12,880 --> 00:47:14,879
PROFESSOR: So this is that every two minutes you
教授：这就是您每两分钟

1111
00:47:14,880 --> 00:47:16,730
have to have a number of Zerglings
必须有一些幼虫

1112
00:47:16,929 --> 00:47:19,038
that you're sending to attack the enemy.
您要发动攻击敌人。 

1113
00:47:19,039 --> 00:47:20,880
And the number of Zerglings that you need to have
还有你需要的幼虫数量

1114
00:47:21,079 --> 00:47:23,670
depends on the time and it depends on the upgrades
取决于时间，取决于升级

1115
00:47:23,670 --> 00:47:24,019
that you got.
你得到的。 

1116
00:47:24,219 --> 00:47:28,649



1117
00:47:28,650 --> 00:47:30,139
So how do we keep track of this?
那么我们如何跟踪呢？ 

1118
00:47:30,139 --> 00:47:34,829



1119
00:47:34,829 --> 00:47:37,650
AUDIENCE: If the edges are a function of time,
听众：如果边缘是时间的函数， 

1120
00:47:37,650 --> 00:47:46,853
then just know that at radius 120-- at radius 120 over 5,
那么只要知道在半径120处-在半径120处， 

1121
00:47:46,853 --> 00:47:50,610
then you'd have to send more Zerglings.
那么您将不得不发送更多的幼虫。 

1122
00:47:50,610 --> 00:47:55,110
PROFESSOR: So what if not all the edges have the same weight.
教授：如果不是所有边缘都具有相同的权重，那该怎么办？ 

1123
00:47:55,110 --> 00:47:57,840
So let's look at how a graph looks like for a little bit.
因此，让我们看一下图形的外观。 

1124
00:47:57,840 --> 00:48:00,809
So we're going to have an initial state,
所以我们将有一个初始状态， 

1125
00:48:00,809 --> 00:48:06,710
say one hatchery and six drones and one overlord.
说一间孵化场，六架无人机和一架霸主。 

1126
00:48:06,710 --> 00:48:11,016
And we want to build a new drone.
我们想建造一架新的无人机。 

1127
00:48:11,016 --> 00:48:12,389
Say we want to build a new drone.
假设我们要建造新的无人机。 

1128
00:48:12,389 --> 00:48:15,059
A drone costs 50 minerals.
无人机消耗50种矿物质。 

1129
00:48:15,059 --> 00:48:17,730
We have six drones.
我们有六架无人机。 

1130
00:48:17,730 --> 00:48:19,889
Each drone gets us eight minerals a second,
每架无人机每秒都能为我们提供八种矿物质， 

1131
00:48:19,889 --> 00:48:22,509
so in one second we're going to get 48 minerals.
因此，在一秒钟内，我们将获得48种矿物质。 

1132
00:48:22,510 --> 00:48:24,980
So bummer, we have to wait for two seconds to build one drone.
好可惜，我们必须等待两秒钟才能建造一架无人驾驶飞机。 

1133
00:48:25,179 --> 00:48:29,699



1134
00:48:29,699 --> 00:48:34,659
And now we're going to be in the state of one hatchery, seven
现在我们要进入一个孵化场，七个孵化场

1135
00:48:34,659 --> 00:48:39,829
drones, one overlord.
无人机，一位霸主。 

1136
00:48:39,829 --> 00:48:45,900
If you said we want to build a hatchery-- then
如果您说我们要建造一个孵化场-那么

1137
00:48:45,900 --> 00:48:50,260
we're going to need to accumulate 400 or 450.
我们将需要累积400或450。 

1138
00:48:50,260 --> 00:48:56,340
Oh, we have to accumulate 450, using six drones, 48 minerals,
哦，我们必须使用六架无人机，48种矿物质累计450架， 

1139
00:48:56,340 --> 00:48:58,222
so I guess nine seconds.
所以我猜是九秒

1140
00:48:58,222 --> 00:48:59,980
So we're going to have to wait for nine seconds
所以我们将不得不等待九秒钟

1141
00:49:00,179 --> 00:49:01,069
to get that money.
得到那笔钱。 

1142
00:49:01,070 --> 00:49:03,572



1143
00:49:03,771 --> 00:49:05,230
And then when we build, we're going
然后当我们建造时，我们要

1144
00:49:05,230 --> 00:49:07,039
to spend the drone building, because it's
花无人机建造，因为它是

1145
00:49:07,239 --> 00:49:08,500
going to turn into a hatchery.
将变成一个孵化场。 

1146
00:49:08,500 --> 00:49:12,329
And then we're going to end up with two hatcheries, five
然后我们将要建造两个孵化场，五个

1147
00:49:12,329 --> 00:49:14,819
drones, and one overlord.
无人机和一位霸主。 

1148
00:49:14,820 --> 00:49:17,030
So edges have different weights.
因此，边缘具有不同的权重。 

1149
00:49:17,030 --> 00:49:19,737
So I can't look at the radius in terms of number of his edges.
因此，我无法根据其边缘数量来查看半径。 

1150
00:49:19,936 --> 00:49:21,769
AUDIENCE: Everything builds instantaneously.
听众：一切都是瞬间建立的。 

1151
00:49:21,769 --> 00:49:24,750



1152
00:49:24,750 --> 00:49:25,695
PROFESSOR: Yeah, sure.
教授：是的，当然。 

1153
00:49:25,695 --> 00:49:28,069
AUDIENCE: You could keep track of just the total distance
听众：您可以跟踪总距离

1154
00:49:28,070 --> 00:49:30,170
from whatever starting build you are?
从什么开始构建？ 

1155
00:49:30,369 --> 00:49:32,250
AUDIENCE: Actually, if the distance
听众：实际上，如果距离

1156
00:49:32,250 --> 00:49:35,980
from the origin to where you're at is a multiple of 120,
从原点到您的所在地是120的倍数， 

1157
00:49:35,980 --> 00:49:38,820
then you should have another state
那你应该有另一个状态

1158
00:49:38,820 --> 00:49:42,288
that you have to [INAUDIBLE].
您必须[听不清]。 

1159
00:49:42,288 --> 00:49:46,039
AUDIENCE: Assuming you have any drones left, hopefully you do.
听众：假设您还有任何无人机，希望可以。 

1160
00:49:46,239 --> 00:49:48,653
PROFESSOR: So that's modeling.
教授：那就是建模。 

1161
00:49:48,653 --> 00:49:50,570
One way of doing it is sure, model every round
确保做到这一点的一种方法是每轮建模

1162
00:49:50,570 --> 00:49:53,190
of the attack as one, every round of harassment
一次袭击，每一轮骚扰

1163
00:49:53,190 --> 00:49:56,460
is one there in the graph, and we can do it that way.
图中有一个，我们可以那样做。 

1164
00:49:56,460 --> 00:49:58,760
Is that what you're saying?
那是你的意思吗

1165
00:49:58,760 --> 00:50:01,362
So you can't-- once you're at 120 seconds,
因此，一旦达到120秒，您就无法

1166
00:50:01,561 --> 00:50:04,019
you have to do an attack and then you get to the next layer
您必须进行攻击，然后进入下一层

1167
00:50:04,019 --> 00:50:05,320
in the graph.
在图中。 

1168
00:50:05,320 --> 00:50:05,900
AUDIENCE: That makes a lot of sense.
听众：这很有道理。 

1169
00:50:05,900 --> 00:50:07,900
AUDIENCE: Of course that's what we were thinking.
听众：当然，这就是我们的想法。 

1170
00:50:07,900 --> 00:50:09,523
PROFESSOR: How about let's not do that.
教授：那我们就不要那样做。 

1171
00:50:09,523 --> 00:50:11,789
How about let's represent it without layers?
让我们不用层来表示它吗？ 

1172
00:50:11,789 --> 00:50:12,610
So that's good.
这样很好。 

1173
00:50:12,610 --> 00:50:14,193
You're getting closer to the solution.
您正在接近解决方案。 

1174
00:50:14,193 --> 00:50:16,420
It is much better than representing every time.
这比每次都代表要好得多。 

1175
00:50:16,619 --> 00:50:18,925
Write the number of layers this time over 120,
这次写的层数超过120， 

1176
00:50:18,925 --> 00:50:20,719
it's a huge improvement.
这是一个巨大的进步。 

1177
00:50:20,719 --> 00:50:24,069
Well, we can do it without any-- we can do it
好吧，我们可以一无所获-我们可以做到

1178
00:50:24,070 --> 00:50:27,384
without any time notion whatsoever.
没有任何时间观念。 

1179
00:50:27,384 --> 00:50:29,050
Let's see, can I let you think about it?
让我们看看，我可以让你考虑一下吗？ 

1180
00:50:29,050 --> 00:50:31,135
Oh, I can let you think about it for 30 seconds.
哦，我可以让您考虑30秒。 

1181
00:50:31,135 --> 00:50:37,289



1182
00:50:37,489 --> 00:50:39,376
So there's a key insight here that--
因此，这里有一个关键见解- 

1183
00:50:39,376 --> 00:50:39,960
AUDIENCE: Ooh.
听众：哦。 

1184
00:50:39,960 --> 00:50:42,255
PROFESSOR: Yeah.
教授：是的。 

1185
00:50:42,255 --> 00:50:44,739
AUDIENCE: [INAUDIBLE] but if you figure how much time has
听众：[听不清]，但如果您知道有多少时间

1186
00:50:44,739 --> 00:50:47,049
elapsed, based on the items we have
过去，根据我们拥有的项目

1187
00:50:47,050 --> 00:50:48,766
and our starting state, right?
还有我们的起始状态，对吗？ 

1188
00:50:48,766 --> 00:50:50,139
Because if we have two hatcheries
因为如果我们有两个孵化场

1189
00:50:50,139 --> 00:50:51,625
and we started with one hatchery,
我们从一个孵化场开始

1190
00:50:51,625 --> 00:50:53,730
we know that at least nine seconds has elapsed.
我们知道至少已经过去了9秒。 

1191
00:50:53,730 --> 00:50:56,190
PROFESSOR: Well, so I like the first part of what you said,
教授：好，所以我喜欢您所说的第一部分， 

1192
00:50:56,190 --> 00:50:58,349
the second part is too complicated.
第二部分太复杂了。 

1193
00:50:58,349 --> 00:51:01,739
But we can know what time we're at.
但是我们可以知道我们几点钟了。 

1194
00:51:01,739 --> 00:51:03,189
Why?
为什么？ 

1195
00:51:03,190 --> 00:51:05,349
AUDIENCE: Because it takes a certain amount of time
听众：因为需要一定的时间

1196
00:51:05,349 --> 00:51:09,240
to achieve everything, each thing.
实现每件事，每一件事。 

1197
00:51:09,240 --> 00:51:11,365
AUDIENCE: Are we assuming that we take the shortest
观众：我们是否假设我们选的最短

1198
00:51:11,365 --> 00:51:14,931
path to get to each state that we're at?
到达我们所处的每个州的路径？ 

1199
00:51:14,931 --> 00:51:16,429
PROFESSOR: So we're using the extra.
教授：所以我们正在使用额外的东西。 

1200
00:51:16,429 --> 00:51:19,250



1201
00:51:19,250 --> 00:51:20,510
How does the extra work?
额外的工作方式如何？ 

1202
00:51:20,510 --> 00:51:22,630
You have a queue, a priority queue.
您有一个队列，一个优先级队列。 

1203
00:51:22,630 --> 00:51:24,940
You extract a node, you look at the neighbors.
您提取一个节点，然后查看邻居。 

1204
00:51:25,139 --> 00:51:26,650
When you extract the node, do you
提取节点时， 

1205
00:51:26,650 --> 00:51:30,356
know the distance to that node?
知道到那个节点的距离吗？ 

1206
00:51:30,556 --> 00:51:31,639
AUDIENCE: Can you explain?
听众：你能解释一下吗？ 

1207
00:51:31,639 --> 00:51:33,109
You ask?
你问？ 

1208
00:51:33,110 --> 00:51:34,045
PROFESSOR: I'm asking.
教授：我在问。 

1209
00:51:34,045 --> 00:51:36,019
AUDIENCE: I know, but like the node asks and says,
听众：我知道，但是就像节点问并说的那样， 

1210
00:51:36,219 --> 00:51:39,073
how far away are you?
你有多远

1211
00:51:39,074 --> 00:51:41,289
PROFESSOR: So you need to keep that in the priority queue.
教授：因此，您需要将其保留在优先级队列中。 

1212
00:51:41,489 --> 00:51:44,099
So the extra-- the main invariant
因此，额外的-主要不变式

1213
00:51:44,099 --> 00:51:46,329
is that once you pull out the node,
是一旦您拉出节点， 

1214
00:51:46,329 --> 00:51:49,467
you're not going to find any shorter path to that node.
您不会找到该节点的任何更短路径。 

1215
00:51:49,467 --> 00:51:51,050
So you already know the shortest path.
因此，您已经知道最短的路径。 

1216
00:51:51,050 --> 00:51:53,860
That how you sort the nodes in the priority queue.
那就是你如何排序优先队列中的节点。 

1217
00:51:53,860 --> 00:51:57,920
So when we're at a configuration--
因此，当我们进行配置时- 

1218
00:51:57,920 --> 00:52:00,329
Say we're at some configuration here,
假设我们在这里有一些配置， 

1219
00:52:00,329 --> 00:52:07,090
two hatches, six drones, and five Zerglings.
两架舱口，六架无人机和五只幼虫。 

1220
00:52:07,090 --> 00:52:11,780
We already know that, say we're at time 119 seconds.
我们已经知道，比如说我们的时间是119秒。 

1221
00:52:11,780 --> 00:52:15,940
If what I want to do next is build another hatchery,
如果我接下来要做的是建造另一个孵化场， 

1222
00:52:15,940 --> 00:52:18,635
then I have to wait, what, six drones, same thing as before.
然后我得等六架无人机，和以前一样。 

1223
00:52:18,835 --> 00:52:20,459
I have to wait for nine seconds, right?
我必须等待九秒钟，对不对？ 

1224
00:52:20,460 --> 00:52:23,449



1225
00:52:23,449 --> 00:52:25,849
So the edge would look like this.
因此边缘看起来像这样。 

1226
00:52:25,849 --> 00:52:28,269
And then we're going to get to three hatcheries, five
然后我们要去三个孵化场，五个

1227
00:52:28,269 --> 00:52:31,480
drones, five Zerglings.
无人机，五只幼虫。 

1228
00:52:31,480 --> 00:52:35,199
This crosses a one, this crosses a two-minute boundary, right?
这越过一个，这越过了两分钟的边界，对吗？ 

1229
00:52:35,199 --> 00:52:39,109



1230
00:52:39,110 --> 00:52:40,809
So when I cross this boundary, I'd
所以，当我越过边界时，我会

1231
00:52:40,809 --> 00:52:42,980
better have enough Zerglings to do an attack.
最好有足够的幼虫来发动攻击。 

1232
00:52:42,980 --> 00:52:46,659
Do I have enough Zerglings to do an attack?
我是否有足够的幼虫进行攻击？ 

1233
00:52:46,659 --> 00:52:47,519
No.
没有。 

1234
00:52:47,519 --> 00:52:48,920
So is this a valid move?
那么这是一个有效的举动吗？ 

1235
00:52:48,920 --> 00:52:52,610
Is this the valid edge in our graph?
这是我们图中的有效边吗？ 

1236
00:52:52,610 --> 00:52:54,480
It's not.
不是。 

1237
00:52:54,480 --> 00:52:56,699
So when you're at a node, you already know the time
因此，当您在节点上时，您已经知道了时间

1238
00:52:56,699 --> 00:52:58,119
that you need to get to that node,
您需要到达该节点， 

1239
00:52:58,119 --> 00:53:00,069
so when you generate the neighbors,
因此，当您生成邻居时， 

1240
00:53:00,070 --> 00:53:01,630
you can check for each edge to see
您可以检查每个边缘以查看

1241
00:53:01,630 --> 00:53:04,148
it crosses that 120 second game.
超过了120秒。 

1242
00:53:04,148 --> 00:53:05,190
Now let's assume it does.
现在让我们假设它可以。 

1243
00:53:05,190 --> 00:53:06,563
Let's see how this works and this
让我们看看这是如何工作的

1244
00:53:06,563 --> 00:53:08,349
is the last thing we're doing.
是我们要做的最后一件事。 

1245
00:53:08,349 --> 00:53:12,259
So suppose you have two hatcheries, six drones,
因此，假设您有两个孵化场，六个无人机， 

1246
00:53:12,260 --> 00:53:14,190
and eight Zerglings.
和八只幼虫。 

1247
00:53:14,389 --> 00:53:18,379
And you're going to build that same hatchery.
您将要建立同样的孵化场。 

1248
00:53:18,380 --> 00:53:22,789
So you're going to go past this 120 second mark.
因此，您将超过120秒。 

1249
00:53:22,989 --> 00:53:24,634
What state are you going to end up in?
您将处于什么状态？ 

1250
00:53:24,635 --> 00:53:27,250



1251
00:53:27,250 --> 00:53:28,706
How many hatcheries?
多少个孵化场？ 

1252
00:53:28,706 --> 00:53:29,960
AUDIENCE: Three.
听众：三。 

1253
00:53:29,960 --> 00:53:31,139
PROFESSOR: OK.
教授：好的。 

1254
00:53:31,139 --> 00:53:32,329
How many drones.
几架无人机。 

1255
00:53:32,329 --> 00:53:33,585
AUDIENCE: Five.
听众：五。 

1256
00:53:33,585 --> 00:53:34,833
PROFESSOR: How many Zerglings.
教授：多少只幼虫。 

1257
00:53:34,833 --> 00:53:37,617
AUDIENCE: Two.
听众：两个。 

1258
00:53:37,617 --> 00:53:39,009
PROFESSOR: Yes.
教授：是的。 

1259
00:53:39,010 --> 00:53:42,750
So key elements, two Zerglings, because this edge
所以关键元素，两只幼虫，因为这个优势

1260
00:53:42,949 --> 00:53:46,199
crosses the 120-second harassment boundary,
越过了120秒的骚扰边界， 

1261
00:53:46,199 --> 00:53:47,799
so you have to send in six Zerglings
所以你必须送出六只幼虫

1262
00:53:47,800 --> 00:53:50,170
and you're going to lose them.
而你会失去他们。 

1263
00:53:50,369 --> 00:53:53,579
So we're taking advantage of how the extra works to sort
因此，我们正在利用额外的工作方式进行排序

1264
00:53:53,579 --> 00:53:55,619
of generate our edges on the fly.
迅速产生我们的优势。 

1265
00:53:55,619 --> 00:53:58,389
So we wouldn't be able to regenerate this graph,
因此我们将无法重新生成该图， 

1266
00:53:58,389 --> 00:53:59,609
even if we wanted to have to.
即使我们想要

1267
00:53:59,610 --> 00:54:01,610
We have to work with the implicit representation
我们必须使用隐式表示

1268
00:54:01,610 --> 00:54:04,610
and, as we learn the distances to the nodes,
并且，当我们了解到节点的距离时， 

1269
00:54:04,610 --> 00:54:07,789
the minimum distances, we also learned the edges
最小距离，我们还了解了边缘

1270
00:54:07,989 --> 00:54:10,164
that we have coming out of those nodes.
我们已经从那些节点出来了。 

1271
00:54:10,164 --> 00:54:12,539
AUDIENCE: So it's kinda of like this graph that's growing
听众：有点像这张图在增长

1272
00:54:12,539 --> 00:54:14,373
and we're like as it gets to a certain point
而且就像到达某一点一样

1273
00:54:14,373 --> 00:54:17,340
we kill a bunch of paths and then it keeps on going.
我们杀死了许多路径，然后继续前进。 

1274
00:54:17,340 --> 00:54:19,259
PROFESSOR: Yeah.
教授：是的。 

1275
00:54:19,458 --> 00:54:20,500
Doesn't this makes sense?
这不合理吗？ 

1276
00:54:20,500 --> 00:54:25,010



1277
00:54:25,010 --> 00:54:27,420
So the good news is that this is like we're
好消息是，这就像我们

1278
00:54:27,420 --> 00:54:29,309
training you to run a 10-mile marathon,
训练您进行10英里的马拉松， 

1279
00:54:29,309 --> 00:54:32,230
so you can run 50 meters for the test.
因此您可以跑50米进行测试。 

1280
00:54:32,230 --> 00:54:33,730
Let's still try to get it, because I
让我们继续尝试，因为我

1281
00:54:33,730 --> 00:54:38,730
think it's a cool problem.
认为这是一个很酷的问题。 

