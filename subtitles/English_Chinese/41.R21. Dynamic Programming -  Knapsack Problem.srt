1
00:00:00,000 --> 00:00:00,050



2
00:00:00,050 --> 00:00:01,770
The following content is provided
提供以下内容

3
00:00:01,770 --> 00:00:04,000
under a Creative Commons license.
根据知识共享许可。 

4
00:00:04,000 --> 00:00:06,859
Your support will help MIT OpenCourseWare continue
您的支持将帮助MIT OpenCourseWare继续

5
00:00:06,860 --> 00:00:10,720
to offer high quality educational resources for free.
免费提供高质量的教育资源。 

6
00:00:10,720 --> 00:00:13,330
To make a donation or view additional materials
捐款或查看其他材料

7
00:00:13,330 --> 00:00:15,769
from hundreds of MIT courses, visit
从数百个麻省理工学院的课程中访问

8
00:00:15,769 --> 00:00:21,339
MIT OpenCourseWare at ocw.mit.edu
麻省理工学院的开放式课件网站ocw.mit.edu 

9
00:00:21,339 --> 00:00:22,839
PROFESSOR: How about I propose this?
教授：我怎么建议这个？ 

10
00:00:22,839 --> 00:00:26,809
We go through knapsack because it's
我们经历背包，因为它

11
00:00:26,809 --> 00:00:29,259
on the Pset, not knapsack but a variation of it.
在Pset上，不是背包，而是它的一种变体。 

12
00:00:29,260 --> 00:00:31,510
If we have time, we do a couple variations.
如果有时间，我们会做一些变化。 

13
00:00:31,510 --> 00:00:33,600



14
00:00:33,600 --> 00:00:34,669
If not, maybe not.
如果不是，也许不是。 

15
00:00:34,869 --> 00:00:37,126
And if we have time, we do at a distance.
如果我们有时间，我们可以远距离进行。 

16
00:00:37,127 --> 00:00:38,710
Let's see what happens after knapsack.
让我们看看背包之后发生了什么。 

17
00:00:38,710 --> 00:00:39,438



18
00:00:39,438 --> 00:00:40,353
AUDIENCE: [INAUDIBLE]?
听众：[听不清]？ 

19
00:00:40,353 --> 00:00:41,304



20
00:00:41,304 --> 00:00:43,179
PROFESSOR: How many people got the difference
教授：有多少人有所作为

21
00:00:43,179 --> 00:00:44,969
between polynomial and pseudo polynomial?
在多项式和伪多项式之间？ 

22
00:00:44,969 --> 00:00:47,269



23
00:00:47,270 --> 00:00:49,239
OK, so we should definitely do knapsack.
好，所以我们绝对应该做背包。 

24
00:00:49,439 --> 00:00:56,763



25
00:00:56,764 --> 00:00:58,679
AUDIENCE: Constant factors, they don't matter.
听众：恒定因素，无所谓。 

26
00:00:58,679 --> 00:00:59,554
Oh wait. [INAUDIBLE].
等一下。 [听不清]。 

27
00:00:59,554 --> 00:01:00,551
Yeah, they do.
是的，他们有。 

28
00:01:00,551 --> 00:01:02,759
PROFESSOR: So the thing is it's not constant factors.
教授：因此，这不是恒定的因素。 

29
00:01:02,759 --> 00:01:04,719
That s there is not a constant.
那是没有常数的。 

30
00:01:04,719 --> 00:01:07,724



31
00:01:07,724 --> 00:01:08,640
AUDIENCE: [INAUDIBLE].
听众：[听不清]。 

32
00:01:08,640 --> 00:01:16,402



33
00:01:16,402 --> 00:01:17,859
PROFESSOR: So the knapsack problem.
教授：这是背包问题。 

34
00:01:17,859 --> 00:01:24,810



35
00:01:24,810 --> 00:01:26,049
So the way I look at it.
所以我看的方式。 

36
00:01:26,049 --> 00:01:26,849
You're a thief.
你是小偷

37
00:01:26,849 --> 00:01:29,109
You somehow made your way into a vault.
您以某种方式进入了保险库。 

38
00:01:29,109 --> 00:01:31,884
That vault has n items.
那个金库有n个物品。 

39
00:01:31,884 --> 00:01:34,280
AUDIENCE: Way better than camping.
听众：比露营更好。 

40
00:01:34,280 --> 00:01:44,310
PROFESSOR: Each item has a weight of si pounds,
教授：每件物品的重量为si磅， 

41
00:01:44,310 --> 00:01:46,430
and after you get out of the vault,
在您跳出保险库之后， 

42
00:01:46,430 --> 00:01:48,180
assuming you make it alive and everything,
假设你活着的一切， 

43
00:01:48,180 --> 00:01:50,649
you can sell it for vi dollars on the market,
您可以在市场上以美元出售它， 

44
00:01:50,849 --> 00:01:54,539
so this is how much money you get out of it, vi.
因此，这是您从中得到多少钱，vi。 

45
00:01:54,540 --> 00:01:59,640



46
00:01:59,640 --> 00:02:03,200
Well, now the problem is the only thing you have with you
好吧，现在的问题是唯一的问题

47
00:02:03,200 --> 00:02:09,870
as you enter that vault is one knapsack that
当您输入Vault是一个背包时， 

48
00:02:09,870 --> 00:02:11,865
can carry at most s pounds.
最多可以携带英镑。 

49
00:02:11,865 --> 00:02:13,719



50
00:02:13,719 --> 00:02:16,199
If you try to put more stuff in it,
如果您尝试放入更多东西， 

51
00:02:16,199 --> 00:02:18,619
so if you try to load it up with more than s pounds,
因此，如果您尝试用超过s磅的重量加载它， 

52
00:02:18,620 --> 00:02:21,830
it's going to break as you try to escape from the vault
当您尝试从金库中逃脱时，它会破裂

53
00:02:21,830 --> 00:02:23,530
and stuff is going to fall on the floor,
东西会掉在地上， 

54
00:02:23,530 --> 00:02:26,669
and then many laser beams will shred you to pieces,
然后很多激光束会将您切成碎片， 

55
00:02:26,669 --> 00:02:28,119
so that's undesirable.
所以这是不可取的。 

56
00:02:28,120 --> 00:02:29,159



57
00:02:29,159 --> 00:02:32,439
So we can only load the knapsack with s pounds.
因此，我们只能在背包中装入s磅。 

58
00:02:32,439 --> 00:02:34,000
Now, given this restriction, we want
现在，鉴于此限制，我们想要

59
00:02:34,000 --> 00:02:36,129
to make as much money as possible
尽可能赚钱

60
00:02:36,129 --> 00:02:38,780
out of the whole thing, so we want
整个事情，所以我们想要

61
00:02:38,780 --> 00:02:40,939
to load up the knapsack optimally.
以最佳地装载背包。 

62
00:02:40,939 --> 00:02:43,710



63
00:02:43,710 --> 00:02:44,924
Does this make sense?
这有意义吗？ 

64
00:02:44,924 --> 00:02:45,715
Everyone remembers?
每个人都记得吗？ 

65
00:02:45,715 --> 00:02:47,840



66
00:02:47,840 --> 00:02:48,664
Good.
好。 

67
00:02:48,664 --> 00:02:52,311
So two ways to solve it, graphs and dynamic programming.
因此，有两种解决方法，即图形和动态编程。 

68
00:02:52,312 --> 00:02:53,270
We're going to do both.
我们将同时做这两个。 

69
00:02:53,270 --> 00:02:56,719
Who wants to go for graphs first?
谁想先去看图？ 

70
00:02:56,919 --> 00:02:59,369
Who wants-- OK, never mind.
谁想要-好吧，没关系。 

71
00:02:59,370 --> 00:03:00,504
Majority has been achieved.
已实现多数。 

72
00:03:00,504 --> 00:03:04,169



73
00:03:04,169 --> 00:03:06,524
How do we represent this?
我们如何代表这个？ 

74
00:03:06,524 --> 00:03:08,189
First off, let's represent the solution.
首先，让我们代表解决方案。 

75
00:03:08,189 --> 00:03:09,229



76
00:03:09,229 --> 00:03:11,699
Our solution is which items we chose, right?
我们的解决方案是选择哪些项目，对吗？ 

77
00:03:11,699 --> 00:03:23,469



78
00:03:23,469 --> 00:03:25,354
So we can phrase this as n decisions.
因此，我们可以将其表述为n个决策。 

79
00:03:25,354 --> 00:03:31,159



80
00:03:31,159 --> 00:03:33,079
Each decision is a true/false decision,
每个决定都是对/错的决定， 

81
00:03:33,080 --> 00:03:36,870
and it indicates if you take that item with you or not.
它指示您是否随身携带该物品。 

82
00:03:37,069 --> 00:03:43,431
So di says, do I take item i?
迪说，我拿物品我吗？ 

83
00:03:43,431 --> 00:03:45,199



84
00:03:45,199 --> 00:03:47,039
So now this looks more like a game.
所以现在看起来更像是一个游戏。 

85
00:03:47,039 --> 00:03:49,150
You are on a TV, there's a game show,
您在电视上，有一场游戏节目， 

86
00:03:49,150 --> 00:03:50,590
and you get asked n questions.
然后你被问到n个问题。 

87
00:03:50,590 --> 00:03:53,539
Do you want to take this item with you, yes or no?
您是否要随身携带这个物品？ 

88
00:03:53,539 --> 00:03:55,759
If you somehow manage to get items
如果您设法获得物品

89
00:03:55,759 --> 00:03:58,651
that are more than s pounds heavy, you get shot,
超过一磅的重量，您会被枪击， 

90
00:03:58,651 --> 00:04:00,359
you don't make it to the end of the game.
您不会一直到游戏结束。 

91
00:04:00,360 --> 00:04:04,506
Otherwise, when you leave the game,
否则，当您离开游戏时， 

92
00:04:04,506 --> 00:04:05,879
you make some money and the money
你赚一些钱

93
00:04:05,879 --> 00:04:09,353
that you make depends on what items you took with you.
您制作的物品取决于随身携带的物品。 

94
00:04:09,354 --> 00:04:11,020
So now this looks like the game problems
所以现在看起来像是游戏问题

95
00:04:11,020 --> 00:04:13,810
that we used to solve with graphs in that you have
我们以前用图来解决

96
00:04:13,810 --> 00:04:15,620
decisions, those decisions are moves,
决定，这些决定就是行动， 

97
00:04:15,620 --> 00:04:17,838
and they get you through a graph of states.
他们使您了解状态图。 

98
00:04:17,838 --> 00:04:19,480



99
00:04:19,480 --> 00:04:21,490
Now, let's see what's in the state.
现在，让我们看看状态如何。 

100
00:04:21,490 --> 00:04:23,064
What do we need to keep track of?
我们需要跟踪什么？ 

101
00:04:23,064 --> 00:04:25,689
First, we need to keep track of what item we're thinking about,
首先，我们需要跟踪我们正在考虑的项目， 

102
00:04:25,689 --> 00:04:26,189
right?
对？ 

103
00:04:26,189 --> 00:04:27,117



104
00:04:27,117 --> 00:04:29,500
And then there's something else that we need to keep track of.
然后还有其他需要我们跟踪的地方。 

105
00:04:29,699 --> 00:04:35,259



106
00:04:35,259 --> 00:04:37,230
AUDIENCE: How much capacity we have.
观众：我们有多少容量。 

107
00:04:37,230 --> 00:04:38,536
PROFESSOR: Yep, very good.
教授：是的，很好。 

108
00:04:38,536 --> 00:04:39,910
So the reason I need that is when
所以我需要的原因是

109
00:04:39,910 --> 00:04:42,600
I'm deciding whether I'm taking an item or not,
我正在决定是否要拿东西， 

110
00:04:42,600 --> 00:04:44,939
I want to know if I'm going to get shot or not.
我想知道我是否会被枪杀。 

111
00:04:45,139 --> 00:04:47,939
If I take too much stuff, I'm not going to make it,
如果我吃太多东西，我就不会做， 

112
00:04:47,939 --> 00:04:51,379
so I need to know if this item fits in my backpack or not.
所以我需要知道这个东西是否适合我的背包。 

113
00:04:51,379 --> 00:04:55,514
That's equivalent to knowing how much weight I have left.
这相当于知道我还剩下多少重量。 

114
00:04:55,514 --> 00:04:58,699



115
00:04:58,699 --> 00:05:00,639
So s pounds.
这么磅。 

116
00:05:00,639 --> 00:05:06,245
Let's say this is capacity, how much weight
假设这是容量，多少重量

117
00:05:06,245 --> 00:05:07,930
left in my backpack's capacity.
留在我背包里

118
00:05:07,930 --> 00:05:13,199
This is equivalent to how much weight I have accumulated,
这等于我累积了多少重量， 

119
00:05:13,199 --> 00:05:15,447
the total weight of my items.
我的物品的总重量。 

120
00:05:15,447 --> 00:05:17,932



121
00:05:17,932 --> 00:05:21,569
Weight of the items I have taken so far.
到目前为止，我已拿走的物品的重量。 

122
00:05:21,569 --> 00:05:28,430



123
00:05:28,430 --> 00:05:32,879
So the sum of the weights of the taken items.
因此，所取物品的权重之和。 

124
00:05:32,879 --> 00:05:33,504



125
00:05:33,504 --> 00:05:34,629
AUDIENCE: [INAUDIBLE] left.
观众：[听不清]。 

126
00:05:34,629 --> 00:05:36,040



127
00:05:36,040 --> 00:05:38,482
Isn't it the total minus?
是总负吗？ 

128
00:05:38,482 --> 00:05:40,240
PROFESSOR: Well, I'm saying they're equivalent,
教授：好吧，我是说它们是等效的， 

129
00:05:40,439 --> 00:05:43,250
so if you know one, you can compute the other.
因此，如果您知道一个，就可以计算另一个。 

130
00:05:43,250 --> 00:05:44,329
They're not equal.
他们不平等。 

131
00:05:44,329 --> 00:05:45,449



132
00:05:45,449 --> 00:05:48,339
Knowing one lets you know the other one,
知道一个让您知道另一个， 

133
00:05:48,339 --> 00:05:51,469
but this is more useful in terms of putting the graph together,
但这对于将图形放在一起更有用， 

134
00:05:51,470 --> 00:05:52,302
I claim.
我要求。 

135
00:05:52,302 --> 00:05:53,720



136
00:05:53,720 --> 00:05:55,435
We'll see if that is true or not as we
我们将看看这是否正确，因为

137
00:05:55,435 --> 00:05:56,685
try to put the graph together.
尝试将图形放在一起。 

138
00:05:56,685 --> 00:05:58,000



139
00:05:58,000 --> 00:05:58,970
So what's a node?
那么什么是节点？ 

140
00:05:58,970 --> 00:05:59,595
What's an edge?
有什么优势？ 

141
00:05:59,595 --> 00:06:02,170



142
00:06:02,170 --> 00:06:10,040
AUDIENCE: An edge is putting in one more item,
听众：一项优势正在增加一项， 

143
00:06:10,040 --> 00:06:11,665
and a node is a state.
节点就是状态

144
00:06:11,665 --> 00:06:17,040



145
00:06:17,040 --> 00:06:21,129
PROFESSOR: So what the weight going to be on an edge?
教授：那么权重将是什么呢？ 

146
00:06:21,129 --> 00:06:22,779
If the edge means I'm taking an item,
如果边缘表示我要拿东西， 

147
00:06:22,779 --> 00:06:26,019
then the weight is going to be what?
那么重量将是什么？ 

148
00:06:26,019 --> 00:06:28,319
AUDIENCE: The weight of the item you're adding.
观众：您要添加的商品的重量。 

149
00:06:28,319 --> 00:06:31,099



150
00:06:31,100 --> 00:06:33,410
AUDIENCE: The earning associated with that.
听众：与之相关的收入。 

151
00:06:33,410 --> 00:06:34,670
PROFESSOR: Yeah.
教授：是的。 

152
00:06:34,670 --> 00:06:37,569
I like this better because in the end,
我更喜欢这个，因为最后

153
00:06:37,569 --> 00:06:40,459
my goal is to maximize earnings, right?
我的目标是使收入最大化，对吗？ 

154
00:06:40,459 --> 00:06:44,029
And I'm going to feed my graph to a shortest path algorithm.
我将把我的图形输入最短路径算法。 

155
00:06:44,029 --> 00:06:47,359
Maximize earnings, minimize path weight.
最大化收益，最小化路径权重。 

156
00:06:47,360 --> 00:06:49,490
They're the same issue, flip sign.
他们是同样的问题，翻转迹象。 

157
00:06:49,490 --> 00:06:57,043
So I'm going to say this is the value of the item almost.
所以我要说的是这几乎是物品的价值。 

158
00:06:57,043 --> 00:06:57,959
Does this work or not?
这行得通吗？ 

159
00:06:57,959 --> 00:07:00,060



160
00:07:00,060 --> 00:07:01,290
Negative value of the item.
物品的负值。 

161
00:07:01,290 --> 00:07:03,939
I have to flip the sign to turn it from a maximization problem
我必须翻转符号以使其摆脱最大化问题

162
00:07:04,139 --> 00:07:06,089
to a minimization problem.
最小化问题。 

163
00:07:06,089 --> 00:07:10,019
So shortest path will give me the shortest path.
所以最短的路径会给我最短的路径。 

164
00:07:10,019 --> 00:07:12,579
That's going to correspond to making the least
这将相当于使最少

165
00:07:12,579 --> 00:07:15,149
amount of money if I don't add this minus sign.
如果我不加这个减号的话

166
00:07:15,149 --> 00:07:18,279



167
00:07:18,279 --> 00:07:19,447
So what's a node?
那么什么是节点？ 

168
00:07:19,447 --> 00:07:24,029



169
00:07:24,029 --> 00:07:26,161
AUDIENCE: Is it a unique set of items?
听众：这是一套独特的物品吗？ 

170
00:07:26,161 --> 00:07:26,870
PROFESSOR: Sorry?
教授：对不起？ 

171
00:07:26,870 --> 00:07:28,240
AUDIENCE: A unique set of items.
听众：一组独特的物品。 

172
00:07:28,240 --> 00:07:28,622
PROFESSOR: OK.
教授：好的。 

173
00:07:28,822 --> 00:07:33,539
So the state in a node is going to have
因此，节点中的状态将具有

174
00:07:33,540 --> 00:07:37,012
i, which is the item that I'm looking at, because this way,
我，这是我正在查看的项目，因为这样， 

175
00:07:37,012 --> 00:07:38,720
I'm going to have one node for each item.
我将为每个项目有一个节点。 

176
00:07:38,720 --> 00:07:45,329



177
00:07:45,529 --> 00:07:48,899
And what else did I say I need to keep track of?
我还说我还需要跟踪什么？ 

178
00:07:48,899 --> 00:07:50,843



179
00:07:50,843 --> 00:07:52,790
AUDIENCE: The weight of the taken items.
听众：所取物品的重量。 

180
00:07:52,790 --> 00:07:53,415
PROFESSOR: Yep.
教授：是的。 

181
00:07:53,415 --> 00:08:01,240



182
00:08:01,240 --> 00:08:02,910
Weight of taken.
服用重量。 

183
00:08:02,910 --> 00:08:08,360



184
00:08:08,360 --> 00:08:10,379
So this is sort of like the gas problem
所以这有点像煤气问题

185
00:08:10,379 --> 00:08:12,639
where you have to keep track of how much gas you have
您必须在哪里跟踪有多少汽油

186
00:08:12,639 --> 00:08:15,089
as well as where you are on the map.
以及您在地图上的位置。 

187
00:08:15,089 --> 00:08:17,139
Sorry if it brings bad memories.
对不起，如果它带来不好的回忆。 

188
00:08:17,139 --> 00:08:20,189
Let's talk about an example so that we can draw a graph for it
让我们谈一个例子，以便我们可以为其绘制图形

189
00:08:20,189 --> 00:08:22,829
and see what things look like.
看看是什么样子

190
00:08:22,829 --> 00:08:27,699
So say we have three items, and say our backpack
所以说我们有三个项目，然后说我们的背包

191
00:08:27,699 --> 00:08:28,990
has five pounds.
有五磅。 

192
00:08:28,990 --> 00:08:34,250



193
00:08:34,250 --> 00:08:41,110
And my three items are a golden statue,
我的三个物品是金色雕像

194
00:08:41,110 --> 00:08:44,884
value $10, weight, four pounds.
价值$ 10，重量，四磅。 

195
00:08:44,884 --> 00:08:47,960



196
00:08:47,960 --> 00:08:50,884
These are 1800 dollars when money actually
这些钱实际是1800美元

197
00:08:50,884 --> 00:08:52,009
used to be worth something.
曾经是值得的。 

198
00:08:52,009 --> 00:08:55,659



199
00:08:55,659 --> 00:09:02,370
Crystal ball, you can sell this for $4,
水晶球，您可以以4美元的价格将其出售， 

200
00:09:02,370 --> 00:09:08,808
and it weighs two pounds, and someone in the previous section
它重两磅，上一节中有人

201
00:09:08,808 --> 00:09:10,350
wanted a fountain pen, so we're going
需要一支钢笔，所以我们要去

202
00:09:10,350 --> 00:09:16,889
to use a fountain pen that's worth $7.
使用价值7美元的钢笔。 

203
00:09:16,889 --> 00:09:18,179



204
00:09:18,179 --> 00:09:20,250
Culture is worth a lot of money, right?
文化值得很多钱，对不对？ 

205
00:09:20,250 --> 00:09:22,669
And weighs three pounds.
并重三磅。 

206
00:09:22,669 --> 00:09:24,169
Really ancient fountain pen.
真正古老的钢笔。 

207
00:09:24,169 --> 00:09:25,176



208
00:09:25,177 --> 00:09:26,759
I don't know how people wrote with it.
我不知道人们是怎么写的。 

209
00:09:26,759 --> 00:09:28,580



210
00:09:28,580 --> 00:09:30,450
So how do we draw the graph for this?
那么我们如何为此绘制图形呢？ 

211
00:09:30,450 --> 00:09:34,690



212
00:09:34,690 --> 00:09:41,250
AUDIENCE: We'd make a tree where each level the tree
听众：我们会制作一棵树，每层树

213
00:09:41,250 --> 00:09:45,134
is take item i, or don't take item i.
是接受项目i，还是不接受项目i。 

214
00:09:45,134 --> 00:09:47,034
Make a big binary tree.
制作一棵大二叉树。 

215
00:09:47,034 --> 00:09:47,985
Does that make sense?
那有意义吗？ 

216
00:09:47,985 --> 00:09:51,440



217
00:09:51,440 --> 00:09:54,200
PROFESSOR: So if each level of the tree
教授：因此，如果树的每个级别

218
00:09:54,200 --> 00:09:55,896
says whether I'm taking an item or not,
说我是否要带东西， 

219
00:09:56,096 --> 00:09:57,929
and then I have two descendants, then that's
然后我有两个后代，那就是

220
00:09:57,929 --> 00:09:59,544
going to be 2 to the number of items.
数量将变为2。 

221
00:09:59,544 --> 00:10:00,346



222
00:10:00,346 --> 00:10:01,720
So that's going to be exponential
所以这将是指数

223
00:10:01,720 --> 00:10:03,460
in the number of items, whereas we're
在项目数量上，而我们

224
00:10:03,460 --> 00:10:07,240
going to end up in a solution where the running time is
最终将成为运行时间为

225
00:10:07,240 --> 00:10:08,879
proportional to the number of items.
与项目数量成正比。 

226
00:10:08,879 --> 00:10:12,535



227
00:10:12,535 --> 00:10:13,909
AUDIENCE: [INAUDIBLE].
听众：[听不清]。 

228
00:10:13,909 --> 00:10:17,079
PROFESSOR: I mean, it makes sense in some cases,
教授：我的意思是，在某些情况下， 

229
00:10:17,080 --> 00:10:19,079
if you have fractional costs or something.
如果您有小额费用或其他费用。 

230
00:10:19,279 --> 00:10:21,449
By the way, all these weights are integers.
顺便说一下，所有这些权重都是整数。 

231
00:10:21,450 --> 00:10:22,479
Sorry I didn't mention that.
抱歉，我没有提到。 

232
00:10:22,679 --> 00:10:30,829



233
00:10:30,830 --> 00:10:31,360
My bad.
我的错。 

234
00:10:31,360 --> 00:10:34,889



235
00:10:34,889 --> 00:10:38,159
But I like the idea of having some sort of levels based
但是我喜欢基于某种程度的关卡

236
00:10:38,159 --> 00:10:45,439
on items, so let's say I'm going to have a starting node,
在项目上，所以假设我要有一个起始节点， 

237
00:10:45,440 --> 00:10:48,099
and then I'm going to have some sort of layer for item one,
然后我将为项目1设置某种层， 

238
00:10:48,299 --> 00:10:51,625
some sort of layer for item two, and some sort of layer
项目二的某种层，以及某种层

239
00:10:51,625 --> 00:10:57,509
for item three, some sort of vertical layer.
对于第三项，某种垂直层。 

240
00:10:57,509 --> 00:10:59,009
How many nodes do I have in a layer?
一层中有几个节点？ 

241
00:10:59,009 --> 00:11:02,076



242
00:11:02,076 --> 00:11:04,110
One node for each possible weight
每个可能的权重一个节点

243
00:11:04,110 --> 00:11:07,349
because I promised that in a node, I keep track of the item
因为我答应在一个节点中跟踪该项目

244
00:11:07,549 --> 00:11:10,679
that I'm considering and the weight of the items I've
我正在考虑的东西以及我已经放置的物品的重量

245
00:11:10,679 --> 00:11:11,489
taken so far.
到目前为止。 

246
00:11:11,490 --> 00:11:12,500



247
00:11:12,500 --> 00:11:14,320
How many possible weights do I have here?
我在这里有多少个砝码？ 

248
00:11:14,320 --> 00:11:19,897



249
00:11:19,897 --> 00:11:20,695
AUDIENCE: Three weights.
听众：三重。 

250
00:11:20,895 --> 00:11:22,599



251
00:11:22,600 --> 00:11:25,599
PROFESSOR: So my backpack holds five pounds, so what
教授：所以我的背包重五磅，所以

252
00:11:25,799 --> 00:11:27,250
are the possible sums I can get?
我可以得到的可能金额是多少？ 

253
00:11:27,250 --> 00:11:27,750
How many?
多少？ 

254
00:11:27,750 --> 00:11:31,809



255
00:11:31,809 --> 00:11:32,989
AUDIENCE: 4, 2, 3, 5.
观众：4、2、3、5。 

256
00:11:32,990 --> 00:11:34,350



257
00:11:34,350 --> 00:11:36,370
PROFESSOR: So far, I heard 2 3, 4, 5, 6.
教授：到目前为止，我听到了2 3、4、5、6。 

258
00:11:36,370 --> 00:11:37,669
Who wants to bid more?
谁想出价更高？ 

259
00:11:37,669 --> 00:11:39,799



260
00:11:39,799 --> 00:11:40,929
AUDIENCE: Not more than 6.
听众：不超过6。 

261
00:11:40,929 --> 00:11:42,399



262
00:11:42,399 --> 00:11:43,940
PROFESSOR: So the answer is 6, right?
教授：答案是6，对吗？ 

263
00:11:43,940 --> 00:11:47,230
The possible weights are from 0, which is an empty knapsack,
可能的权重从0开始，这是一个空背包， 

264
00:11:47,230 --> 00:11:51,480
until weight 5, which is a full knapsack.
直到重量5，这是一个完整的背包。 

265
00:11:51,480 --> 00:11:52,750



266
00:11:52,750 --> 00:11:59,409
So weight 0, 1, 2, 3, 4, 5, 6, and I'm
所以体重0、1、2、3、4、5、6，我

267
00:11:59,409 --> 00:12:01,091
going to start drawing the nodes.
开始绘制节点。 

268
00:12:01,091 --> 00:12:03,480



269
00:12:03,480 --> 00:12:04,938
AUDIENCE: You could have weight 10.
听众：您的体重可能为10。 

270
00:12:04,938 --> 00:12:07,745



271
00:12:07,745 --> 00:12:09,370
PROFESSOR: We're never going to fill up
教授：我们永远不会填补

272
00:12:09,370 --> 00:12:11,230
a knapsack with more than 5.
一个背包超过5个。 

273
00:12:11,230 --> 00:12:13,105
Otherwise, we're going to die.
否则，我们就要死了。 

274
00:12:13,105 --> 00:12:14,840
AUDIENCE: Why do we have 6, then?
听众：那么为什么我们有6个？ 

275
00:12:14,840 --> 00:12:16,720
PROFESSOR: Because I can't thank.
教授：因为我不能谢谢。 

276
00:12:16,720 --> 00:12:17,720



277
00:12:17,720 --> 00:12:18,220
Thank you.
谢谢。 

278
00:12:18,220 --> 00:12:20,490



279
00:12:20,490 --> 00:12:23,360
So this node, the first node.
所以这个节点，第一个节点。 

280
00:12:23,360 --> 00:12:25,044
Weight in the backpack, 0.
背包重量为0。 

281
00:12:25,044 --> 00:12:26,500



282
00:12:26,500 --> 00:12:28,320
We're looking at item one.
我们正在寻找第一项。 

283
00:12:28,320 --> 00:12:29,820
It's connected to the starting node.
它已连接到起始节点。 

284
00:12:29,820 --> 00:12:31,709



285
00:12:31,909 --> 00:12:33,579
What outgoing edges do I have?
我有哪些外向边缘？ 

286
00:12:33,580 --> 00:12:34,859



287
00:12:35,059 --> 00:12:36,439
What do I do with item one?
我如何处理第一个项目？ 

288
00:12:36,440 --> 00:12:37,709
I can take it or not take it.
我可以接受还是不接受。 

289
00:12:37,909 --> 00:12:47,379



290
00:12:47,379 --> 00:12:49,754
AUDIENCE: You connect the edges 4, 2, 3.
听众：连接边缘4、2、3。 

291
00:12:49,754 --> 00:12:53,032



292
00:12:53,232 --> 00:12:54,899
Am I answering a different question?
我在回答另一个问题吗？ 

293
00:12:54,899 --> 00:12:57,190
AUDIENCE: If it's item one, shouldn't it have a weight?
观众：如果是第一项，它不应该有重量吗？ 

294
00:12:57,190 --> 00:12:59,440
PROFESSOR: So those have two numbers in them, i and j.
教授：所以它们中有两个数字，即i和j。 

295
00:12:59,440 --> 00:13:00,089



296
00:13:00,289 --> 00:13:00,789
Sorry.
抱歉。 

297
00:13:00,789 --> 00:13:03,059
They're in the wrong order here.
他们在这里的顺序错误。 

298
00:13:03,059 --> 00:13:03,899
1, 0.
 1，0。 

299
00:13:03,899 --> 00:13:05,079
So I'm looking at item one.
所以我在看第一个项目。 

300
00:13:05,080 --> 00:13:07,181
So far, I have zero pounds in my backpack.
到目前为止，我的背包中的重量为零。 

301
00:13:07,381 --> 00:13:09,839
Looking at item two with zero pounds, looking at item three
看着零磅的第二项，看着第三项

302
00:13:09,840 --> 00:13:10,609
with zero pounds.
零磅。 

303
00:13:10,809 --> 00:13:12,039



304
00:13:12,039 --> 00:13:15,019
Looking at item one with one pound in my backpack,
看着背包里有一磅的物品一， 

305
00:13:15,019 --> 00:13:17,848
item two with one pound, item three with one pound,
第2项重1磅，第3项重1磅， 

306
00:13:17,849 --> 00:13:18,439
so on and so forth.
等等等等。 

307
00:13:18,639 --> 00:13:26,759



308
00:13:26,759 --> 00:13:29,120
So if I'm looking at item one, and I
所以，如果我正在看第一个项目，我

309
00:13:29,120 --> 00:13:33,440
have zero pounds in my backpack so far, what happens if I don't
到目前为止，背包中的重量为零磅，如果我没有，该怎么办

310
00:13:33,440 --> 00:13:34,250
take item one?
拿第一项？ 

311
00:13:34,250 --> 00:13:35,210
Where do I end up?
我到哪里去？ 

312
00:13:35,210 --> 00:13:36,425



313
00:13:36,625 --> 00:13:37,254
AUDIENCE: 2, 0.
观众：2、0。 

314
00:13:37,254 --> 00:13:37,719
PROFESSOR: Yeah.
教授：是的。 

315
00:13:37,919 --> 00:13:40,159
So I'm looking at item two after I'm done deciding,
所以我决定后要看第二项， 

316
00:13:40,159 --> 00:13:43,159
what do I do with item one, and if I don't take item one,
我该如何处理第一项，如果我不参加第一项， 

317
00:13:43,159 --> 00:13:46,159
then I'm not going to have anything in my backpack.
那我的背包里什么都不会了。 

318
00:13:46,159 --> 00:13:52,240
So this edge corresponds to we don't just take one.
因此，这一优势对应于我们不只是采取一个。 

319
00:13:52,240 --> 00:13:53,730
What if I want to take item one?
如果我想参加第一项怎么办？ 

320
00:13:53,730 --> 00:13:54,590
Where do I land?
我在哪里着陆？ 

321
00:13:54,590 --> 00:13:56,377



322
00:13:56,577 --> 00:13:58,569
AUDIENCE: 2, 4.
观众：2、4。 

323
00:13:58,570 --> 00:13:59,700
PROFESSOR: All right.
教授：好的。 

324
00:13:59,700 --> 00:14:00,820
2, 3.
 2、3 

325
00:14:00,820 --> 00:14:01,229
2, 4.
 2、4 

326
00:14:01,429 --> 00:14:04,000



327
00:14:04,000 --> 00:14:06,610
So if I did take item one, then I
因此，如果我确实接受了第一项，那么我

328
00:14:06,610 --> 00:14:08,490
had zero pounds in my backpack before.
以前我的背包零磅

329
00:14:08,490 --> 00:14:12,350
Now I have four pounds, and I'm still considering item two.
现在我有4磅，而我仍在考虑第二项。 

330
00:14:12,350 --> 00:14:13,490
What about edge weights?
边缘权重呢？ 

331
00:14:13,490 --> 00:14:17,779



332
00:14:17,779 --> 00:14:19,939
What's the weight of the edge that
边缘的重量是多少

333
00:14:19,940 --> 00:14:21,080
says I don't take item one?
说我不服用第一项？ 

334
00:14:21,080 --> 00:14:24,663
What's the weight of the edge that says I do take item one?
说我要拿第一件东西的边缘的重量是多少？ 

335
00:14:24,663 --> 00:14:25,580
AUDIENCE: [INAUDIBLE].
听众：[听不清]。 

336
00:14:25,580 --> 00:14:28,298



337
00:14:28,298 --> 00:14:29,215
AUDIENCE: Minus 10.
听众：减10。 

338
00:14:29,215 --> 00:14:30,090
PROFESSOR: All right.
教授：好的。 

339
00:14:30,090 --> 00:14:31,440



340
00:14:31,440 --> 00:14:33,089
0 and minus 10.
 0到10。 

341
00:14:33,289 --> 00:14:36,009
That minus lets us get the shortest path.
减号使我们得到最短的路径。 

342
00:14:36,009 --> 00:14:37,360
Now, suppose I'm in 2, 0.
现在，假设我处于2、0。 

343
00:14:37,360 --> 00:14:38,649
What are the outgoing edges?
什么是传出边缘？ 

344
00:14:38,649 --> 00:14:41,813



345
00:14:41,813 --> 00:14:48,756
AUDIENCE: It's the same as making a giant binary tree,
听众：就像制作一棵巨大的二叉树一样， 

346
00:14:48,756 --> 00:14:49,256
right?
对？ 

347
00:14:49,256 --> 00:14:55,089



348
00:14:55,090 --> 00:15:01,100
PROFESSOR: It's not going to be a tree because I
教授：那不是一棵树，因为我

349
00:15:01,100 --> 00:15:03,370
can have multiple paths from a root to some node.
从根到某个节点可以有多个路径。 

350
00:15:03,370 --> 00:15:05,998



351
00:15:05,998 --> 00:15:09,740
AUDIENCE: But this looks like it's taking the same complexity
听众：但这看起来就像是复杂的事情

352
00:15:09,740 --> 00:15:13,548
as building a tree if you were to carefully build the tree so
就像建造一棵树，如果您要仔细地建造树， 

353
00:15:13,548 --> 00:15:15,927
that you don't have unfeasible solutions on the tree.
您在树上没有不可行的解决方案。 

354
00:15:15,927 --> 00:15:19,283



355
00:15:19,283 --> 00:15:21,700
PROFESSOR: Then you're actually doing dynamic programming.
教授：那么您实际上是在进行动态编程。 

356
00:15:21,700 --> 00:15:23,783
You're not building the tree if you're doing that.
如果这样做，您就没有在构建树。 

357
00:15:23,783 --> 00:15:25,546



358
00:15:25,746 --> 00:15:27,079
You're still converging to this.
您仍在收敛。 

359
00:15:27,080 --> 00:15:28,330



360
00:15:28,330 --> 00:15:30,950
You're probably thinking this and you said binary
你可能在想这个，你说二进制

361
00:15:30,950 --> 00:15:33,186
decision tree, or at least that's what I understood.
决策树，或者至少这就是我的理解。 

362
00:15:33,386 --> 00:15:35,219
You're probably thinking of the right thing.
您可能正在考虑正确的事情。 

363
00:15:35,220 --> 00:15:38,450



364
00:15:38,450 --> 00:15:41,950
We can see if we're thinking the same thing when we end up
结束时我们可以看看是否在想同样的事情

365
00:15:41,950 --> 00:15:43,600
looking at the running time.
看运行时间。 

366
00:15:43,600 --> 00:15:44,509
Yes?
是？ 

367
00:15:44,509 --> 00:15:49,110
AUDIENCE: The goal here is to have the most valuable items
观众：这里的目标是拥有最有价值的物品

368
00:15:49,110 --> 00:15:52,274
possible in the bag in terms of money?
可能在钱袋上？ 

369
00:15:52,274 --> 00:15:52,940
PROFESSOR: Yeah.
教授：是的。 

370
00:15:52,940 --> 00:15:58,729
PROFESSOR: So the negative 10 weight
教授：那么负10权重

371
00:15:58,929 --> 00:16:02,389
that you have there was because that item was $10.
那是因为该物品价值10美元。 

372
00:16:02,389 --> 00:16:03,208
PROFESSOR: Yep.
教授：是的。 

373
00:16:03,208 --> 00:16:05,750
And in the end, we're going to give the graph to the shortest
最后，我们将使图形最短

374
00:16:05,750 --> 00:16:06,970
path algorithm.
路径算法。 

375
00:16:06,970 --> 00:16:09,580
So yes, speaking of the goal, what's the answer here,
是的，谈到目标，这里的答案是什么， 

376
00:16:09,580 --> 00:16:09,998
by the way?
顺便说说？ 

377
00:16:10,198 --> 00:16:10,740
AUDIENCE: 11.
听众：11。 

378
00:16:10,740 --> 00:16:11,596



379
00:16:11,596 --> 00:16:12,179
PROFESSOR: 11.
教授：11。 

380
00:16:12,179 --> 00:16:13,259
How do I get 11?
我如何获得11？ 

381
00:16:13,259 --> 00:16:15,183



382
00:16:15,183 --> 00:16:16,850
AUDIENCE: By getting the last two items.
听众：获得最后两项。 

383
00:16:16,850 --> 00:16:18,600
PROFESSOR: So I take the ball and the pen
教授：所以我拿球和笔

384
00:16:18,600 --> 00:16:21,615
and I get 11, right?
我得到11，对吗？ 

385
00:16:21,615 --> 00:16:24,216



386
00:16:24,216 --> 00:16:25,299
Everyone on the same page?
每个人都在同一页面上吗？ 

387
00:16:25,299 --> 00:16:28,459



388
00:16:28,460 --> 00:16:30,480
So I'm at item two.
所以我在第二项。 

389
00:16:30,480 --> 00:16:32,029
I have zero pounds in my backpack.
我的背包零磅。 

390
00:16:32,029 --> 00:16:33,587
What are my outgoing edges?
我的外向优势是什么？ 

391
00:16:33,587 --> 00:16:36,860
AUDIENCE: To 3, 0 and to 3, 2.
听众：分别为3，0和3，2。 

392
00:16:36,860 --> 00:16:37,955



393
00:16:38,155 --> 00:16:39,169
Wait, sorry.
等一下对不起

394
00:16:39,169 --> 00:16:40,099
That's the third item.
那是第三项。 

395
00:16:40,100 --> 00:16:41,144



396
00:16:41,144 --> 00:16:42,269
PROFESSOR: No, second item.
教授：不，第二项。 

397
00:16:42,269 --> 00:16:42,769
You're good.
你很厉害。 

398
00:16:42,769 --> 00:16:44,720



399
00:16:44,720 --> 00:16:48,336
AUDIENCE: Shouldn't it be 3, 3 because the third item
听众：不应该是3、3，因为第三项

400
00:16:48,336 --> 00:16:49,269
has three pounds?
有三磅？ 

401
00:16:49,269 --> 00:16:51,269
PROFESSOR: I said I'm looking at the second item
教授：我说我正在看第二项

402
00:16:51,269 --> 00:16:53,079
and then I'm deciding where I'm going.
然后我决定要去哪里。 

403
00:16:53,080 --> 00:16:54,720
So this graph has a problem in that
所以这个图有一个问题

404
00:16:54,720 --> 00:16:56,570
when I get to the third item, what do I do?
当我转到第三项时，该怎么办？ 

405
00:16:56,570 --> 00:17:00,580
So I need one more layer here, which means that I'm done.
因此，我在这里还需要一层，这意味着我已经完成。 

406
00:17:00,580 --> 00:17:04,482
AUDIENCE: I was saying that it's the outgoing edge from 2, 0,
听众：我是说这是2、0的输出边缘， 

407
00:17:04,482 --> 00:17:06,409
it's the weight of the taken item,
这是所取物品的重量， 

408
00:17:06,410 --> 00:17:09,720
so if you decide to take the third item,
因此，如果您决定采取第三项， 

409
00:17:09,720 --> 00:17:13,361
shouldn't the outgoing edge go to 3, 3, not 3, 2?
传出的边不应该转到3、3，而不是3、2吗？ 

410
00:17:13,361 --> 00:17:15,618
PROFESSOR: But when I'm at layer two,
教授：但是当我在第二层时， 

411
00:17:15,818 --> 00:17:17,763
I'm only looking at item two.
我只看第二项。 

412
00:17:17,763 --> 00:17:19,429
So I'm looking at the items in sequence.
因此，我按顺序查看这些项目。 

413
00:17:19,430 --> 00:17:22,150
First I have to decide, am I taking item one?
首先，我必须决定，我要服用第一个吗？ 

414
00:17:22,150 --> 00:17:24,859
Then I decide, am I taking item two, and then I'm deciding,
然后我决定，我是否要考虑第二项，然后我决定

415
00:17:25,059 --> 00:17:26,690
am I taking item three?
我要服用第三项吗？ 

416
00:17:26,690 --> 00:17:28,158
While I'm here, I don't see item three.
我在这里的时候，我没有看到第三项。 

417
00:17:28,358 --> 00:17:29,720
I only see item two.
我只看到第二项。 

418
00:17:29,720 --> 00:17:32,564
AUDIENCE: Aren't those weights on the left side, though?
听众：那些重量不是在左侧吗？ 

419
00:17:32,564 --> 00:17:33,230
PROFESSOR: Yeah.
教授：是的。 

420
00:17:33,230 --> 00:17:34,490
These are backpack weights.
这些是背包的重量。 

421
00:17:34,490 --> 00:17:38,390



422
00:17:38,390 --> 00:17:42,714
So down here, these are pounds and these are items.
所以在这里，这些是磅，这些是物品。 

423
00:17:42,914 --> 00:17:50,543



424
00:17:50,544 --> 00:17:51,960
What are the weights on the edges?
边缘的重量是多少？ 

425
00:17:51,960 --> 00:17:54,355



426
00:17:54,355 --> 00:17:55,791
0 and negative 1.
 0和负1。 

427
00:17:55,791 --> 00:17:57,976



428
00:17:57,977 --> 00:17:58,359
PROFESSOR: OK.
教授：好的。 

429
00:17:58,559 --> 00:18:00,589



430
00:18:00,589 --> 00:18:02,389
How about this other node, 2, 4?
这个另一个节点2、4呢？ 

431
00:18:02,390 --> 00:18:04,140
What are the edges coming out of it.
有什么优势呢？ 

432
00:18:04,140 --> 00:18:06,565



433
00:18:06,565 --> 00:18:07,535
AUDIENCE: 2, 0.
观众：2、0。 

434
00:18:07,535 --> 00:18:09,274



435
00:18:09,474 --> 00:18:10,444
AUDIENCE: 3, 4.
观众：3、4。 

436
00:18:10,444 --> 00:18:13,275



437
00:18:13,276 --> 00:18:15,650
PROFESSOR: So if I decide I'm not going to take item two,
教授：所以，如果我决定不参加第二项， 

438
00:18:15,650 --> 00:18:18,390
but I already have four pounds in my backpack,
但是我的背包已经有四磅了

439
00:18:18,390 --> 00:18:22,129
I'm still going to end up with four pounds in my backpack,
我仍然要背着四磅的背包， 

440
00:18:22,329 --> 00:18:24,519
and I don't get anything out of it.
而且我什么都没有。 

441
00:18:24,519 --> 00:18:25,019
And?
和？ 

442
00:18:25,019 --> 00:18:26,339



443
00:18:26,339 --> 00:18:27,659
AUDIENCE: That's it.
听众：就是这样。 

444
00:18:27,660 --> 00:18:29,042
PROFESSOR: And that's it, because if I
教授：就这样，因为如果我

445
00:18:29,242 --> 00:18:33,230
try to take the second item, that would put me overweight,
尝试第二项，那会让我超重， 

446
00:18:33,230 --> 00:18:34,849
so the edge would go out of the graph.
因此边缘将超出图表。 

447
00:18:34,849 --> 00:18:36,215
Therefore, it doesn't exist.
因此，它不存在。 

448
00:18:36,215 --> 00:18:40,041
AUDIENCE: You can remove it, and then you go back to 3, 0,
听众：您可以将其删除，然后返回到3，0， 

449
00:18:40,041 --> 00:18:41,427
right?
对？ 

450
00:18:41,428 --> 00:18:42,159
Is that not allowed?
那是不允许的吗？ 

451
00:18:42,359 --> 00:18:43,990
PROFESSOR: No, because when I'm here,
教授：不，因为当我在这里时， 

452
00:18:43,990 --> 00:18:45,160
I don't know how I got here.
我不知道怎么到这里。 

453
00:18:45,160 --> 00:18:46,669
I don't know if I had item one or not.
我不知道我是否有第一项。 

454
00:18:46,869 --> 00:18:49,139



455
00:18:49,140 --> 00:18:50,990
The benefits of doing it this way is here,
这样做的好处就在这里， 

456
00:18:50,990 --> 00:18:52,250
I'm just looking at item two.
我只是在看第二项。 

457
00:18:52,250 --> 00:18:53,789
I do not know how I got there.
我不知道我怎么到那里。 

458
00:18:53,789 --> 00:18:55,786
I do not care what I'm going to do later.
我不在乎以后要做什么。 

459
00:18:55,786 --> 00:18:57,410
I'm just looking at one item and making
我只是看一件东西而已

460
00:18:57,410 --> 00:18:58,640
one decision based on that.
一个基于此的决定。 

461
00:18:58,640 --> 00:19:01,730



462
00:19:01,730 --> 00:19:02,680
Does this make sense?
这有意义吗？ 

463
00:19:02,680 --> 00:19:04,409



464
00:19:04,609 --> 00:19:06,509
Where do I get my answer from?
我从哪里得到答案？ 

465
00:19:06,509 --> 00:19:11,430



466
00:19:11,430 --> 00:19:14,173
AUDIENCE: Can you put a final node on the right side?
听众：您可以在右侧放置最后一个节点吗？ 

467
00:19:14,173 --> 00:19:15,589
PROFESSOR: OK, so one way of doing
教授：好的，所以一种方法

468
00:19:15,589 --> 00:19:17,480
it is that I'm going to have a final note on the right side
我要在右边有最后的音符

469
00:19:17,480 --> 00:19:19,019
and connecting everything to it.
并连接所有内容。 

470
00:19:19,019 --> 00:19:21,059
AUDIENCE: Do you need the done nodes right there,
听众：您是否需要在那里完成的节点， 

471
00:19:21,059 --> 00:19:23,559
or could you have just skipped done and connected 3 to that?
还是您可以跳过完成并连接3到那个？ 

472
00:19:23,559 --> 00:19:25,519



473
00:19:25,519 --> 00:19:27,470
PROFESSOR: So I can do that, but then it's
教授：所以我可以做到，但是后来

474
00:19:27,470 --> 00:19:29,660
going to be hard to reason about edges.
很难推理边缘。 

475
00:19:29,660 --> 00:19:31,339
This makes it easier to reason about edges
这使得更容易推理边缘

476
00:19:31,539 --> 00:19:33,899
because when I'm looking at this layer,
因为当我看着这一层时

477
00:19:33,900 --> 00:19:35,629
I'm still going to have edges deciding
我仍然会决定

478
00:19:35,829 --> 00:19:37,349
whether I take item three or not.
无论我是否服用第三项。 

479
00:19:37,349 --> 00:19:39,048



480
00:19:39,048 --> 00:19:41,339
So it would be confusing to have all the edges pointing
所以让所有的边都指向会令人困惑

481
00:19:41,339 --> 00:19:43,079
to the same place.
到同一个地方。 

482
00:19:43,079 --> 00:19:45,720
I can, it's just that the graph would look more confusing.
我可以，只是该图看起来更加混乱。 

483
00:19:45,720 --> 00:19:48,640



484
00:19:48,640 --> 00:19:51,200
By the way, if I'm at 3, 2, what are the outgoing edges
顺便说一句，如果我在3、2，传出的边是什么

485
00:19:51,200 --> 00:19:51,669
from 3, 2?
从3，2？ 

486
00:19:51,869 --> 00:19:53,709



487
00:19:53,710 --> 00:19:55,480
AUDIENCE: It's just all horizontal.
听众：都是水平的。 

488
00:19:55,480 --> 00:19:57,460
You can't take anymore.
你不能再忍受了。 

489
00:19:57,460 --> 00:20:01,809
PROFESSOR: So I can be done with two pounds,
教授：所以我可以吃两磅， 

490
00:20:01,809 --> 00:20:04,069
and that means I get 0 or I can take
这意味着我得到0或我可以接受

491
00:20:04,069 --> 00:20:05,689
item three, and then where do I land?
第三项，然后我在哪里着陆？ 

492
00:20:05,690 --> 00:20:08,154



493
00:20:08,154 --> 00:20:09,141
AUDIENCE: Negative 7.
听众：负面7。 

494
00:20:09,141 --> 00:20:18,269



495
00:20:18,269 --> 00:20:20,389
PROFESSOR: Does this make sense now somewhat?
教授：这现在有些道理吗？ 

496
00:20:20,390 --> 00:20:26,564



497
00:20:26,564 --> 00:20:29,380
AUDIENCE: So what about this dynamic programming style?
听众：那么这种动态编程风格呢？ 

498
00:20:29,380 --> 00:20:30,880
PROFESSOR: We'll get there in a bit.
教授：我们待会儿到达。 

499
00:20:30,880 --> 00:20:33,639
Before, let's see what's the running time for this.
之前，让我们看看它的运行时间是多少。 

500
00:20:33,839 --> 00:20:35,779
So one way of finishing this up is
因此，完成此操作的一种方法是

501
00:20:35,779 --> 00:20:39,109
we connect everything to one destination node.
我们将所有内容都连接到一个目标节点。 

502
00:20:39,109 --> 00:20:41,969
Another way of doing it is that we connect the source nodes
另一种方法是我们连接源节点

503
00:20:41,970 --> 00:20:50,809
to everything here with edges of cost 0 and say,
对这里所有成本为0的东西说： 

504
00:20:50,809 --> 00:20:53,149
well, this is how much weight we're going to waste.
好吧，这就是我们要浪费的重量。 

505
00:20:53,150 --> 00:20:54,369



506
00:20:54,569 --> 00:20:57,338
So if my solution path goes here and then goes
所以，如果我的解决方案走到这里然后走

507
00:20:57,338 --> 00:20:58,879
somewhere through the graph, it means
在图表的某处，这意味着

508
00:20:58,880 --> 00:21:01,690
that I'm going to waste one pound of capacity,
我要浪费一磅的容量， 

509
00:21:01,690 --> 00:21:05,038
so my backpack is going to have four pounds when I'm done.
所以当我做完后，我的背包要重四磅。 

510
00:21:05,038 --> 00:21:07,354
AUDIENCE: Would it be [INAUDIBLE] or infinity?
听众：是[听不清]还是无限？ 

511
00:21:07,354 --> 00:21:08,168



512
00:21:08,368 --> 00:21:09,909
PROFESSOR: What should the weight be?
教授：体重应该是多少？ 

513
00:21:09,910 --> 00:21:10,640
Good question.
好问题。 

514
00:21:10,640 --> 00:21:12,396



515
00:21:12,596 --> 00:21:14,180
AUDIENCE: This is not possible, right?
听众：这是不可能的，对吗？ 

516
00:21:14,180 --> 00:21:15,420
To get from s to 1, 1.
从s到1，1。 

517
00:21:15,420 --> 00:21:17,519



518
00:21:17,519 --> 00:21:20,150
PROFESSOR: So I'm saying that if I get from s to 1, 1,
教授：所以我说的是，如果我从s到1， 

519
00:21:20,150 --> 00:21:22,730
this means that I'm wasting a pound.
这意味着我在浪费磅。 

520
00:21:22,730 --> 00:21:24,900
My backpack will have four pounds of stuff
我的背包里有四磅的东西

521
00:21:24,900 --> 00:21:27,240
and then one pound of capacity will go to waste.
那么一磅的容量将被浪费。 

522
00:21:27,240 --> 00:21:28,615
AUDIENCE: Isn't there another way
听众：没有别的办法了

523
00:21:28,615 --> 00:21:31,022
to waste it on the right side if you end at the top?
如果您在顶部结束，则将其浪费在右侧？ 

524
00:21:31,022 --> 00:21:32,914



525
00:21:32,914 --> 00:21:36,032
Or not at the bottom, basically.
基本上还是不在底部。 

526
00:21:36,032 --> 00:21:36,698
PROFESSOR: Yeah.
教授：是的。 

527
00:21:36,699 --> 00:21:37,264



528
00:21:37,464 --> 00:21:39,089
AUDIENCE: So you're not double counting
听众：所以您不会重复计算

529
00:21:39,089 --> 00:21:41,081
in terms of losing stuff?
在失去东西方面？ 

530
00:21:41,082 --> 00:21:43,486



531
00:21:43,486 --> 00:21:44,861
You're representing losing weight
你代表减肥

532
00:21:44,861 --> 00:21:47,325
on the left side and the right side.
在左侧和右侧。 

533
00:21:47,325 --> 00:21:49,950
PROFESSOR: Well, if I represent losing weight on the left side,
教授：好吧，如果我代表左侧减肥， 

534
00:21:49,950 --> 00:21:52,409
then the advantage is that I have a single destination node.
那么好处是我只有一个目标节点。 

535
00:21:52,609 --> 00:21:53,209
What is it?
它是什么？ 

536
00:21:53,210 --> 00:21:55,358



537
00:21:55,358 --> 00:21:56,149
AUDIENCE: That dot.
听众：那个点。 

538
00:21:56,150 --> 00:21:57,525
PROFESSOR: So this is the source.
教授：这就是来源。 

539
00:21:57,525 --> 00:21:58,169



540
00:21:58,369 --> 00:22:00,459
The destination is this guy.
目的地是这个家伙。 

541
00:22:00,460 --> 00:22:03,279
I can waste capacity here, so that
我可以在这里浪费容量，这样

542
00:22:03,279 --> 00:22:04,710
means I can say that on this side,
意思是我可以这样说

543
00:22:04,710 --> 00:22:06,789
I don't need to waste stuff.
我不需要浪费东西。 

544
00:22:06,789 --> 00:22:08,609
On this side, I need to arrive at done 5.
在这一方面，我需要完成5。 

545
00:22:08,609 --> 00:22:11,636



546
00:22:11,636 --> 00:22:14,220
That's the advantage of doing it this way, aside from the fact
这是这样做的好处，除了事实

547
00:22:14,220 --> 00:22:16,135
that it's going to map to dynamic programming.
它将映射到动态编程。 

548
00:22:16,135 --> 00:22:17,220



549
00:22:17,220 --> 00:22:18,419
There are many ways of doing it.
有很多方法可以做到这一点。 

550
00:22:18,619 --> 00:22:21,089



551
00:22:21,089 --> 00:22:23,269
I can choose to connect the source to 1, 0,
我可以选择将源连接到1、0， 

552
00:22:23,269 --> 00:22:27,420
and then look at all the paths here and choose the best one.
然后在这里查看所有路径并选择最佳路径。 

553
00:22:27,420 --> 00:22:29,210
I can connect the source to everything
我可以将源连接到一切

554
00:22:29,210 --> 00:22:31,529
here with paths of some weight, which you guys still
这里有一些重量的路径，你们仍然

555
00:22:31,529 --> 00:22:34,299
need to tell me what it is, and then I can look at the answer
需要告诉我它是什么，然后我可以看看答案

556
00:22:34,299 --> 00:22:35,149
here.
这里。 

557
00:22:35,150 --> 00:22:36,105
AUDIENCE: Cost 0.
观众：费用0。 

558
00:22:36,105 --> 00:22:36,980
PROFESSOR: Thank you.
教授：谢谢。 

559
00:22:36,980 --> 00:22:42,849



560
00:22:42,849 --> 00:22:44,730
So this is another way.
所以这是另一种方式。 

561
00:22:44,730 --> 00:22:47,710
And yet the third way would be to only connect
但是第三种方式是只连接

562
00:22:47,710 --> 00:22:50,460
the source to the first node, and then
源到第一个节点，然后

563
00:22:50,460 --> 00:22:53,380
connect all these done nodes to another node with cost 0,
将所有这些完成的节点连接到成本为0的另一个节点， 

564
00:22:53,380 --> 00:22:55,198
and this is equivalent to this.
这等效于此。 

565
00:22:55,398 --> 00:22:56,814
The reason we're doing it this way
我们这样做的原因

566
00:22:56,815 --> 00:22:58,447
is because this maps to dynamic programming.
是因为这映射到动态编程。 

567
00:22:58,647 --> 00:23:00,423



568
00:23:00,423 --> 00:23:01,132
AUDIENCE: Easier.
听众：更容易。 

569
00:23:01,132 --> 00:23:03,443



570
00:23:03,443 --> 00:23:04,109
PROFESSOR: Yeah.
教授：是的。 

571
00:23:04,109 --> 00:23:07,456
It maps closely to how the DP runs.
它与DP的运行方式密切相关。 

572
00:23:07,457 --> 00:23:10,440
AUDIENCE: I mean is it possible to do the DP such
听众：我的意思是可以这样做DP 

573
00:23:10,440 --> 00:23:12,180
that you do it the other way as well?
你也用其他方式做？ 

574
00:23:12,180 --> 00:23:13,420
PROFESSOR: Yeah.
教授：是的。 

575
00:23:13,420 --> 00:23:15,351
You can flip the DP around, too.
您也可以翻转DP。 

576
00:23:15,551 --> 00:23:17,519



577
00:23:17,519 --> 00:23:18,720
How are we doing with this?
我们如何处理呢？ 

578
00:23:18,720 --> 00:23:20,940



579
00:23:20,940 --> 00:23:23,369
So then I hope the running time analysis will go really fast.
因此，我希望运行时间分析能很快进行。 

580
00:23:23,569 --> 00:23:24,319
How many vertices?
多少个顶点？ 

581
00:23:24,319 --> 00:23:25,741



582
00:23:25,741 --> 00:23:26,879
AUDIENCE: v or three.
听众：v或3。 

583
00:23:26,880 --> 00:23:28,109
PROFESSOR: OK, so v is?
教授：好的，v是吗？ 

584
00:23:28,309 --> 00:23:29,999



585
00:23:29,999 --> 00:23:30,539
AUDIENCE: ns.
听众：ns。 

586
00:23:30,539 --> 00:23:32,849



587
00:23:32,849 --> 00:23:34,259
PROFESSOR: n layers, right?
教授：n层吧？ 

588
00:23:34,259 --> 00:23:35,329



589
00:23:35,329 --> 00:23:36,599
n plus 1 layers, actually.
 n加1层，实际上。 

590
00:23:36,599 --> 00:23:37,639



591
00:23:37,640 --> 00:23:41,121
AUDIENCE: n times weight mass.
听众：质量的n倍。 

592
00:23:41,321 --> 00:23:42,779
PROFESSOR: n times capacity, right?
教授：容量是n倍，对吗？ 

593
00:23:42,779 --> 00:23:44,740



594
00:23:44,740 --> 00:23:48,602
So it's actually n plus 1 times capacity plus 1,
所以实际上是n加1倍的容量再加上1 

595
00:23:48,602 --> 00:23:49,859
but I don't want to deal with that,
但我不想处理

596
00:23:50,059 --> 00:23:52,369
so I'm going to use order of so that I
所以我将使用的顺序

597
00:23:52,369 --> 00:23:54,049
don't have to deal with that.
不必处理。 

598
00:23:54,049 --> 00:23:56,615
How many edges going out of a vertex?
顶点有多少条边？ 

599
00:23:56,615 --> 00:24:00,315



600
00:24:00,315 --> 00:24:01,289
AUDIENCE: Two.
听众：两个。 

601
00:24:01,289 --> 00:24:02,619
PROFESSOR: Yep.
教授：是的。 

602
00:24:02,619 --> 00:24:05,525
So at most, two edges per vertex.
因此，每个顶点最多两个边缘。 

603
00:24:05,526 --> 00:24:09,669



604
00:24:09,869 --> 00:24:11,099
So how many edges total?
那么总共有多少条边？ 

605
00:24:11,099 --> 00:24:13,318



606
00:24:13,318 --> 00:24:13,859
AUDIENCE: ns.
听众：ns。 

607
00:24:13,859 --> 00:24:16,743



608
00:24:16,743 --> 00:24:19,159
PROFESSOR: What shortest path algorithm am I going to use?
教授：我要使用哪种最短路径算法？ 

609
00:24:19,160 --> 00:24:20,082



610
00:24:20,082 --> 00:24:20,839
AUDIENCE: Bellman-Ford.
听众：贝尔曼·福特。 

611
00:24:21,039 --> 00:24:22,832



612
00:24:22,833 --> 00:24:24,124
AUDIENCE: Topological sort BFS.
听众：拓扑排序BFS。 

613
00:24:24,124 --> 00:24:24,826



614
00:24:24,826 --> 00:24:26,700
PROFESSOR: I'm going to choose the second one
教授：我要选择第二个

615
00:24:26,700 --> 00:24:27,919
because it runs faster.
因为它运行速度更快。 

616
00:24:28,119 --> 00:24:32,509
So Bellman-Ford's running time is V times E.
因此，贝尔曼福特的运行时间是V乘以E。 

617
00:24:32,509 --> 00:24:36,089
If I use the DAG algorithm, that means topological sort and then
如果我使用DAG算法，则意味着拓扑排序，然后

618
00:24:36,089 --> 00:24:36,779
a DFS.
 DFS。 

619
00:24:36,779 --> 00:24:41,230
That's V plus E. So please, whenever
那是V加E。所以请随时

620
00:24:41,230 --> 00:24:44,730
you have a dynamic programming graph, this is the answer.
您有一个动态的编程图，这就是答案。 

621
00:24:44,730 --> 00:24:45,771
It's never anything else.
别无其他

622
00:24:45,771 --> 00:24:46,605
It's never Dijkstra.
从来没有Dijkstra。 

623
00:24:46,605 --> 00:24:47,710
It's never Bellman-Ford.
从来都不是贝尔曼福特。 

624
00:24:47,710 --> 00:24:48,680
It's always this.
总是这样。 

625
00:24:48,680 --> 00:24:55,670



626
00:24:55,670 --> 00:24:56,460
And this means?
这是什么意思？ 

627
00:24:56,460 --> 00:25:00,328



628
00:25:00,328 --> 00:25:00,869
AUDIENCE: ns.
听众：ns。 

629
00:25:00,869 --> 00:25:03,216



630
00:25:03,217 --> 00:25:04,599
PROFESSOR: So this is the running time
教授：这是运行时间

631
00:25:04,799 --> 00:25:05,715
of the graph solution.
图解。 

632
00:25:05,715 --> 00:25:07,750



633
00:25:07,750 --> 00:25:11,269
AUDIENCE: If you use BFS, do you need
听众：如果您使用BFS，是否需要

634
00:25:11,269 --> 00:25:14,150
to put in the dummy nodes for the edge weights?
放在虚拟节点的边缘权重？ 

635
00:25:14,150 --> 00:25:15,869



636
00:25:16,069 --> 00:25:17,264
PROFESSOR: If you use BFS.
教授：如果您使用BFS。 

637
00:25:17,265 --> 00:25:21,159



638
00:25:21,359 --> 00:25:21,899
Yes.
是。 

639
00:25:21,900 --> 00:25:24,344
So then the running time would be bigger than V plus E.
因此，运行时间将大于V加E。 

640
00:25:24,344 --> 00:25:25,009
AUDIENCE: Right.
听众：对。 

641
00:25:25,009 --> 00:25:27,829
So then the running time depends on [INAUDIBLE]
因此，运行时间取决于[音频不清晰] 

642
00:25:27,829 --> 00:25:29,460
multiply by s again?
再乘以s？ 

643
00:25:29,460 --> 00:25:31,799
PROFESSOR: This isn't doing BFS.
教授：这不是在做BFS。 

644
00:25:31,799 --> 00:25:34,049
This is doing the shortest path algorithm
这是最短路径算法

645
00:25:34,049 --> 00:25:36,569
for direct acyclic graphs.
用于直接非循环图。 

646
00:25:36,569 --> 00:25:38,000
It's the DAG shortest path.
这是DAG最短的路径。 

647
00:25:38,000 --> 00:25:38,950
AUDIENCE: Right.
听众：对。 

648
00:25:38,950 --> 00:25:40,440
PROFESSOR: Were you here before Thanksgiving?
教授：感恩节之前您来过这里吗？ 

649
00:25:40,440 --> 00:25:40,940
AUDIENCE: No
听众：否

650
00:25:40,940 --> 00:25:42,034
PROFESSOR: Right before?
教授：在吗？ 

651
00:25:42,034 --> 00:25:43,075
You missed the algorithm.
您错过了算法。 

652
00:25:43,075 --> 00:25:44,289



653
00:25:44,289 --> 00:25:46,659
It's in the Dijkstra lecture notes.
在Dijkstra的讲义中。 

654
00:25:46,660 --> 00:25:48,339
AUDIENCE: But basically, you don't
听众：但是基本上，你不会

655
00:25:48,539 --> 00:25:50,527
have to put in all the dummy nodes?
必须放入所有虚拟节点？ 

656
00:25:50,527 --> 00:25:50,909
PROFESSOR: No.
教授：不。 

657
00:25:51,109 --> 00:25:54,439
So you do a topological sort, and then
因此，您进行拓扑排序，然后

658
00:25:54,440 --> 00:25:56,059
you only consider a node once, and you
您只考虑一次节点，然后

659
00:25:56,059 --> 00:25:57,619
look at all the edges coming through it
看看穿过它的所有边缘

660
00:25:57,619 --> 00:25:59,035
and make a decision based on that.
并据此做出决定。 

661
00:25:59,036 --> 00:26:02,965



662
00:26:03,165 --> 00:26:05,289
So this is the running time, this is the algorithm,
这是运行时间，这是算法， 

663
00:26:05,289 --> 00:26:06,164
this is the solution.
这是解决方案。 

664
00:26:06,164 --> 00:26:08,274
What if we do dynamic programming instead?
如果我们改为进行动态编程怎么办？ 

665
00:26:08,275 --> 00:26:09,670



666
00:26:09,670 --> 00:26:12,359
Instead of nodes, we have sub-problems.
除了子节点，我们还有子问题。 

667
00:26:12,559 --> 00:26:15,190
A sub-problem maps to a node.
子问题映射到节点。 

668
00:26:15,190 --> 00:26:17,660
The same things that we decided about this data
我们对这些数据做出的决定相同

669
00:26:17,660 --> 00:26:20,880
that we store in a node, the same things
我们存储在节点中的相同内容

670
00:26:20,880 --> 00:26:23,659
are going to apply to the state that we have in a sub-problem.
将适用于子问题中的状态。 

671
00:26:23,859 --> 00:26:33,301



672
00:26:33,301 --> 00:26:34,509
So what are the sub-problems?
那么子问题是什么？ 

673
00:26:34,509 --> 00:26:47,785



674
00:26:47,785 --> 00:26:49,910
First up, how many sub-problems am I going to have?
首先，我将要解决几个子问题？ 

675
00:26:49,910 --> 00:26:52,784



676
00:26:52,784 --> 00:26:53,284
AUDIENCE: n.
听众： 

677
00:26:53,284 --> 00:26:55,434



678
00:26:55,634 --> 00:26:56,175
AUDIENCE: ns.
听众：ns。 

679
00:26:56,175 --> 00:26:57,869



680
00:26:57,869 --> 00:27:00,139
PROFESSOR: I just said that one sub-problem
教授：我只是说一个子问题

681
00:27:00,140 --> 00:27:02,470
will map to a vertex in the graph.
将映射到图中的顶点。 

682
00:27:02,470 --> 00:27:04,670
ns vertices, ns sub-problems, right?
 ns顶点，ns子问题，对不对？ 

683
00:27:04,670 --> 00:27:07,250



684
00:27:07,250 --> 00:27:07,970
Come on, guys.
拜托了伙计们。 

685
00:27:07,970 --> 00:27:08,659
Bear with me.
忍受我。 

686
00:27:08,859 --> 00:27:10,293
Get more cookies.
获取更多Cookie。 

687
00:27:10,294 --> 00:27:11,460
Are the cookies still there?
饼干还在吗？ 

688
00:27:11,460 --> 00:27:12,419



689
00:27:12,419 --> 00:27:13,960
Please pass them around and eat them.
请把它们传给他们吃。 

690
00:27:13,960 --> 00:27:15,410



691
00:27:15,410 --> 00:27:15,910
Yes?
是？ 

692
00:27:15,910 --> 00:27:17,851



693
00:27:18,051 --> 00:27:24,815
AUDIENCE: One sub-problem would be getting the most amount
听众：一个子问题将获得最大的收益

694
00:27:24,816 --> 00:27:28,047
of money for that little weight.
这么小的重量的钱。 

695
00:27:28,047 --> 00:27:29,940



696
00:27:29,940 --> 00:27:32,932
At one pound [INAUDIBLE], how much [INAUDIBLE].
一磅[音频不清晰]，多少[音频不清晰]。 

697
00:27:32,932 --> 00:27:34,890
PROFESSOR: I like that, so let's start writing.
教授：我喜欢，所以让我们开始写作。 

698
00:27:34,890 --> 00:27:35,900



699
00:27:35,900 --> 00:27:46,180
What is the maximum value that I can get using a certain weight?
使用一定重量可以得到的最大值是多少？ 

700
00:27:46,180 --> 00:27:53,410



701
00:27:53,410 --> 00:27:56,269
If I label the nodes indices i, j, I'm
如果我标记节点索引i，j，我就是

702
00:27:56,269 --> 00:27:58,879
also going to label the sub-problems using i, j.
也将使用i，j标记子问题。 

703
00:27:58,880 --> 00:28:03,150
So I'm going to say that sub-problem i, j
所以我要说这个子问题i，j 

704
00:28:03,150 --> 00:28:05,519
is, what's the maximum amount of money
是，最大金额是多少

705
00:28:05,519 --> 00:28:08,960
I can get by using a weight of at most j,
我最多可以使用j的权重， 

706
00:28:08,960 --> 00:28:12,909
and you said something about items,
你说了一些关于物品的事， 

707
00:28:12,909 --> 00:28:14,450
so we have to figure out which items.
所以我们必须找出哪些项目。 

708
00:28:14,450 --> 00:28:18,519



709
00:28:18,519 --> 00:28:19,019
Which items?
哪些项目？ 

710
00:28:19,019 --> 00:28:25,279



711
00:28:25,279 --> 00:28:26,389
Anyone else can help her.
任何人都可以帮助她。 

712
00:28:26,390 --> 00:28:28,130
You already did the hard work, so you
您已经做了艰苦的工作，所以您

713
00:28:28,130 --> 00:28:30,369
have most of the stuff filled in.
填满了大多数东西。 

714
00:28:30,569 --> 00:28:32,501
Feel free to jump in.
随时加入。 

715
00:28:32,501 --> 00:28:34,126
AUDIENCE: Greater than or equal to i.
听众：大于或等于i。 

716
00:28:34,126 --> 00:28:34,710
PROFESSOR: OK.
教授：好的。 

717
00:28:34,710 --> 00:28:38,200



718
00:28:38,200 --> 00:28:38,759
Sounds good.
听起来不错。 

719
00:28:38,759 --> 00:28:40,086



720
00:28:40,086 --> 00:28:42,460
We're going to number the items starting from 0 this time
这次我们将从0开始编号

721
00:28:42,460 --> 00:28:44,592
because we're going to have a dynamic programming table,
因为我们要有一个动态的编程表， 

722
00:28:44,792 --> 00:28:47,659
and that means we like zero base indexing.
这意味着我们喜欢零基索引。 

723
00:28:47,660 --> 00:28:55,159
So the items are going to be 0, 1, and 2.
因此项目将分别为0、1和2。 

724
00:28:55,359 --> 00:29:00,969
0 is the statue, 1 is the ball, and 2 is the pen.
 0是雕像，1是球，2是笔。 

725
00:29:00,970 --> 00:29:02,920



726
00:29:02,920 --> 00:29:05,460
This means we're going to look at suffixes of items.
这意味着我们将查看项目的后缀。 

727
00:29:05,460 --> 00:29:09,419
First, the empty set, no item, then only
首先是空集，没有项目，然后只有

728
00:29:09,619 --> 00:29:12,183
the pen, then the ball and the pen, and then
笔，然后是球和笔，然后

729
00:29:12,183 --> 00:29:13,599
the statue, the ball, and the pen.
雕像，球和笔。 

730
00:29:13,599 --> 00:29:16,259



731
00:29:16,259 --> 00:29:20,145
And we're also going to consider how much weight we
我们还将考虑我们有多重

732
00:29:20,145 --> 00:29:21,019
have in our backpack.
在我们的背包里。 

733
00:29:21,019 --> 00:29:24,266



734
00:29:24,266 --> 00:29:25,390
So let me write this again.
所以，让我再写一次。 

735
00:29:25,390 --> 00:29:30,879
0, 1, 2 here, and weights 0, 1, 2, 3, 4, 5, and this
 0、1、2，权重为0、1、2、3、4、5，以及此

736
00:29:31,079 --> 00:29:32,714
is going to be our DP table.
将成为我们的DP表。 

737
00:29:32,714 --> 00:29:40,746



738
00:29:40,747 --> 00:29:42,129
Now, how are we going to compute this?
现在，我们将如何计算呢？ 

739
00:29:42,329 --> 00:29:46,339



740
00:29:46,339 --> 00:29:47,779
DP of i, j is?
 i，j的DP是？ 

741
00:29:47,779 --> 00:29:56,126



742
00:29:56,126 --> 00:29:57,024
AUDIENCE: Maximum.
听众：最高。 

743
00:29:57,025 --> 00:29:58,900
PROFESSOR: All right, a maximum of something.
教授：好的，最多。 

744
00:29:58,900 --> 00:29:59,909
Good.
好。 

745
00:30:00,109 --> 00:30:01,589
Perfect way to start.
完美的开始方式。 

746
00:30:01,589 --> 00:30:03,382
How many decisions do we have?
我们有多少个决定？ 

747
00:30:03,383 --> 00:30:03,765
AUDIENCE: Two.
听众：两个。 

748
00:30:03,965 --> 00:30:04,884



749
00:30:04,884 --> 00:30:05,509
PROFESSOR: Two.
教授：两个。 

750
00:30:05,509 --> 00:30:07,779
It's the same as in the graph problem, right?
和图问题一样，对吧？ 

751
00:30:07,779 --> 00:30:10,399
Once we solve that, this should be pretty easy
一旦我们解决了，这应该很容易

752
00:30:10,400 --> 00:30:11,879
because it's really very similar.
因为它非常相似。 

753
00:30:12,079 --> 00:30:14,089
So the two decisions are, do I take item i,
所以这两个决定是，我是否接受项目i， 

754
00:30:14,089 --> 00:30:15,709
do I not take item i?
我不带物品我吗？ 

755
00:30:15,710 --> 00:30:21,528
If I don't take item i, what situation do I land in?
如果我不带物品i，我会处于什么情况？ 

756
00:30:21,528 --> 00:30:23,769



757
00:30:23,769 --> 00:30:25,960
So suppose I don't take item i.
因此，假设我不接受项目i。 

758
00:30:25,960 --> 00:30:27,633



759
00:30:27,633 --> 00:30:28,777
AUDIENCE: i plus 1.
听众：我加1。 

760
00:30:28,777 --> 00:30:29,159
PROFESSOR: OK.
教授：好的。 

761
00:30:29,359 --> 00:30:31,129



762
00:30:31,130 --> 00:30:32,170
i plus 1.
我加1。 

763
00:30:32,170 --> 00:30:36,899
So I have to make up my answer using items i plus 1
所以我必须用我加1的项目来弥补我的答案

764
00:30:37,099 --> 00:30:39,279
all the way through n minus 1, and how much weight
一直到n减1，到底有多少重量

765
00:30:39,279 --> 00:30:40,200
do they have to have?
他们必须有吗？ 

766
00:30:40,200 --> 00:30:41,500



767
00:30:41,500 --> 00:30:42,000
AUDIENCE: j.
听众：j。 

768
00:30:42,000 --> 00:30:43,039



769
00:30:43,039 --> 00:30:43,664
PROFESSOR: Yep.
教授：是的。 

770
00:30:43,664 --> 00:30:45,930



771
00:30:45,930 --> 00:30:48,729
Now suppose I do take item i.
现在假设我确实接受了项目i。 

772
00:30:48,729 --> 00:30:49,269
What happens?
怎么了？ 

773
00:30:49,269 --> 00:30:53,230



774
00:30:53,230 --> 00:30:54,730
AUDIENCE: i plus-- no, no, no.
听众：我加-不，不，不。 

775
00:30:54,730 --> 00:30:56,304



776
00:30:56,304 --> 00:30:58,220
PROFESSOR: You're thinking of the right thing.
教授：您正在思考正确的事情。 

777
00:30:58,220 --> 00:30:59,510
We're making some money, right?
我们正在赚钱，对吗？ 

778
00:30:59,510 --> 00:31:00,529



779
00:31:00,529 --> 00:31:01,329
AUDIENCE: Value i.
听众：值i。 

780
00:31:01,329 --> 00:31:02,879
PROFESSOR: Value i.
教授：值i。 

781
00:31:02,880 --> 00:31:04,680
So this is how much money we're making.
这就是我们赚多少钱。 

782
00:31:04,680 --> 00:31:05,294
Good.
好。 

783
00:31:05,494 --> 00:31:10,444
AUDIENCE: Plus dp i plus 1 j minus weight i.
听众：加上dp i加1 j减去重量i。 

784
00:31:10,444 --> 00:31:15,394



785
00:31:15,394 --> 00:31:16,309
PROFESSOR: Make sense?
教授：有道理吗？ 

786
00:31:16,309 --> 00:31:17,679



787
00:31:17,680 --> 00:31:20,460
OK Now I only have to do one more thing to make sure
好，现在我只需要再做一件事来确保

788
00:31:20,460 --> 00:31:22,509
this code doesn't crash.
此代码不会崩溃。 

789
00:31:22,509 --> 00:31:23,440
AUDIENCE: I'm sorry.
听众：对不起。 

790
00:31:23,440 --> 00:31:25,299
What's the third term for?
第三个名词是什么？ 

791
00:31:25,299 --> 00:31:26,095



792
00:31:26,095 --> 00:31:28,095
PROFESSOR: This is I'm making some money, right?
教授：这是我在赚钱，对吗？ 

793
00:31:28,095 --> 00:31:29,180



794
00:31:29,180 --> 00:31:31,450
This means I'm going to have to look at the items
这意味着我将不得不看一下这些物品

795
00:31:31,450 --> 00:31:33,930
starting from i plus 1 and i minus 1.
从我加1开始到我减1。 

796
00:31:33,930 --> 00:31:36,160
And now I took item i, so that means
现在我拿了项目i，这意味着

797
00:31:36,160 --> 00:31:38,134
I have si pounds in my backpack.
我的背包里有磅。 

798
00:31:38,134 --> 00:31:39,240



799
00:31:39,240 --> 00:31:44,210
So the remaining items must weigh j minus si pounds
因此，其余物品的重量必须为j减去si磅

800
00:31:44,210 --> 00:31:47,649
because I'm going to add the si pounds for this item,
因为我要为此商品加磅

801
00:31:47,849 --> 00:31:50,059
and in total, I'm going to have at most j pounds.
总共，我最多只能有j磅。 

802
00:31:50,059 --> 00:31:52,059



803
00:31:52,059 --> 00:31:53,674
Make some money, lose some capacity.
赚一些钱，失去一些能力。 

804
00:31:53,674 --> 00:31:56,132



805
00:31:56,132 --> 00:31:57,139
AUDIENCE: Did we [INAUDIBLE]?
听众：我们[听不清]吗？ 

806
00:31:57,339 --> 00:31:58,859



807
00:31:58,859 --> 00:31:59,484
PROFESSOR: Yep.
教授：是的。 

808
00:31:59,484 --> 00:32:00,628



809
00:32:00,628 --> 00:32:02,669
This is what happens when you move from the graph
这是当您从图表移开时发生的情况

810
00:32:02,670 --> 00:32:04,610
to dynamic programming, or you can
进行动态编程，或者您可以

811
00:32:04,810 --> 00:32:06,309
draw the graph the other way around.
反之亦然。 

812
00:32:06,309 --> 00:32:08,259



813
00:32:08,259 --> 00:32:10,624
AUDIENCE: So could you have also done plus si,
听众：所以你还可以加上si， 

814
00:32:10,624 --> 00:32:13,491
and then done something else as well?
然后再做其他事情？ 

815
00:32:13,491 --> 00:32:14,200
PROFESSOR: Sorry.
教授：对不起。 

816
00:32:14,200 --> 00:32:14,890
Plus si--
加si-- 

817
00:32:14,890 --> 00:32:16,397
AUDIENCE: If you did plus si and then you
听众：如果您加了si，那么您

818
00:32:16,597 --> 00:32:19,960
did some other check case that was different.
做了其他一些不同的检查情况。 

819
00:32:19,960 --> 00:32:22,029
PROFESSOR: Well, I do need to make a check.
教授：好，我需要检查一下。 

820
00:32:22,029 --> 00:32:22,889
AUDIENCE: Yes.
听众：是的。 

821
00:32:22,890 --> 00:32:24,244
So that's greater than or equal to 0.
因此该值大于或等于0。 

822
00:32:24,444 --> 00:32:25,351



823
00:32:25,352 --> 00:32:26,359
PROFESSOR: This thing, right?
教授：这个东西，对吗？ 

824
00:32:26,559 --> 00:32:28,475
Because otherwise, the code is going to crash.
因为否则，代码将崩溃。 

825
00:32:28,476 --> 00:32:30,369



826
00:32:30,569 --> 00:32:32,750
So j minus si is greater or equal to 0.
因此j减去si等于或大于0。 

827
00:32:32,750 --> 00:32:39,289
I think this means j is greater than or equal to si, right?
我认为这意味着j大于或等于si，对吗？ 

828
00:32:39,289 --> 00:32:40,271
AUDIENCE: Yes.
听众：是的。 

829
00:32:40,271 --> 00:32:40,855
PROFESSOR: OK.
教授：好的。 

830
00:32:40,855 --> 00:32:50,170



831
00:32:50,170 --> 00:32:52,750
At least for me, the natural order when I have the graph
至少对我来说，我有图时的自然顺序

832
00:32:52,750 --> 00:32:55,576
is to consider the moves that by making in the game.
是考虑游戏中的动作。 

833
00:32:55,576 --> 00:32:57,200
I'm answering the questions one by one.
我正在一个接一个地回答问题。 

834
00:32:57,200 --> 00:32:57,832
Do I take this item?
我要带这个东西吗？ 

835
00:32:58,032 --> 00:32:59,219
Do I not take this item?
我不带这个东西吗？ 

836
00:32:59,220 --> 00:33:01,220



837
00:33:01,220 --> 00:33:05,740
When I'm in the DP, when I make a decision,
当我在DP中时，当我做出决定时， 

838
00:33:05,740 --> 00:33:08,849
I want to have the full information on that decision.
我想要有关该决定的完整信息。 

839
00:33:08,849 --> 00:33:11,189
Whether I take the item or not depends
我是否带物品取决于

840
00:33:11,190 --> 00:33:13,759
on what would happen with the items following it.
接下来的项目将会发生什么。 

841
00:33:13,759 --> 00:33:15,059



842
00:33:15,059 --> 00:33:16,609
Representing it this way allows me
用这种方式代表我

843
00:33:16,609 --> 00:33:17,959
to make the decision right here.
在这里做出决定。 

844
00:33:17,960 --> 00:33:19,684



845
00:33:19,684 --> 00:33:21,893
AUDIENCE: If we'd done prefixes rather than suffixes,
听众：如果我们要使用前缀而不是后缀， 

846
00:33:21,893 --> 00:33:23,039
we could have done it the same.
我们本来可以做到的。 

847
00:33:23,039 --> 00:33:25,373
PROFESSOR: It would have been exactly the same as there.
教授：那应该和那里完全一样。 

848
00:33:25,373 --> 00:33:28,789



849
00:33:28,789 --> 00:33:31,180
So we taught dynamic programming over many years,
因此，我们教授了很多年的动态编程， 

850
00:33:31,180 --> 00:33:33,380
and it turns out that people understand suffixes
事实证明人们理解后缀

851
00:33:33,380 --> 00:33:37,129
better than prefixes, and the graph format
比前缀和图形格式更好

852
00:33:37,329 --> 00:33:38,829
makes more sense that way, so that's
这样更有意义，所以

853
00:33:38,829 --> 00:33:40,019
why we're doing it this way.
为什么我们要这样做

854
00:33:40,019 --> 00:33:40,978
It's for your own sake.
是为了你自己

855
00:33:40,978 --> 00:33:42,200
Trust me.
相信我。 

856
00:33:42,200 --> 00:33:43,200
Or at least we think so.
或者至少我们是这样认为的。 

857
00:33:43,200 --> 00:33:44,631



858
00:33:44,631 --> 00:33:46,150
AUDIENCE: Where does suffix come in?
听众：后缀在哪里出现？ 

859
00:33:46,150 --> 00:33:47,603
I know what it means.
我知道那是什么意思

860
00:33:47,603 --> 00:33:49,254
PROFESSOR: These guys.
教授：这些家伙。 

861
00:33:49,454 --> 00:33:51,307
These are the sub-problems.
这些是子问题。 

862
00:33:51,307 --> 00:33:54,170
Nothing, item two, items one, two, zero, one, two,
一无所有，第二项，第一，二，零，一，二， 

863
00:33:54,170 --> 00:33:56,029
so it's a suffix of the set of items.
所以这是项目集的后缀。 

864
00:33:56,029 --> 00:33:57,381



865
00:33:57,381 --> 00:34:00,006
AUDIENCE: How come you're going backwards rather than forwards?
听众：你为什么倒退而不是前进？ 

866
00:34:00,006 --> 00:34:02,988



867
00:34:02,988 --> 00:34:05,680
It doesn't actually matter if you go backwards or forwards?
向前还是向后走都没关系吗？ 

868
00:34:05,680 --> 00:34:05,659
PROFESSOR: Yep.
教授：是的。 

869
00:34:05,859 --> 00:34:07,775
In the end, we're going to look at everything.
最后，我们将研究所有内容。 

870
00:34:07,776 --> 00:34:09,309



871
00:34:09,309 --> 00:34:10,690
So we need two things.
所以我们需要两件事。 

872
00:34:10,690 --> 00:34:16,239
We need to know where is the answer going to be,
我们需要知道答案在哪里， 

873
00:34:16,239 --> 00:34:18,690
and we need to know what are the initial conditions.
我们需要知道初始条件是什么。 

874
00:34:18,690 --> 00:34:24,449



875
00:34:24,449 --> 00:34:25,159
Actually, I lied.
其实我说谎

876
00:34:25,159 --> 00:34:26,599
We also need a topological sort.
我们还需要一种拓扑排序。 

877
00:34:26,599 --> 00:34:31,900



878
00:34:31,900 --> 00:34:33,126
So where do we want to start?
那么我们要从哪里开始呢？ 

879
00:34:33,126 --> 00:34:34,530



880
00:34:34,530 --> 00:34:35,467
AUDIENCE: First one.
听众：第一个。 

881
00:34:35,467 --> 00:34:36,309



882
00:34:36,309 --> 00:34:37,400
PROFESSOR: Where is the answer?
教授：答案在哪里？ 

883
00:34:37,599 --> 00:34:40,569



884
00:34:40,570 --> 00:34:41,661
Yes?
是？ 

885
00:34:41,860 --> 00:34:43,804
AUDIENCE: The lower right hand corner.
听众：右下角。 

886
00:34:43,804 --> 00:34:46,234
I mean, if you have all the [INAUDIBLE] nodes.
我的意思是，如果您具有所有的[音频不清晰]节点。 

887
00:34:46,235 --> 00:34:49,516
Oh, we don't have a Done column, do we?
哦，我们没有“完成”列，对吗？ 

888
00:34:49,516 --> 00:34:50,099
PROFESSOR: No.
教授：不。 

889
00:34:50,099 --> 00:34:51,940



890
00:34:51,940 --> 00:34:54,480
Well, so the answer will have considered all the items,
好吧，答案将考虑所有项目， 

891
00:34:54,480 --> 00:34:54,885
right?
对？ 

892
00:34:55,085 --> 00:34:55,759
AUDIENCE: Top left.
听众：左上方。 

893
00:34:55,760 --> 00:34:56,476
PROFESSOR: So which i?
教授：那我呢？ 

894
00:34:56,675 --> 00:34:59,304



895
00:34:59,304 --> 00:34:59,804
Almost.
几乎。 

896
00:34:59,804 --> 00:35:02,349



897
00:35:02,349 --> 00:35:04,960
So the top left corner means I looked at all the items
因此，左上角表示我查看了所有项目

898
00:35:04,960 --> 00:35:06,920
and I have an empty knapsack.
而且我有一个空的背包。 

899
00:35:06,920 --> 00:35:09,500
AUDIENCE: Oh, so the max of all of the first column.
听众：哦，所以第一列的最大值。 

900
00:35:09,699 --> 00:35:12,240



901
00:35:12,240 --> 00:35:13,739
PROFESSOR: So the max of all columns
教授：所以所有列的最大值

902
00:35:13,739 --> 00:35:16,169
would be the answer if the weight here would be equal,
如果这里的权重相等，将是答案， 

903
00:35:16,170 --> 00:35:20,380
but I said the weight has to be smaller or equal,
但我说权重必须小于或等于

904
00:35:20,380 --> 00:35:21,719
so the answer is easier.
因此答案更容易。 

905
00:35:21,719 --> 00:35:22,760
I don't have to do a max.
我不必做最大。 

906
00:35:22,760 --> 00:35:23,440
AUDIENCE: Bottom left corner.
听众：左下角。 

907
00:35:23,639 --> 00:35:24,972
PROFESSOR: I can only look here.
教授：我只能在这里看看。 

908
00:35:24,972 --> 00:35:27,090



909
00:35:27,090 --> 00:35:33,289
So this means that I will use a weight of at most s,
因此，这意味着我将最多使用s的权重， 

910
00:35:33,289 --> 00:35:38,000
because this is s, and I will have considered items 0
因为这是s，所以我将考虑项目0 

911
00:35:38,000 --> 00:35:39,320
and larger, so all the items.
和更大的，所以所有的项目。 

912
00:35:39,320 --> 00:35:40,880



913
00:35:41,079 --> 00:35:42,255
This is where the answer is.
答案就在这里。 

914
00:35:42,255 --> 00:35:44,650



915
00:35:44,650 --> 00:35:47,769
And in general terms, that means DP of what and what?
一般而言，这意味着什么以及什么的DP？ 

916
00:35:47,969 --> 00:35:53,649



917
00:35:53,650 --> 00:35:55,338
So what's the bottom left corner?
那么左下角是什么？ 

918
00:35:55,338 --> 00:35:56,094
AUDIENCE: 0, s.
听众：0，秒。 

919
00:35:56,293 --> 00:35:58,058



920
00:35:58,059 --> 00:35:58,684
PROFESSOR: Yep.
教授：是的。 

921
00:35:58,684 --> 00:36:02,030



922
00:36:02,030 --> 00:36:06,550
AUDIENCE: Can you explain again why it needs to be DP 0, s.
听众：您能再解释一下为什么它必须是DP 0 s吗？ 

923
00:36:06,550 --> 00:36:09,039
PROFESSOR: I think it's easier to look at 0,
教授：我认为看0更容易， 

924
00:36:09,239 --> 00:36:11,475
s and see how it maps to the sub-problem,
并查看它如何映射到子问题， 

925
00:36:11,476 --> 00:36:13,599
and then convince yourself that this is the answer,
然后说服自己这就是答案， 

926
00:36:13,599 --> 00:36:14,329
so let's do that.
所以让我们这样做。 

927
00:36:14,329 --> 00:36:15,440



928
00:36:15,440 --> 00:36:18,300
DP of 0, s means i is 0, j is s.
 DP为0，s表示i为0，j为s。 

929
00:36:18,300 --> 00:36:19,302



930
00:36:19,501 --> 00:36:20,960
So this is going to tell me what is
所以这将告诉我什么是

931
00:36:20,960 --> 00:36:23,289
the maximum amount of dollars I can
我可以的最大金额

932
00:36:23,289 --> 00:36:28,000
get by using a weight of at most s-- agrees
通过使用最多s的权重获得-同意

933
00:36:28,000 --> 00:36:33,349
with the initial problem-- and using items i or greater
最初的问题-并使用项目i或更大

934
00:36:33,349 --> 00:36:37,960
than i, or 0 or more, so items 0 through n minus 1.
比i或0或更大，所以项0到n减1。 

935
00:36:37,960 --> 00:36:39,119



936
00:36:39,119 --> 00:36:40,940
These are all the items.
这些都是项目。 

937
00:36:40,940 --> 00:36:42,882
This is the maximum capacity, so this maps
这是最大容量，因此此图

938
00:36:42,882 --> 00:36:43,840
to the initial problem.
最初的问题。 

939
00:36:43,840 --> 00:36:46,190



940
00:36:46,190 --> 00:36:48,320
And that's why I did this.
这就是为什么我这样做。 

941
00:36:48,320 --> 00:36:50,230
That's why I don't have an equal sign here.
这就是为什么我在这里没有等号。 

942
00:36:50,230 --> 00:36:51,797



943
00:36:51,797 --> 00:36:53,630
AUDIENCE: And if you did have an equal sign,
听众：如果你确实有一个等号， 

944
00:36:53,630 --> 00:36:55,550
then you would be changing your sub-problems?
那你会改变你的子问题吗？ 

945
00:36:55,550 --> 00:36:57,320



946
00:36:57,320 --> 00:36:59,480
PROFESSOR: The recursion stays the same,
教授：递归保持不变， 

947
00:36:59,480 --> 00:37:02,949
but I have to look at all these to get the maximum.
但我必须仔细研究所有这些，才能获得最大的收益。 

948
00:37:02,949 --> 00:37:03,909
Someone suggested that.
有人建议。 

949
00:37:03,909 --> 00:37:05,519



950
00:37:05,519 --> 00:37:08,190
AUDIENCE: If you put an equals there,
听众：如果在那放等号， 

951
00:37:08,190 --> 00:37:11,079
you're going to have to do something to the DP such
您将不得不对DP做一些事情，例如

952
00:37:11,079 --> 00:37:14,170
that the equals actually is captivated,
平等实际上被迷住了， 

953
00:37:14,170 --> 00:37:16,130
because you can't just arbitrarily--
因为你不能随便- 

954
00:37:16,130 --> 00:37:17,471
PROFESSOR: What do you think of this?
教授：您对此有何看法？ 

955
00:37:17,670 --> 00:37:18,498



956
00:37:18,498 --> 00:37:20,789
AUDIENCE: Something there is going to change, isn't it?
听众：那里会发生变化，不是吗？ 

957
00:37:20,789 --> 00:37:21,210
PROFESSOR: No.
教授：不。 

958
00:37:21,210 --> 00:37:22,001
I think this works.
我认为这可行。 

959
00:37:22,001 --> 00:37:24,150



960
00:37:24,150 --> 00:37:26,807
This stays the same no matter what the sign is.
无论符号是什么，都保持不变。 

961
00:37:27,007 --> 00:37:28,879



962
00:37:28,880 --> 00:37:31,369
The only thing that changes is where is the answer
唯一改变的是答案在哪里

963
00:37:31,369 --> 00:37:33,308
and what are the initial conditions.
初始条件是什么

964
00:37:33,309 --> 00:37:33,650
AUDIENCE: Oh.
听众：哦。 

965
00:37:33,849 --> 00:37:35,514
So there's something else that changes.
因此，还有其他变化。 

966
00:37:35,514 --> 00:37:36,000
PROFESSOR: Yep.
教授：是的。 

967
00:37:36,000 --> 00:37:36,791
Initial conditions.
初始条件。 

968
00:37:36,791 --> 00:37:38,510



969
00:37:38,510 --> 00:37:39,010
Good.
好。 

970
00:37:39,010 --> 00:37:40,393
I like that you're thinking about that
我喜欢你在想那个

971
00:37:40,592 --> 00:37:42,789
because the next problem changes pretty much that.
因为下一个问题几乎改变了这一点。 

972
00:37:42,789 --> 00:37:44,610



973
00:37:44,610 --> 00:37:46,320
The sign changes and then these change.
符号改变，然后这些改变。 

974
00:37:46,320 --> 00:37:51,420



975
00:37:51,420 --> 00:37:53,389
What's a good topological sort?
什么是好的拓扑？ 

976
00:37:53,389 --> 00:37:55,079
This should be pretty easy.
这应该很容易。 

977
00:37:55,079 --> 00:37:57,549
If I want to generate a topological sort,
如果要生成拓扑排序， 

978
00:37:57,550 --> 00:38:00,650
what variables do I iterate over, and in what order?
我要遍历哪些变量，顺序是什么？ 

979
00:38:00,650 --> 00:38:02,579



980
00:38:02,579 --> 00:38:03,346
AUDIENCE: i.
听众：i。 

981
00:38:03,347 --> 00:38:03,730
PROFESSOR: OK.
教授：好的。 

982
00:38:03,929 --> 00:38:06,500



983
00:38:06,500 --> 00:38:11,329
And you're pointing at n, right?
你指的是n，对吗？ 

984
00:38:11,329 --> 00:38:13,569
AUDIENCE: n down to 0.
听众：n降至0。 

985
00:38:13,570 --> 00:38:14,195
PROFESSOR: Yep.
教授：是的。 

986
00:38:14,195 --> 00:38:15,942



987
00:38:15,942 --> 00:38:19,869
And then the only one left is j, so i in, and then j
然后剩下的唯一一个是j，所以我进入，然后是j 

988
00:38:19,869 --> 00:38:21,761
goes from where to where?
从哪里到哪里？ 

989
00:38:21,762 --> 00:38:24,117
AUDIENCE: j goes to s.
听众：j转到s。 

990
00:38:24,117 --> 00:38:25,769
AUDIENCE: It can go either direction.
听众：它可以向任何方向发展。 

991
00:38:25,769 --> 00:38:26,936



992
00:38:26,936 --> 00:38:27,684
PROFESSOR: Can it?
教授：可以吗？ 

993
00:38:27,684 --> 00:38:31,049



994
00:38:31,050 --> 00:38:32,420
What do the dependencies look like?
依赖性是什么样的？ 

995
00:38:32,619 --> 00:38:33,699



996
00:38:33,699 --> 00:38:39,699
When I'm computing i, j, I want i plus 1 and j minus--
当我计算i，j时，我希望我加1且j减去- 

997
00:38:39,699 --> 00:38:43,679
so I'm looking at lower j's, higher i's and lower j's.
所以我在看低j，高i和低j。 

998
00:38:43,679 --> 00:38:44,924



999
00:38:44,925 --> 00:38:46,744
AUDIENCE: But it's always higher i's.
听众：但是我总是更高。 

1000
00:38:46,744 --> 00:38:47,960
Doesn't that mean in this for loop
那不是在这个for循环中

1001
00:38:48,159 --> 00:38:50,617
that you're already going to have calculated the next right
您已经要计算出下一个权利

1002
00:38:50,617 --> 00:38:52,820
column, so it doesn't matter where
列，所以在哪里都没有关系

1003
00:38:52,820 --> 00:38:56,065
the column-- I may be wrong.
专栏-我可能是错的。 

1004
00:38:56,264 --> 00:38:57,264
PROFESSOR: You're right.
教授：对。 

1005
00:38:57,264 --> 00:38:58,420



1006
00:38:58,420 --> 00:38:58,919
Fine.
精细。 

1007
00:38:58,920 --> 00:39:00,869
OK, both orders work.
好，两个订单都可以。 

1008
00:39:00,869 --> 00:39:03,179
I just looked at this because I wanted
我只是看着这个，因为我想要

1009
00:39:03,179 --> 00:39:05,359
to have a nice, simple-- but fine, both work.
拥有一个很好，简单但很好的方法，两者都可以工作。 

1010
00:39:05,360 --> 00:39:07,190



1011
00:39:07,190 --> 00:39:07,815
AUDIENCE: Wait.
听众：等等。 

1012
00:39:07,815 --> 00:39:10,269
You mean reversing j works?
你的意思是逆转j作品？ 

1013
00:39:10,269 --> 00:39:15,820
PROFESSOR: Yes, because we're iterating over i
教授：是的，因为我们正在迭代我

1014
00:39:15,820 --> 00:39:17,050
before iterating over j.
在迭代j之前。 

1015
00:39:17,050 --> 00:39:18,670



1016
00:39:18,670 --> 00:39:20,070
Of course, this makes more sense.
当然，这更有意义。 

1017
00:39:20,070 --> 00:39:21,548
Just because they're both good answers
只是因为他们都是好答案

1018
00:39:21,748 --> 00:39:23,539
doesn't mean you should choose the one that
并不意味着您应该选择一个

1019
00:39:23,539 --> 00:39:24,670
requires more thinking.
需要更多的思考。 

1020
00:39:24,670 --> 00:39:26,670
I always like the answer that requires the least
我总是喜欢要求最少的答案

1021
00:39:26,670 --> 00:39:29,376
amount of thinking to prove that it's correct.
大量的想法证明它是正确的。 

1022
00:39:29,376 --> 00:39:33,070
AUDIENCE: Does that mean you're starting with a full--
听众：这是否意味着您是从完整的- 

1023
00:39:33,070 --> 00:39:34,760
PROFESSOR: I start here.
教授：我从这里开始。 

1024
00:39:34,760 --> 00:39:40,019
AUDIENCE: But if you're going from s down to 0,
观众：但是如果您要从s降到0， 

1025
00:39:40,219 --> 00:39:43,219
then you're starting down at the corner, which
然后你从拐角处开始

1026
00:39:43,219 --> 00:39:46,139
means you have a full knapsack, so that doesn't make sense.
意味着您有一个完整的背包，所以这没有任何意义。 

1027
00:39:46,139 --> 00:39:48,799
PROFESSOR: So the argument was when I compute this,
教授：所以争论是当我计算这个的时候， 

1028
00:39:48,800 --> 00:39:52,710
I'm looking one right, i plus 1j,
我向右看，我加上1j， 

1029
00:39:52,909 --> 00:39:55,274
and then I'm looking somewhere here.
然后我正在这里找地方。 

1030
00:39:55,275 --> 00:39:56,619



1031
00:39:56,619 --> 00:39:59,659
And I've already computed this column,
我已经计算了此列， 

1032
00:39:59,659 --> 00:40:01,759
so it doesn't matter if I go up or down.
所以无论我上升还是下降都没关系。 

1033
00:40:01,760 --> 00:40:04,500



1034
00:40:04,500 --> 00:40:07,014
And that argument is correct because first I'm
这种说法是正确的，因为首先我是

1035
00:40:07,014 --> 00:40:08,980
going to compute this column, then this column, then
要计算此列，然后计算此列，然后

1036
00:40:09,179 --> 00:40:10,429
this column, then this column.
此列，然后是此列。 

1037
00:40:10,429 --> 00:40:13,469



1038
00:40:13,469 --> 00:40:14,760
By the way, what's this column?
顺便问一下，这个专栏是什么？ 

1039
00:40:14,760 --> 00:40:16,101
This column is the initial condition.
此列是初始条件。 

1040
00:40:16,300 --> 00:40:27,759



1041
00:40:27,760 --> 00:40:29,650
Now that we figured out the topological sort,
现在我们已经弄清楚了拓扑排序， 

1042
00:40:29,650 --> 00:40:32,389
let's try to compute values here and see
让我们尝试在此处计算值并查看

1043
00:40:32,389 --> 00:40:33,730
what the initial condition should be.
初始条件应该是什么。 

1044
00:40:33,929 --> 00:40:36,859



1045
00:40:36,860 --> 00:40:40,460
So if I want to compute DP of 2, 0,
因此，如果我想计算2、0的DP， 

1046
00:40:40,460 --> 00:40:46,369
that is the maximum of either DP 3, 0 or something else.
这是DP 3、0或其他最大值。 

1047
00:40:46,369 --> 00:40:48,069
This is going to evaluate to false,
这将评估为false， 

1048
00:40:48,070 --> 00:40:50,750
so it's going to be this.
所以将是这样。 

1049
00:40:50,750 --> 00:40:52,771
What should the answer be here?
答案应该是什么？ 

1050
00:40:52,771 --> 00:40:53,949
AUDIENCE: 0.
听众：0。 

1051
00:40:53,949 --> 00:40:54,289
PROFESSOR: 0.
教授：0。 

1052
00:40:54,489 --> 00:40:56,079



1053
00:40:56,079 --> 00:41:00,190
So we want DP of 3, 0 to be 0 for this to work.
因此，我们希望3的DP为0才能起作用。 

1054
00:41:00,190 --> 00:41:00,981



1055
00:41:01,181 --> 00:41:02,889
So what's a reasonable initial condition?
那么合理的初始条件是什么？ 

1056
00:41:02,889 --> 00:41:06,291



1057
00:41:06,291 --> 00:41:09,219
AUDIENCE: Column 3 is of 0 height.
观众：第3栏的高度为0。 

1058
00:41:09,219 --> 00:41:14,889
PROFESSOR: DP of nj is 0 for all j,
教授：对于所有j，nj的DP为0， 

1059
00:41:14,889 --> 00:41:16,661
pretty much what you said in math mode.
几乎是您在数学模式下所说的

1060
00:41:16,661 --> 00:41:18,769



1061
00:41:18,969 --> 00:41:20,639
So I'm going to have an extra column.
因此，我将增加一列。 

1062
00:41:20,639 --> 00:41:23,440
This is like the Done problem over there,
就像那边的“完成”问题， 

1063
00:41:23,440 --> 00:41:25,000
and here I'm going to say that whenever
在这里我要说的是

1064
00:41:25,199 --> 00:41:28,869
I'm looking at the empty subset--
我正在看空的子集- 

1065
00:41:28,869 --> 00:41:31,239
these are all suffixes.
这些都是后缀。 

1066
00:41:31,239 --> 00:41:34,634
All three items, two items, one item, empty suffix.
所有三个项目，两个项目，一个项目，后缀为空。 

1067
00:41:34,635 --> 00:41:35,730



1068
00:41:35,929 --> 00:41:38,529
Whenever I look at the empty suffix,
每当我看空的后缀时

1069
00:41:38,530 --> 00:41:43,269
I can fill up a backpack with any weight by using no items,
我不用任何物品就可以装满任何重量的背包， 

1070
00:41:43,269 --> 00:41:44,574
and I'm going to make 0 money.
我要赚0钱。 

1071
00:41:44,574 --> 00:41:54,429



1072
00:41:54,429 --> 00:41:56,239
So what are the values here?
那么，这里的值是多少？ 

1073
00:41:56,239 --> 00:42:00,001



1074
00:42:00,001 --> 00:42:01,460
You guys nodded, so you understood,
你们点点头，所以您明白了， 

1075
00:42:01,460 --> 00:42:03,030
so then you should be able to dictate
所以你应该能够决定

1076
00:42:03,030 --> 00:42:04,030
the values in the table.
表中的值。 

1077
00:42:04,030 --> 00:42:08,842



1078
00:42:08,842 --> 00:42:12,280
AUDIENCE: So is that one also 0 because you can't go up
观众：那也是0，因为你不能上

1079
00:42:12,280 --> 00:42:18,442
to anything, and then the next one is 4 because you can go--
到任何东西，然后下一个是4，因为您可以

1080
00:42:18,442 --> 00:42:19,150
PROFESSOR: Sorry.
教授：对不起。 

1081
00:42:19,150 --> 00:42:23,480
Next one is-- so it's for the fountain pen, right?
下一个是-就是钢笔吧？ 

1082
00:42:23,679 --> 00:42:24,199
Last item.
最后一项。 

1083
00:42:24,199 --> 00:42:26,129



1084
00:42:26,130 --> 00:42:26,922
AUDIENCE: Crystal ball.
听众：水晶球。 

1085
00:42:27,121 --> 00:42:30,750



1086
00:42:30,750 --> 00:42:33,480
PROFESSOR: So we're going statute, ball, pen.
教授：所以我们要制定法规，球，笔。 

1087
00:42:33,480 --> 00:42:34,958



1088
00:42:34,958 --> 00:42:37,431
AUDIENCE: And this is weight on the left side, right?
听众：这是左边的重量，对吗？ 

1089
00:42:37,431 --> 00:42:39,179
PROFESSOR: So we're filling them like this
教授：所以我们正在这样填补他们

1090
00:42:39,179 --> 00:42:42,553
in the topological sort order that we chose here.
按照我们在此处选择的拓扑排序顺序。 

1091
00:42:42,554 --> 00:42:43,769
We said this is the order, so this
我们说这是命令，所以这

1092
00:42:43,969 --> 00:42:46,053
is what we're going to use to calculate the table.
这就是我们将要用来计算表格的内容。 

1093
00:42:46,054 --> 00:42:46,394
AUDIENCE: Oh.
听众：哦。 

1094
00:42:46,594 --> 00:42:47,579
So it's still 0, then.
因此，它仍然为0。 

1095
00:42:47,579 --> 00:42:48,163
PROFESSOR: OK.
教授：好的。 

1096
00:42:48,163 --> 00:42:50,398



1097
00:42:50,398 --> 00:42:50,898
AUDIENCE: 7.
听众：7。 

1098
00:42:50,898 --> 00:42:52,650



1099
00:42:52,849 --> 00:42:55,168
PROFESSOR: So here, this condition
教授：所以这里

1100
00:42:55,168 --> 00:42:56,710
is going to evaluate to True finally,
最终将评估为True， 

1101
00:42:56,710 --> 00:43:01,119
so this is going to be the maximum of either DP i plus 1j,
因此这将是DP i加1j的最大值， 

1102
00:43:01,119 --> 00:43:08,929
so DP of 3, 3, which is 0, or 7 plus DP of 3, 0.
因此DP为3、3（即0）或7加上DP为3、0。 

1103
00:43:08,929 --> 00:43:11,859
So 7 plus 0, which is 7.
因此7加0，即7。 

1104
00:43:11,860 --> 00:43:12,610
That's why it's 7.
这就是为什么它是7。 

1105
00:43:12,610 --> 00:43:15,403



1106
00:43:15,403 --> 00:43:17,119
AUDIENCE: 7, 7.
听众：7，7。 

1107
00:43:17,119 --> 00:43:17,585
PROFESSOR: 7, 7.
教授：7、7。 

1108
00:43:17,784 --> 00:43:19,500



1109
00:43:19,500 --> 00:43:20,349
How about this?
这个怎么样？ 

1110
00:43:20,349 --> 00:43:23,266



1111
00:43:23,266 --> 00:43:23,766
AUDIENCE: 0.
听众：0。 

1112
00:43:23,766 --> 00:43:25,706



1113
00:43:25,706 --> 00:43:26,206
0.
 0。 

1114
00:43:26,206 --> 00:43:28,634



1115
00:43:28,634 --> 00:43:29,134
4.
 4。 

1116
00:43:29,134 --> 00:43:32,070



1117
00:43:32,070 --> 00:43:34,650
PROFESSOR: The maximum of 0 and 4 plus 0, right?
教授：最大值为0和4加0，对吗？ 

1118
00:43:34,650 --> 00:43:38,364



1119
00:43:38,563 --> 00:43:39,399
AUDIENCE: 4.
听众：4。 

1120
00:43:39,400 --> 00:43:39,740
AUDIENCE: No.
听众：不。 

1121
00:43:39,940 --> 00:43:40,439
7.
 7。 

1122
00:43:40,440 --> 00:43:47,170
PROFESSOR: So it's the maximum of 7 or 4 plus 0, so this is 7.
教授：这是7或4加0的最大值，所以是7。 

1123
00:43:47,170 --> 00:43:52,005



1124
00:43:52,005 --> 00:43:52,505
AUDIENCE: 7.
听众：7。 

1125
00:43:52,505 --> 00:43:56,855



1126
00:43:56,855 --> 00:43:57,355
11.
 11。 

1127
00:43:57,355 --> 00:43:59,300



1128
00:43:59,300 --> 00:44:02,260
PROFESSOR: 7 or 4 plus 7.
教授：7或4加7。 

1129
00:44:02,260 --> 00:44:08,304



1130
00:44:08,503 --> 00:44:09,920
Does this make sense for everyone?
这对每个人有意义吗？ 

1131
00:44:09,920 --> 00:44:12,159



1132
00:44:12,159 --> 00:44:13,034
Last column.
最后一列。 

1133
00:44:13,034 --> 00:44:14,172
Let's do it.
我们开始做吧。 

1134
00:44:14,172 --> 00:44:14,671
AUDIENCE: 0.
听众：0。 

1135
00:44:14,672 --> 00:44:15,594
Feels like 0.
感觉像0。 

1136
00:44:15,594 --> 00:44:19,130



1137
00:44:19,130 --> 00:44:19,629
0 again.
再次为0。 

1138
00:44:19,630 --> 00:44:20,451
Why not?
为什么不？ 

1139
00:44:20,451 --> 00:44:21,864



1140
00:44:21,864 --> 00:44:23,277
4.
 4。 

1141
00:44:23,277 --> 00:44:24,690
How much does this thing weigh?
这东西重多少？ 

1142
00:44:24,690 --> 00:44:25,193
AUDIENCE: 4.
听众：4。 

1143
00:44:25,393 --> 00:44:25,893
AUDIENCE: 7.
听众：7。 

1144
00:44:25,893 --> 00:44:31,195



1145
00:44:31,195 --> 00:44:32,170
10.
 10。 

1146
00:44:32,170 --> 00:44:33,670
PROFESSOR: Sorry for my handwriting.
教授：对不起，我的笔迹。 

1147
00:44:33,670 --> 00:44:34,849



1148
00:44:34,849 --> 00:44:37,197
AUDIENCE: And it needs to be 11 because you
听众：它必须是11，因为您

1149
00:44:37,197 --> 00:44:38,280
said that'd be the answer.
说的就是答案。 

1150
00:44:38,280 --> 00:44:39,630
PROFESSOR: All right.
教授：好的。 

1151
00:44:39,630 --> 00:44:47,650
So it's 11 because it's either this guy or 10 plus DP of 1, 1.
所以是11，因为是这个人或10加DP的1、1。 

1152
00:44:47,650 --> 00:44:52,380



1153
00:44:52,380 --> 00:44:53,769
The first item weighs 4, so I need
第一件重4，所以我需要

1154
00:44:53,969 --> 00:44:56,000
to look one right and four up when adding.
在添加时看起来一右四。 

1155
00:44:56,000 --> 00:45:01,864



1156
00:45:01,864 --> 00:45:02,739
Does this make sense?
这有意义吗？ 

1157
00:45:02,739 --> 00:45:04,779



1158
00:45:04,780 --> 00:45:05,510
Please say yes.
请说是。 

1159
00:45:05,510 --> 00:45:08,510



1160
00:45:08,510 --> 00:45:10,510
AUDIENCE: What's the [INAUDIBLE] again?
听众：[音频不清晰]又是什么？ 

1161
00:45:10,510 --> 00:45:12,250



1162
00:45:12,250 --> 00:45:14,840
I get how if you're looking horizontally,
如果您水平看，我知道

1163
00:45:14,840 --> 00:45:16,590
the top thing is the max.
最重要的是最大

1164
00:45:16,590 --> 00:45:18,278
It's saying DP of i plus 1 j.
就是说我的DP加1 j。 

1165
00:45:18,478 --> 00:45:20,269
PROFESSOR: So this is looking horizontally,
教授：这是水平的， 

1166
00:45:20,269 --> 00:45:22,050
and this means I did not take item i.
这意味着我没有服用项目i。 

1167
00:45:22,050 --> 00:45:23,425
AUDIENCE: You didn't take item i,
听众：您没有带走项目i， 

1168
00:45:23,425 --> 00:45:26,250
but if you are going to take item i, you add the value of i,
但是如果您要使用项目i，则将i的值相加， 

1169
00:45:26,250 --> 00:45:29,840
and then you look back for DP of i plus 1,
然后回头看我加1的DP 

1170
00:45:29,840 --> 00:45:37,764
which is the previous column, and the row number is whatever
这是前一列，行号是

1171
00:45:37,764 --> 00:45:41,404
capacity you have left if you did take it?
如果您接受了，您已经离开了吗？ 

1172
00:45:41,405 --> 00:45:42,030
PROFESSOR: Yep.
教授：是的。 

1173
00:45:42,030 --> 00:45:47,907
AUDIENCE: And so in the case of cell 1,
听众：因此，在单元格1的情况下

1174
00:45:47,907 --> 00:45:56,777
3, if you took item one, then capacity you'd have left is 3.
 3，如果您选择了第一项，那么您剩下的容量为3。 

1175
00:45:56,976 --> 00:45:58,259



1176
00:45:58,260 --> 00:45:59,103
PROFESSOR: Right.
教授：对。 

1177
00:45:59,103 --> 00:46:01,050
So you said total capacity three, right?
所以您说的总容量为三，对吗？ 

1178
00:46:01,050 --> 00:46:03,480



1179
00:46:03,679 --> 00:46:06,409
So if I take item one, how many pounds does it have?
因此，如果我服用第一个物品，它有多少磅？ 

1180
00:46:06,409 --> 00:46:07,493



1181
00:46:07,494 --> 00:46:08,210
AUDIENCE: It has four.
听众：有四个。 

1182
00:46:08,409 --> 00:46:10,460



1183
00:46:10,460 --> 00:46:12,831
PROFESSOR: Statue is 0, ball is 1, pen is 2.
教授：雕像是0，球是1，笔是2。 

1184
00:46:12,831 --> 00:46:13,172
AUDIENCE: Oh.
听众：哦。 

1185
00:46:13,371 --> 00:46:14,273
You're not using--
您没有使用- 

1186
00:46:14,273 --> 00:46:15,201



1187
00:46:15,201 --> 00:46:16,699
PROFESSOR: So I'm using those items,
教授：所以我正在使用这些物品， 

1188
00:46:16,699 --> 00:46:18,734
but I'm starting using zero based indexing.
但我开始使用基于零的索引。 

1189
00:46:18,735 --> 00:46:21,349
AUDIENCE: Yeah, but we're going from here to here.
听众：是的，但是我们要从这里到这里。 

1190
00:46:21,349 --> 00:46:25,009
So I'm saying if you pick the middle cell that's
所以我是说如果您选择中间的单元格

1191
00:46:25,010 --> 00:46:26,610
1, 3, that one--
一三三

1192
00:46:26,809 --> 00:46:30,440
PROFESSOR: So this has item one, so the ball, weight three.
教授：这是项目1，是球，重量是3。 

1193
00:46:30,440 --> 00:46:33,590
If I take the ball, how much weight do I have left?
如果我接球，还剩下多少重量？ 

1194
00:46:33,590 --> 00:46:34,690



1195
00:46:34,690 --> 00:46:38,070
AUDIENCE: The ball weighs two pounds,
听众：球重两磅， 

1196
00:46:38,070 --> 00:46:40,199
so you'd have three pounds left, and that's
所以你只剩三磅了

1197
00:46:40,398 --> 00:46:41,690
why you're in the three column.
为什么您在三列中。 

1198
00:46:41,690 --> 00:46:43,760
PROFESSOR: I have a backpack of three pounds,
教授：我有一个三磅的背包， 

1199
00:46:43,760 --> 00:46:46,630
and then I put a ball of two pounds in it,
然后我在里面放了两磅的球

1200
00:46:46,630 --> 00:46:48,114
and I have three pounds left?
还有三磅吗？ 

1201
00:46:48,313 --> 00:46:49,241
AUDIENCE: No, no, no.
听众：不，不，不。 

1202
00:46:49,242 --> 00:46:52,289
You have three pounds left if you put a ball and two pounds
如果您放一个球，您还有三磅和两磅

1203
00:46:52,489 --> 00:46:53,029
in, right?
在吧？ 

1204
00:46:53,030 --> 00:46:54,076



1205
00:46:54,076 --> 00:46:55,949
PROFESSOR: I have a backpack of three pounds.
教授：我有一个三磅的背包。 

1206
00:46:55,949 --> 00:46:57,399
I put a ball of two pounds.
我放了两磅的球。 

1207
00:46:57,400 --> 00:46:58,800



1208
00:46:58,800 --> 00:47:01,085
How many pounds do I have left of capacity?
我还剩多少磅？ 

1209
00:47:01,284 --> 00:47:06,210



1210
00:47:06,210 --> 00:47:11,394
So backpack, three pounds total.
所以背包，总共三磅。 

1211
00:47:11,394 --> 00:47:13,110
I put a ball in that has two pounds.
我把一个两磅的球放进去。 

1212
00:47:13,110 --> 00:47:14,539
How many pounds?
多少磅？ 

1213
00:47:14,739 --> 00:47:16,901
AUDIENCE: We have none left.
听众：我们什么都没有了。 

1214
00:47:16,902 --> 00:47:18,360
Oh, it can hold three total pounds?
哦，总共可以装三磅吗？ 

1215
00:47:18,360 --> 00:47:18,789
PROFESSOR: Yeah.
教授：是的。 

1216
00:47:18,789 --> 00:47:20,637
AUDIENCE: Then you have one pound left.
听众：那你还剩一磅。 

1217
00:47:20,637 --> 00:47:22,630
But we have a five pound backpack.
但是我们有一个五磅的背包。 

1218
00:47:22,630 --> 00:47:25,364
PROFESSOR: Well, you said we were looking at 3, 1.
教授：好，您说的是3，1。 

1219
00:47:25,364 --> 00:47:26,909
You said we were looking here.
你说过我们在看这里

1220
00:47:26,909 --> 00:47:28,409
AUDIENCE: Yeah, we're looking there.
听众：是的，我们正在寻找。 

1221
00:47:28,409 --> 00:47:31,929
PROFESSOR: So this means three pound backpack,
教授：这意味着三磅重的背包， 

1222
00:47:31,929 --> 00:47:35,512
because the sub-problem says your weight is at most j.
因为该子问题说您的体重最多为j。 

1223
00:47:35,512 --> 00:47:36,478
AUDIENCE: Got it, OK.
听众：知道了，好的。 

1224
00:47:36,478 --> 00:47:37,444
Oh, I see.
哦，我明白了。 

1225
00:47:37,445 --> 00:47:38,693



1226
00:47:38,893 --> 00:47:41,479
So j minus si is saying--
所以j减去si在说- 

1227
00:47:41,480 --> 00:47:45,458
PROFESSOR: It means you used up, so you put up something there,
教授：这意味着您已经用光了，所以在这里放了东西， 

1228
00:47:45,458 --> 00:47:46,500
so you ate some capacity.
所以你吃了一些容量。 

1229
00:47:46,500 --> 00:47:48,275



1230
00:47:48,275 --> 00:47:50,240
AUDIENCE: Well, you ate only two pounds, though,
听众：嗯，虽然你只吃了两磅， 

1231
00:47:50,440 --> 00:47:53,779
so why is it in row three?
那为什么在第三行呢？ 

1232
00:47:53,780 --> 00:47:55,695
PROFESSOR: You told me to start here.
教授：您叫我从这里开始。 

1233
00:47:55,695 --> 00:47:56,664
AUDIENCE: I know.
听众：我知道。 

1234
00:47:56,664 --> 00:47:58,610
I'm trying to remember how we got there.
我想记住我们是如何到达那里的。 

1235
00:47:58,610 --> 00:48:00,193
PROFESSOR: You said, let's start here.
教授：您说的，让我们从这里开始。 

1236
00:48:00,193 --> 00:48:01,230



1237
00:48:01,429 --> 00:48:04,109
That's why this arrow points here to one.
这就是为什么此箭头指向此处的原因。 

1238
00:48:04,110 --> 00:48:06,943
You have two arrows, 2, 3, and 2, 1.
您有两个箭头2、3和2、1。 

1239
00:48:07,143 --> 00:48:08,559
AUDIENCE: Because it's j minus si.
听众：因为是j减去si。 

1240
00:48:08,559 --> 00:48:10,000
AUDIENCE: Oh, I see.
听众：哦，我知道了。 

1241
00:48:10,000 --> 00:48:10,980
Minus 3.
减3。 

1242
00:48:10,980 --> 00:48:14,695
AUDIENCE: So j is the amount of weight you have left, right?
听众：那么j是您剩下的重量，对吗？ 

1243
00:48:14,695 --> 00:48:16,320
PROFESSOR: So j is the amount of weight
教授：所以j是重量

1244
00:48:16,320 --> 00:48:18,340
I can have for this sub-problem.
我可以解决这个子问题。 

1245
00:48:18,340 --> 00:48:20,809
AUDIENCE: Yeah, the amount of capacity I
听众：是的，我的容量

1246
00:48:20,809 --> 00:48:22,014
have still in my backpack.
还在我的背包里。 

1247
00:48:22,014 --> 00:48:27,336



1248
00:48:27,536 --> 00:48:29,619
PROFESSOR: Let's talk about pseudo polynomial time
教授：让我们谈谈伪多项式时间

1249
00:48:29,619 --> 00:48:31,409
very quickly and what does it mean, OK?
很快，这是什么意思，好吗？ 

1250
00:48:31,409 --> 00:48:33,929



1251
00:48:33,929 --> 00:48:36,409
And you guys will promise to look at the recitation notes
你们保证会看朗诵笔记

1252
00:48:36,409 --> 00:48:38,460
and look at the other problems, right?
看看其他问题吧？ 

1253
00:48:38,460 --> 00:48:40,000
So incentive for that.
因此激励。 

1254
00:48:40,000 --> 00:48:43,190
Problem two is easier than knapsack,
问题二比背包容易， 

1255
00:48:43,190 --> 00:48:46,539
so if you get that, that should be a good confirmation that you
因此，如果您知道了，那应该很好地证明您

1256
00:48:46,539 --> 00:48:47,159
got knapsack.
有背包。 

1257
00:48:47,159 --> 00:48:49,339
Problem three is a bit harder than problem two,
问题三比问题二难， 

1258
00:48:49,340 --> 00:48:51,710
but it shows up on interviews, so you
但它会显示在采访中

1259
00:48:51,710 --> 00:48:53,889
want to understand problem three.
想了解问题三。 

1260
00:48:53,889 --> 00:48:56,699
I got problem two twice in four years,
四年来我两次遇到问题， 

1261
00:48:56,699 --> 00:48:59,350
so there's a decent chance that you'll get it.
因此您很有可能得到它。 

1262
00:48:59,351 --> 00:49:00,849
So you want to get to problem three,
所以你想解决问题三， 

1263
00:49:00,849 --> 00:49:03,009
so you should go through problem two.
所以你应该经历第二个问题。 

1264
00:49:03,010 --> 00:49:06,070
AUDIENCE: How many times have you got problem three?
听众：您有多少次遇到问题三了？ 

1265
00:49:06,269 --> 00:49:08,009
PROFESSOR: Twice in four years, so that's
教授：四年内两次，所以

1266
00:49:08,010 --> 00:49:09,190
the problem that you want to get to.
您想要解决的问题。 

1267
00:49:09,190 --> 00:49:10,789
Problem two is a stepping stone.
问题二是垫脚石。 

1268
00:49:10,789 --> 00:49:19,730



1269
00:49:19,730 --> 00:49:22,253
So running time for dynamic programming.
因此运行时间为动态编程。 

1270
00:49:22,253 --> 00:49:23,170
How many sub-problems?
有多少个子问题？ 

1271
00:49:23,170 --> 00:49:25,983



1272
00:49:25,983 --> 00:49:26,922
AUDIENCE: Same, ns.
观众：ns。 

1273
00:49:26,922 --> 00:49:27,885



1274
00:49:27,885 --> 00:49:28,510
PROFESSOR: Yep.
教授：是的。 

1275
00:49:28,510 --> 00:49:29,789



1276
00:49:29,789 --> 00:49:30,130
Sub-problems.
子问题。 

1277
00:49:30,329 --> 00:49:35,319



1278
00:49:35,320 --> 00:49:38,007
How many sub-problems do I look at when
我什么时候看多少个子问题

1279
00:49:38,206 --> 00:49:39,789
I compute the answer of a sub-problem?
我计算一个子问题的答案？ 

1280
00:49:39,789 --> 00:49:40,905



1281
00:49:40,905 --> 00:49:42,019
Two, right?
二对吧

1282
00:49:42,019 --> 00:49:43,079
So order one.
所以订购一个。 

1283
00:49:43,079 --> 00:49:44,365



1284
00:49:44,365 --> 00:49:45,739
So this is how much time it takes
这是需要多少时间

1285
00:49:45,739 --> 00:49:50,419
to compute the answer to a sub-problem,
计算子问题的答案， 

1286
00:49:50,420 --> 00:49:52,170
because I have the max of two elements,
因为我最多拥有两个元素， 

1287
00:49:52,170 --> 00:49:53,670
so it's constant time.
所以这是恒定的时间。 

1288
00:49:53,670 --> 00:49:56,210



1289
00:49:56,210 --> 00:49:57,940
So the total running time is?
那么总的运行时间是？ 

1290
00:49:57,940 --> 00:49:59,559



1291
00:49:59,559 --> 00:50:00,150
AUDIENCE: Order ns.
听众：命令ns。 

1292
00:50:00,349 --> 00:50:01,224
PROFESSOR: All right.
教授：好的。 

1293
00:50:01,224 --> 00:50:01,723



1294
00:50:01,724 --> 00:50:02,920
Order of ns.
 ns的顺序。 

1295
00:50:02,920 --> 00:50:07,280



1296
00:50:07,280 --> 00:50:09,039
This polynomial, is this the same kind
这个多项式就是这种

1297
00:50:09,039 --> 00:50:09,880
of algorithm as Dijkstra?
 Dijkstra的算法？ 

1298
00:50:10,079 --> 00:50:11,393



1299
00:50:11,393 --> 00:50:12,559
AUDIENCE: Pseudo polynomial.
听众：伪多项式。 

1300
00:50:12,559 --> 00:50:13,369
PROFESSOR: Pseudo polynomial.
教授：伪多项式。 

1301
00:50:13,369 --> 00:50:14,764
AUDIENCE: Don't know why.
听众：不知道为什么。 

1302
00:50:14,764 --> 00:50:23,706



1303
00:50:23,706 --> 00:50:25,289
PROFESSOR: So intuitively, the problem
教授：从直觉上讲，这个问题

1304
00:50:25,289 --> 00:50:29,570
is s shows up in your running here,
在您的跑步中显示s时， 

1305
00:50:29,570 --> 00:50:32,355
and s is the property of your input numbers.
 s是输入数字的属性。 

1306
00:50:32,554 --> 00:50:33,730



1307
00:50:33,730 --> 00:50:36,159
It's not how many elements you have in the input.
输入中没有多少元素。 

1308
00:50:36,159 --> 00:50:38,065
It's what's inside one of those elements.
这些元素之一就是里面的东西。 

1309
00:50:38,065 --> 00:50:39,170



1310
00:50:39,170 --> 00:50:40,769
So let's see why that matters.
那么，让我们看看为什么这很重要。 

1311
00:50:40,769 --> 00:50:42,269
Let's look at the practical example.
让我们看一个实际的例子。 

1312
00:50:42,269 --> 00:50:45,405



1313
00:50:45,405 --> 00:50:47,322
AUDIENCE: What about measuring in cubic inches
观众：以立方英寸为单位

1314
00:50:47,322 --> 00:50:48,561
or cubic centimeters?
或立方厘米？ 

1315
00:50:48,561 --> 00:50:50,545



1316
00:50:50,545 --> 00:50:53,025
Is that a problem?
那是问题吗？ 

1317
00:50:53,025 --> 00:50:56,281
It would take a lot longer if we do it in cubic centimeters.
如果以立方厘米为单位，则需要更长的时间。 

1318
00:50:56,282 --> 00:50:57,539
PROFESSOR: Yeah, but then you could
教授：是的，但是你可以

1319
00:50:57,739 --> 00:51:00,568
argue that if it's an integer amount of cubic inches,
认为如果是立方英寸的整数， 

1320
00:51:00,568 --> 00:51:02,110
you should divide everything by that.
您应该将所有内容除以。 

1321
00:51:02,110 --> 00:51:05,510



1322
00:51:05,510 --> 00:51:07,250
Where this really matters is suppose
假设这真的很重要

1323
00:51:07,250 --> 00:51:14,780
you have a 100 item input, so 100 items.
您输入了100个项目，因此输入了100个项目。 

1324
00:51:14,780 --> 00:51:16,630



1325
00:51:16,829 --> 00:51:19,880
What's the worst case input on a 32-bit machine?
在32位计算机上最坏的情况是什么？ 

1326
00:51:19,880 --> 00:51:25,780



1327
00:51:25,780 --> 00:51:27,880
An input looks like this, by the way.
顺便说一句，输入看起来像这样。 

1328
00:51:27,880 --> 00:51:34,860
How many elements you have, so 3, and then for each item,
您有多少个元素，因此为3，然后对于每个项目， 

1329
00:51:34,860 --> 00:51:36,750
what's the weight and what's the value?
重量是多少，价值是什么？ 

1330
00:51:36,750 --> 00:51:38,159



1331
00:51:38,159 --> 00:51:41,199
So then we're going to have three weights, which I believe
因此，我们将拥有三个权重，我相信

1332
00:51:41,199 --> 00:51:46,210
are 4, 2, 3.
是4、2、3 

1333
00:51:46,210 --> 00:51:50,398



1334
00:51:50,398 --> 00:51:51,940
You guys have to take my word for it.
你们必须相信我的话。 

1335
00:51:51,940 --> 00:51:58,280
And then I have three values, which are 10, 4, 7.
然后我有三个值，分别是10、4、7。 

1336
00:51:58,280 --> 00:52:02,630



1337
00:52:02,829 --> 00:52:04,206
Let's not worry about the values.
让我们不必担心这些值。 

1338
00:52:04,206 --> 00:52:05,539
I claim that they're irrelevant.
我声称它们无关紧要。 

1339
00:52:05,539 --> 00:52:07,130
You can convince yourselves afterwards
之后你可以说服自己

1340
00:52:07,130 --> 00:52:08,130
that that's the case.
就是这种情况。 

1341
00:52:08,130 --> 00:52:09,809



1342
00:52:09,809 --> 00:52:11,860
Let's only look at this.
让我们只看这个。 

1343
00:52:11,860 --> 00:52:15,960
The weights have to be between 0 and what for the problem
权重必须介于0和问题之间

1344
00:52:15,960 --> 00:52:17,050
to make sense?
有道理吗？ 

1345
00:52:17,050 --> 00:52:17,549
AUDIENCE: 5.
听众：5。 

1346
00:52:17,550 --> 00:52:18,882



1347
00:52:19,081 --> 00:52:21,039
PROFESSOR: If I have a weight bigger than this,
教授：如果我的体重比这个大， 

1348
00:52:21,039 --> 00:52:22,664
I know I'm not going to take that item.
我知道我不会拿那个东西。 

1349
00:52:22,664 --> 00:52:23,489



1350
00:52:23,489 --> 00:52:26,735
How many bits do I need to represent these weights?
我需要多少位来表示这些权重？ 

1351
00:52:26,735 --> 00:52:27,672
AUDIENCE: Log s.
听众：登录。 

1352
00:52:27,672 --> 00:52:28,731



1353
00:52:28,931 --> 00:52:30,639
PROFESSOR: It's log s plus 1 technically,
教授：从技术上来说，这是对数加1， 

1354
00:52:30,639 --> 00:52:33,250
but if I write order of log s, I'm good.
但是如果我写log的顺序，那很好。 

1355
00:52:33,250 --> 00:52:36,320



1356
00:52:36,320 --> 00:52:37,819
AUDIENCE: Times the number of items.
听众：乘以项目数。 

1357
00:52:37,820 --> 00:52:38,750
PROFESSOR: Yes.
教授：是的。 

1358
00:52:38,750 --> 00:52:40,690
So if I want to represent all of them,
所以，如果我想代表所有人

1359
00:52:40,690 --> 00:52:46,349
I have order of n times log s, plus the number
我有n次log s的命令，加上数字

1360
00:52:46,349 --> 00:52:48,449
of bits required to represent this.
代表这一点的位数。 

1361
00:52:48,449 --> 00:52:49,589
This is log n.
这是日志n。 

1362
00:52:49,590 --> 00:52:51,070
So log n is smaller than n.
因此log n小于n。 

1363
00:52:51,070 --> 00:52:53,019
I'm not going to add it here.
我不会在这里添加它。 

1364
00:52:53,019 --> 00:52:54,230
So this is my input size.
这就是我的输入大小。 

1365
00:52:54,230 --> 00:52:58,050
This is how many bits I need for the input.
这是我需要多少位输入。 

1366
00:52:58,050 --> 00:52:59,730



1367
00:52:59,730 --> 00:53:02,260
So the worst case input on a 32-bit machine
因此，在32位计算机上输入的最坏情况

1368
00:53:02,260 --> 00:53:10,340
is going to have roughly 3,200 bits.
将有大约3200位。 

1369
00:53:10,340 --> 00:53:13,309
What's the worst case s that I can
我能遇到的最坏情况是什么

1370
00:53:13,309 --> 00:53:15,009
represent on a 32-bit machine?
代表一台32位计算机？ 

1371
00:53:15,010 --> 00:53:16,320



1372
00:53:16,519 --> 00:53:19,583
These are all 32-bit numbers.
这些都是32位数字。 

1373
00:53:19,583 --> 00:53:22,000
AUDIENCE: You mean each of the weights are 32-bit numbers?
听众：您是说每个权重都是32位数字？ 

1374
00:53:22,000 --> 00:53:22,666
PROFESSOR: Yeah.
教授：是的。 

1375
00:53:22,666 --> 00:53:28,039



1376
00:53:28,039 --> 00:53:31,014
So what's the worst case s I can represent?
那么我能代表的最坏情况是什么？ 

1377
00:53:31,014 --> 00:53:32,469
AUDIENCE: 2 to 31 minus 1.
受众群体：2到31减去1。 

1378
00:53:32,469 --> 00:53:34,409



1379
00:53:34,409 --> 00:53:37,629
PROFESSOR: Which is roughly 4 times 10 to the ninth.
教授：大约是第九的10的4倍。 

1380
00:53:37,630 --> 00:53:39,452
So the worst case running time is?
那么最坏的情况下运行时间是？ 

1381
00:53:39,452 --> 00:53:45,009



1382
00:53:45,010 --> 00:53:46,460
Roughly ns, right?
大约ns，对不对？ 

1383
00:53:46,460 --> 00:53:47,780



1384
00:53:47,780 --> 00:53:56,030
So n times s, which means roughly 100 times 10
所以n乘以s，大约等于100乘以10 

1385
00:53:56,030 --> 00:53:59,996
to the ninth, which means 4 times 10 to the 11 operations.
到第九，这表示10到11运算的4倍。 

1386
00:53:59,996 --> 00:54:10,329



1387
00:54:10,329 --> 00:54:12,369
Now, suppose we're looking at the worst case
现在，假设我们正在研究最坏的情况

1388
00:54:12,369 --> 00:54:13,880
input on a 64-bit machine.
在64位计算机上输入。 

1389
00:54:13,880 --> 00:54:20,690



1390
00:54:20,690 --> 00:54:22,039
Still 100 items.
仍然有100个项目。 

1391
00:54:22,239 --> 00:54:23,716
What's the input size?
输入大小是多少？ 

1392
00:54:23,717 --> 00:54:25,545
AUDIENCE: To the 21 total at the end.
听众：到最后共有21个。 

1393
00:54:25,545 --> 00:54:25,961



1394
00:54:26,161 --> 00:54:27,744
PROFESSOR: That's how many operations.
教授：那是多少个手术。 

1395
00:54:27,744 --> 00:54:30,365



1396
00:54:30,365 --> 00:54:31,739
Let's go through it step by step.
让我们逐步进行。 

1397
00:54:31,739 --> 00:54:34,209
How many bits of input?
输入多少位？ 

1398
00:54:34,210 --> 00:54:35,614



1399
00:54:35,614 --> 00:54:36,773
AUDIENCE: 6,400.
观众：6,400。 

1400
00:54:36,773 --> 00:54:38,273
AUDIENCE: Where does that come from?
听众：这是哪里来的？ 

1401
00:54:38,273 --> 00:54:40,250
AUDIENCE: 100 items times 32 bits.
观众：100项乘以32位。 

1402
00:54:40,250 --> 00:54:41,434



1403
00:54:41,434 --> 00:54:42,309
PROFESSOR: 100 items.
教授：100件。 

1404
00:54:42,309 --> 00:54:44,579
Each item weight has 64 bits.
每个项目权重都有64位。 

1405
00:54:44,579 --> 00:54:46,110
What's the worst case s?
最糟糕的情况是什么？ 

1406
00:54:46,110 --> 00:54:47,432



1407
00:54:47,432 --> 00:54:48,755
AUDIENCE: 2 to the 64.
听众：2到64。 

1408
00:54:48,755 --> 00:54:51,159
PROFESSOR: 2 to the 64 minus 1.
教授：2到64减1。 

1409
00:54:51,159 --> 00:54:52,239
Doesn't matter too much.
没关系。 

1410
00:54:52,239 --> 00:55:00,269
It's 1 times 10 to the 19th, 1.6 times 10 to the 19th.
是10到19的1倍，是10到19的1.6倍。 

1411
00:55:00,269 --> 00:55:02,041
So the worst case running time is?
那么最坏的情况下运行时间是？ 

1412
00:55:02,041 --> 00:55:05,478



1413
00:55:05,478 --> 00:55:06,932
AUDIENCE: 10 to the 21.
听众：10到21。 

1414
00:55:06,932 --> 00:55:07,932
PROFESSOR: 10 to the 21.
教授：10至21。 

1415
00:55:07,932 --> 00:55:15,192



1416
00:55:15,192 --> 00:55:15,900
So what happened?
所以发生了什么事？ 

1417
00:55:15,900 --> 00:55:17,039
I increased my word size.
我增加了字数。 

1418
00:55:17,239 --> 00:55:18,349



1419
00:55:18,349 --> 00:55:20,654
The running time increased quadratically.
运行时间增加了两倍。 

1420
00:55:20,655 --> 00:55:23,030



1421
00:55:23,030 --> 00:55:24,545
This is not a polynomial increase.
这不是多项式的增加。 

1422
00:55:24,545 --> 00:55:26,871



1423
00:55:26,871 --> 00:55:27,869
What's the problem here?
这是什么问题

1424
00:55:27,869 --> 00:55:29,569
Why is this the case?
为什么会这样呢？ 

1425
00:55:29,570 --> 00:55:34,880
If I write log s as b, so log s becomes
如果我将log s写为b，则log s变为

1426
00:55:35,079 --> 00:55:38,179
b, what's the input size?
 b，输入大小是多少？ 

1427
00:55:38,179 --> 00:55:44,773



1428
00:55:44,773 --> 00:55:45,719
AUDIENCE: nb.
听众：nb。 

1429
00:55:45,719 --> 00:55:48,609
PROFESSOR: Yep. n times log s equals n times b,
教授：是的。 n次log s等于n次b， 

1430
00:55:48,610 --> 00:55:49,789
so this is the input size.
所以这是输入大小。 

1431
00:55:49,789 --> 00:55:51,090



1432
00:55:51,090 --> 00:55:52,339
Now, what is the running time?
现在，运行时间是多少？ 

1433
00:55:52,340 --> 00:55:57,322



1434
00:55:57,322 --> 00:55:58,780
AUDIENCE: The number of operations?
听众：手术次数？ 

1435
00:55:58,780 --> 00:55:59,405
PROFESSOR: Yep.
教授：是的。 

1436
00:55:59,405 --> 00:56:04,148



1437
00:56:04,148 --> 00:56:05,460
AUDIENCE: n times 2 to the b.
听众：n乘以2到b。 

1438
00:56:05,460 --> 00:56:06,230
PROFESSOR: Yep.
教授：是的。 

1439
00:56:06,230 --> 00:56:08,449
n times s, and s is 2 to the b.
 n乘以s，而s是b的2。 

1440
00:56:08,449 --> 00:56:12,589



1441
00:56:12,590 --> 00:56:13,710
So this is the problem.
所以这就是问题所在。 

1442
00:56:13,710 --> 00:56:15,199



1443
00:56:15,199 --> 00:56:18,250
This is a polynomial in n and b, but here,
这是n和b中的多项式，但是在这里， 

1444
00:56:18,250 --> 00:56:21,460
if I write the input this way, I have b as an exponent.
如果以这种方式编写输入，则我将b作为指数。 

1445
00:56:21,460 --> 00:56:22,510



1446
00:56:22,510 --> 00:56:24,320
So if I double the number of bits
所以如果我把位数加倍

1447
00:56:24,519 --> 00:56:28,119
by doubling the field size, my running time
通过将字段大小加倍，我的运行时间

1448
00:56:28,119 --> 00:56:30,869
increases quadratically, so this is not polynomial.
平方增加，所以这不是多项式。 

1449
00:56:30,869 --> 00:56:33,809



1450
00:56:33,809 --> 00:56:36,679
However, if I write it as order of n times s,
但是，如果我将其写为s的n倍， 

1451
00:56:36,679 --> 00:56:38,818
this looks like a polynomial.
这看起来像多项式。 

1452
00:56:38,818 --> 00:56:40,860
So it looks like a polynomial, but it's not truly
因此它看起来像多项式，但并不是真正的

1453
00:56:40,860 --> 00:56:44,920
a polynomial, so that's why it's pseudo, as in fake.
多项式，这就是为什么它是伪的，就像是假的。 

1454
00:56:44,920 --> 00:56:47,704



1455
00:56:47,704 --> 00:56:49,329
AUDIENCE: So it's actually exponential.
听众：所以它实际上是指数的。 

1456
00:56:49,329 --> 00:56:50,799



1457
00:56:50,800 --> 00:56:52,300
PROFESSOR: It's not exponential.
教授：不是指数的。 

1458
00:56:52,300 --> 00:56:55,250
So an exponential algorithm for this means
所以这个的指数算法

1459
00:56:55,250 --> 00:56:58,059
try all the possible subsets, and that's
尝试所有可能的子集，那就是

1460
00:56:58,059 --> 00:57:02,219
order of 2 to the n times n to compute the sum.
 2到n乘以n的阶来计算总和。 

1461
00:57:02,219 --> 00:57:03,353
This is exponential, right?
这是指数的，对不对？ 

1462
00:57:03,353 --> 00:57:04,019
You have n here.
你在这里

1463
00:57:04,019 --> 00:57:05,119
It's clear.
很明显。 

1464
00:57:05,119 --> 00:57:07,139
AUDIENCE: I know, but if you have 2 to the b,
听众：我知道，但是如果b等于2， 

1465
00:57:07,139 --> 00:57:09,371
that seems pretty clear as well.
这似乎也很清楚。 

1466
00:57:09,371 --> 00:57:11,329
PROFESSOR: Well, you have to look inside this s
教授：好吧，您必须仔细阅读

1467
00:57:11,329 --> 00:57:11,989
and see what it means.
并查看其含义。 

1468
00:57:11,989 --> 00:57:12,905
That's the difference.
就是这样。 

1469
00:57:12,905 --> 00:57:13,829



1470
00:57:13,829 --> 00:57:16,069
So by increasing the number of items,
因此，通过增加项目数量， 

1471
00:57:16,070 --> 00:57:18,030
if you double the number of items
如果您将物品数量加倍

1472
00:57:18,030 --> 00:57:20,210
but you don't do anything to the word size,
但您不会对字号做任何事情， 

1473
00:57:20,409 --> 00:57:23,639
then your running time is going to increase polynomially,
那么您的跑步时间将成倍增加， 

1474
00:57:23,639 --> 00:57:25,210
but if you change the field size,
但是如果您更改字段大小， 

1475
00:57:25,210 --> 00:57:26,751
it's going to increase exponentially.
它会成倍增加。 

1476
00:57:26,751 --> 00:57:27,780



1477
00:57:27,780 --> 00:57:30,900
So pseudo polynomial means watch out, there's a trap.
因此，伪多项式意味着要当心，这是一个陷阱。 

1478
00:57:30,900 --> 00:57:32,110
It's not really polynomial.
它不是真正的多项式。 

1479
00:57:32,110 --> 00:57:36,862
If you increase the input size by increasing the number width,
如果您通过增加数字宽度来增加输入大小， 

1480
00:57:36,862 --> 00:57:38,070
bad stuff is going to happen.
坏事将会发生。 

1481
00:57:38,070 --> 00:57:39,289



1482
00:57:39,289 --> 00:57:40,164
So think of Dijkstra.
所以想想Dijkstra。 

1483
00:57:40,164 --> 00:57:41,663
What's the running time of Dijkstra?
 Dijkstra的运行时间是几点？ 

1484
00:57:41,664 --> 00:57:44,010
You count the number of vertices, the number of edges,
您计算顶点数，边数， 

1485
00:57:44,010 --> 00:57:45,960
and you have a polynomial in that, right?
而且您有一个多项式，对吗？ 

1486
00:57:45,960 --> 00:57:46,849



1487
00:57:46,849 --> 00:57:48,599
You don't have to look at the number size.
您不必查看数字大小。 

1488
00:57:48,599 --> 00:57:50,849
You don't have to look at any weird stuff like that.
您无需查看任何类似的怪异内容。 

1489
00:57:50,849 --> 00:57:52,153
Here, you do.
在这里，你做。 

1490
00:57:52,153 --> 00:57:53,635
That's the difference.
就是这样。 

1491
00:57:53,635 --> 00:57:57,119



1492
00:57:57,119 --> 00:57:58,239
Does it make more sense?
它更有意义吗？ 

1493
00:57:58,239 --> 00:58:00,119



1494
00:58:00,119 --> 00:58:03,059
So whenever you have an input number that shows up
因此，只要您有显示的输入数字

1495
00:58:03,059 --> 00:58:07,340
in your running time, instead of how many numbers you have,
在您的跑步时间内，而不是您拥有多少个数字， 

1496
00:58:07,340 --> 00:58:08,626
that means there's a trap.
那意味着有一个陷阱。 

1497
00:58:08,626 --> 00:58:09,668
That's pseudo polynomial.
那是伪多项式。 

1498
00:58:09,668 --> 00:58:12,059



1499
00:58:12,059 --> 00:58:14,059
AUDIENCE: So it's just like having some constant
听众：就像保持不变

1500
00:58:14,059 --> 00:58:15,523
that depends on something?
取决于什么？ 

1501
00:58:15,523 --> 00:58:17,150



1502
00:58:17,150 --> 00:58:18,625
PROFESSOR: It's not a constant.
教授：这不是一个常数。 

1503
00:58:18,625 --> 00:58:20,019
AUDIENCE: I mean coefficient.
听众：我的意思是系数。 

1504
00:58:20,019 --> 00:58:22,173
AUDIENCE: Once you set it, it's a constant, right?
听众：设置好之后，它是一个常数，对吗？ 

1505
00:58:22,173 --> 00:58:23,061



1506
00:58:23,061 --> 00:58:25,269
PROFESSOR: I mean, that's true for everything, right?
教授：我的意思是，所有事情都是这样，对吗？ 

1507
00:58:25,269 --> 00:58:28,170
You can say that you have 10 to the 80 atoms in the universe,
您可以说宇宙中有10到80个原子， 

1508
00:58:28,170 --> 00:58:32,170
so all the numbers that you work with are at most 10 to the 80.
因此您使用的所有数字最多为10到80。 

1509
00:58:32,170 --> 00:58:34,010
Therefore, your running time is order one
因此，您的跑步时间是一阶

1510
00:58:34,010 --> 00:58:36,210
no matter what you do, and then running times
不管你做什么，然后运行时间

1511
00:58:36,210 --> 00:58:37,099
are no longer useful.
不再有用。 

1512
00:58:37,099 --> 00:58:38,980



1513
00:58:38,980 --> 00:58:41,248
You have to draw a line somewhere.
您必须在某处画一条线。 

1514
00:58:41,248 --> 00:58:43,947
AUDIENCE: I think it's just like s, if it depends on your field
听众：我想就像s一样，取决于您的领域

1515
00:58:43,947 --> 00:58:46,836
size and you can scale it, it's kind of like--
大小，您可以缩放它，有点像- 

1516
00:58:46,836 --> 00:58:48,420
PROFESSOR: So asymptotic running time.
教授：渐近的运行时间。 

1517
00:58:48,420 --> 00:58:49,260
What's the point of that?
有什么意义呢？ 

1518
00:58:49,460 --> 00:58:50,799
How do our algorithms scale?
我们的算法如何扩展？ 

1519
00:58:50,800 --> 00:58:53,230
As our data becomes bigger and bigger,
随着我们的数据越来越大， 

1520
00:58:53,230 --> 00:58:55,119
what happens to the running time?
运行时间会怎样？ 

1521
00:58:55,119 --> 00:58:56,869
This pseudo polynomial thing tells you
这个伪多项式告诉你

1522
00:58:56,869 --> 00:59:01,525
that if you're shifting to a larger number size,
如果您要转换为更大的数字， 

1523
00:59:01,525 --> 00:59:03,399
to a larger word size, then your running time
较大的单词，然后是您的运行时间

1524
00:59:03,400 --> 00:59:04,329
is going to explode.
会爆炸。 

1525
00:59:04,329 --> 00:59:05,949
It's not going to scale linearly.
它不会线性扩展。 

1526
00:59:05,949 --> 00:59:13,878



1527
00:59:13,878 --> 00:59:14,670
Still don't buy it?
还是不买吗？ 

1528
00:59:14,670 --> 00:59:19,088



1529
00:59:19,088 --> 00:59:20,561
AUDIENCE: I trust you, I just--
听众：我相信你，我只是- 

1530
00:59:20,561 --> 00:59:25,962



1531
00:59:25,963 --> 00:59:28,465
AUDIENCE: So it's only dependent on the field in this case.
听众：在这种情况下，它仅取决于字段。 

1532
00:59:28,664 --> 00:59:31,318



1533
00:59:31,318 --> 00:59:33,360
PROFESSOR: Do you guys want to look over Dijkstra
教授：你们想看看Dijkstra吗

1534
00:59:33,360 --> 00:59:34,750
and see what the input to Dijkstra looks like
看看Dijkstra的输入是什么样子

1535
00:59:34,750 --> 00:59:35,791
and why that's different?
为什么不同呢？ 

1536
00:59:35,791 --> 00:59:38,903
Do you think that's worth your time,
您认为这值得您度过吗， 

1537
00:59:38,903 --> 00:59:40,320
given that this is what's standing
鉴于这就是现状

1538
00:59:40,320 --> 00:59:41,286
between you and the weekend?
你和周末之间？ 

1539
00:59:41,485 --> 00:59:42,400



1540
00:59:42,400 --> 00:59:44,269
AUDIENCE: What time is it?
听众：现在几点了？ 

1541
00:59:44,469 --> 00:59:47,404
PROFESSOR: If you guys want to, I'm willing to do it.
教授：如果你们愿意，我愿意这样做。 

1542
00:59:47,405 --> 00:59:49,081
AUDIENCE: It's 4:07.
听众：4:07。 

1543
00:59:49,280 --> 00:59:50,219
I'll stay.
我会留下来。 

1544
00:59:50,219 --> 00:59:51,300



1545
00:59:51,300 --> 00:59:53,480
PROFESSOR: Well, if you guys want to go, you can go.
教授：好吧，如果你们想走，那就可以走。 

1546
00:59:53,679 --> 00:59:55,576
I will draw this for the people who
我会为那些

1547
00:59:55,577 --> 00:59:56,960
still want to know what it looks like.
仍然想知道它是什么样子。 

1548
00:59:57,159 --> 01:00:00,379



1549
01:00:00,380 --> 01:00:01,119
Dijkstra.
迪克斯特拉。 

1550
01:00:01,119 --> 01:00:02,327
What's the input to Dijkstra?
 Dijkstra的输入是什么？ 

1551
01:00:02,327 --> 01:00:03,420



1552
01:00:03,420 --> 01:00:04,590
It's a graph, right?
是图，对不对？ 

1553
01:00:04,590 --> 01:00:06,362
AUDIENCE: Yeah, nodes and edges.
听众：是的，节点和边缘。 

1554
01:00:06,561 --> 01:00:10,581



1555
01:00:10,581 --> 01:00:12,289
PROFESSOR: What does the graph look like?
教授：图形是什么样的？ 

1556
01:00:12,289 --> 01:00:14,170
It's some number of nodes, so it's
它是一些节点，所以

1557
01:00:14,170 --> 01:00:18,119
a single number-- that's the number of nodes--
一个数字-即节点数- 

1558
01:00:18,119 --> 01:00:20,190
that has log v bits in it.
其中有log v位。 

1559
01:00:20,190 --> 01:00:21,269



1560
01:00:21,269 --> 01:00:27,670
And then for each edge, we have three numbers-- first vertex,
然后对于每个边，我们有三个数字-第一个顶点

1561
01:00:27,670 --> 01:00:29,914
second vertex, and the weight.
第二个顶点和权重。 

1562
01:00:30,114 --> 01:00:31,709



1563
01:00:31,710 --> 01:00:33,940
What are the sizes of these numbers?
这些数字的大小是多少？ 

1564
01:00:33,940 --> 01:00:37,530
Log v, log v, and the last one?
 Log v，log v和最后一个？ 

1565
01:00:37,530 --> 01:00:38,844



1566
01:00:38,844 --> 01:00:39,519
AUDIENCE: Log w?
听众：登录w？ 

1567
01:00:39,719 --> 01:00:40,826



1568
01:00:40,827 --> 01:00:41,210
PROFESSOR: OK.
教授：好的。 

1569
01:00:41,409 --> 01:00:42,159
And what's w?
那是什么？ 

1570
01:00:42,159 --> 01:00:43,824



1571
01:00:43,824 --> 01:00:45,099
AUDIENCE: Maximum weight.
听众：最大重量。 

1572
01:00:45,099 --> 01:00:45,766
PROFESSOR: Yeah.
教授：是的。 

1573
01:00:45,766 --> 01:00:52,670



1574
01:00:52,670 --> 01:00:55,159
So this is a property of the field size, right?
这是字段大小的属性，对吗？ 

1575
01:00:55,159 --> 01:00:59,797



1576
01:00:59,797 --> 01:01:00,880
Let's look at v, actually.
让我们看一下v。 

1577
01:01:00,880 --> 01:01:02,960
So we have E edges here, right?
所以我们这里有E条边，对不对？ 

1578
01:01:03,159 --> 01:01:04,730



1579
01:01:04,730 --> 01:01:13,719
So the input size is going to be log v bits plus E times log v
所以输入大小将是log v位加上E乘log v 

1580
01:01:13,719 --> 01:01:16,069
plus log w.
加日志w。 

1581
01:01:16,070 --> 01:01:20,226



1582
01:01:20,425 --> 01:01:22,849
AUDIENCE: How did you get that?
听众：你是怎么得到的？ 

1583
01:01:22,849 --> 01:01:25,860
PROFESSOR: Because I have the edges, so I have E of these.
教授：因为我有边，所以我有这些。 

1584
01:01:25,860 --> 01:01:29,510
I only have one vertex count, but then I have E edges,
我只有一个顶点数，但是我有E个边， 

1585
01:01:29,510 --> 01:01:31,880
and each edge has three numbers, and these
每个边都有三个数字，这些

1586
01:01:31,880 --> 01:01:33,456
are the widths of the numbers.
是数字的宽度。 

1587
01:01:33,456 --> 01:01:35,905
AUDIENCE: Is the adjacent edges to v?
听众：v的相邻边是吗？ 

1588
01:01:35,905 --> 01:01:37,690
Is that right?
那正确吗？ 

1589
01:01:37,690 --> 01:01:39,019
You say you have E edges.
您说您有E条边。 

1590
01:01:39,019 --> 01:01:40,519
PROFESSOR: I'm assuming it's a list,
教授：我假设是清单， 

1591
01:01:40,519 --> 01:01:42,039
so the most compact representation
所以最紧凑的表示

1592
01:01:42,039 --> 01:01:47,110
of edges, I think-- or it might be a reasonably
我认为-或可能是合理的

1593
01:01:47,110 --> 01:01:50,400
compact representation is that you have the list of edges.
紧凑的表示法是您具有边列表。 

1594
01:01:50,400 --> 01:01:52,530
So you have a graph that has five nodes,
因此，您有一个包含五个节点的图， 

1595
01:01:52,530 --> 01:01:56,340
and then you have an edge that goes from 1 to 2,
然后您具有从1到2的边

1596
01:01:56,340 --> 01:02:01,809
and then weight 3, an edge that goes from 1 to 5, weight 4.
然后权重3，即从1到5的边，权重4。 

1597
01:02:01,809 --> 01:02:03,400
AUDIENCE: If you use a number, it's not a--
听众：如果您使用数字，那不是- 

1598
01:02:03,599 --> 01:02:05,848
PROFESSOR: Well, do I need anything else for vertices?
教授：那么，我还需要顶点吗？ 

1599
01:02:05,849 --> 01:02:07,559
Not really, right?
不是真的吧？ 

1600
01:02:07,559 --> 01:02:11,989
AUDIENCE: So v1 and v2 are neighbors of capital V?
听众：那么v1和v2是大写V的邻居吗？ 

1601
01:02:11,989 --> 01:02:15,229
PROFESSOR: So v1, v2, w, these are the first edge.
教授：因此，v1，v2，w是第一个优势。 

1602
01:02:15,230 --> 01:02:16,974



1603
01:02:16,974 --> 01:02:20,299
Each edge has these fields.
每个边都有这些字段。 

1604
01:02:20,300 --> 01:02:22,110



1605
01:02:22,110 --> 01:02:25,280
AUDIENCE: This is the entire graph in one thing.
听众：这是一整个图。 

1606
01:02:25,280 --> 01:02:28,380
PROFESSOR: This is the entire graph as a list of numbers,
教授：这是整个图形，是一个数字列表， 

1607
01:02:28,380 --> 01:02:30,110
and this is how many bits it takes
这是需要多少位

1608
01:02:30,110 --> 01:02:32,427
to represent the graph in a reasonably
以合理的方式表示图形

1609
01:02:32,427 --> 01:02:33,385
compact representation.
紧凑的表示形式。 

1610
01:02:33,385 --> 01:02:38,380



1611
01:02:38,380 --> 01:02:46,550
Now let's say little v is log v, little w is log w.
现在假设小v是对数v，小w是对数w。 

1612
01:02:46,550 --> 01:02:51,755
So then this is order of how many bits do I have here?
那么，这是我在这里有多少位的顺序？ 

1613
01:02:51,755 --> 01:02:55,010



1614
01:02:55,010 --> 01:03:04,800
E times v plus w plus v. I just replaced the logs
 E次v加w加v。我只是替换了日志

1615
01:03:04,800 --> 01:03:06,092
with these variables.
这些变量。 

1616
01:03:06,092 --> 01:03:15,519



1617
01:03:15,519 --> 01:03:17,179
This is how many bits.
这是多少位。 

1618
01:03:17,179 --> 01:03:19,159
Now, how many operations does Dijkstra take?
现在，Dijkstra需要进行多少次手术？ 

1619
01:03:19,159 --> 01:03:20,158
What's the running time?
几点钟了？ 

1620
01:03:20,159 --> 01:03:22,295



1621
01:03:22,295 --> 01:03:24,630
AUDIENCE: Well, it depends on--
听众：嗯，这取决于- 

1622
01:03:24,630 --> 01:03:25,690
AUDIENCE: E log v.
观众：电子日志v。 

1623
01:03:25,690 --> 01:03:27,864
AUDIENCE: Wouldn't it be E plus v?
听众：不是E加v吗？ 

1624
01:03:27,864 --> 01:03:29,690
That's the fastest one, right?
那是最快的吧？ 

1625
01:03:29,690 --> 01:03:33,269
But I think practically, it's only going to be--
但实际上，我认为这只会是- 

1626
01:03:33,269 --> 01:03:34,855
PROFESSOR: So this is E plus v log
教授：这就是E加v的对数

1627
01:03:34,855 --> 01:03:36,230
v, the fastest theoretical limit.
 v，最快的理论极限。 

1628
01:03:36,230 --> 01:03:37,280



1629
01:03:37,280 --> 01:03:43,519
This is still smaller than E log v. This
这仍然小于E log v。 

1630
01:03:43,719 --> 01:03:45,629
is going to make my life easier.
将使我的生活更轻松。 

1631
01:03:45,630 --> 01:03:47,059
So this is smaller than this.
所以这比这个小。 

1632
01:03:47,059 --> 01:03:49,409



1633
01:03:49,409 --> 01:03:53,237
If this thing is polynomial, this is polynomial for sure.
如果这个东西是多项式，那肯定是多项式。 

1634
01:03:53,237 --> 01:03:55,719



1635
01:03:55,719 --> 01:04:06,759
E log v is E times little v. So how many bits in the input?
 E log v是E乘以小v。那么输入中有多少位？ 

1636
01:04:06,760 --> 01:04:08,730
E times v plus w.
 E乘以v加w。 

1637
01:04:08,730 --> 01:04:09,980
How many operations?
多少次手术？ 

1638
01:04:09,980 --> 01:04:13,219
E times v. Any exponential anywhere here?
 E时代v。这里任何地方都有指数吗？ 

1639
01:04:13,219 --> 01:04:17,869



1640
01:04:17,869 --> 01:04:20,059
AUDIENCE: Wouldn't you change the size of v?
听众：您不会更改v的大小吗？ 

1641
01:04:20,059 --> 01:04:26,900



1642
01:04:26,900 --> 01:04:27,869
That looks fine.
看起来不错。 

1643
01:04:27,869 --> 01:04:31,269



1644
01:04:31,269 --> 01:04:35,269
PROFESSOR: Well, so there is a trick that v is 2 to the v,
教授：好吧，有个窍门是v等于v，2 

1645
01:04:35,269 --> 01:04:36,230
right?
对？ 

1646
01:04:36,230 --> 01:04:37,699
So you can say that this is order
所以你可以说这是命令

1647
01:04:37,699 --> 01:04:45,379
of-- so this is definitely bigger than 2
 -绝对大于2 

1648
01:04:45,380 --> 01:04:48,230
to the little v times v, but then you
到小v乘v，但是然后你

1649
01:04:48,230 --> 01:04:49,610
have the same thing in the input.
在输入中有相同的内容。 

1650
01:04:49,610 --> 01:04:53,829
So the input also has at least 2 to the little v times v bits.
因此，输入也至少具有2到小的v乘以v位。 

1651
01:04:53,829 --> 01:04:56,319



1652
01:04:56,320 --> 01:04:57,690
But don't worry about that.
但是不用担心。 

1653
01:04:57,690 --> 01:04:58,476
That's too much.
这太多了。 

1654
01:04:58,476 --> 01:05:00,809
The point is if you're worrying about this, don't worry.
关键是，如果您为此担心，请不要担心。 

1655
01:05:00,809 --> 01:05:02,000
The math still works out.
数学仍然可行。 

1656
01:05:02,000 --> 01:05:03,679



1657
01:05:03,679 --> 01:05:06,299
So whatever you have here as an input,
所以无论您有什么输入

1658
01:05:06,300 --> 01:05:08,250
the running time is going to be a polynomial
运行时间将是一个多项式

1659
01:05:08,250 --> 01:05:09,349
in the size of the input.
输入的大小。 

1660
01:05:09,349 --> 01:05:12,190



1661
01:05:12,190 --> 01:05:14,679
What happens if you double the word size?
如果单词大小加倍会怎样？ 

1662
01:05:14,679 --> 01:05:17,353
What happens if you have bigger weights?
如果您的体重更大，会怎样？ 

1663
01:05:17,353 --> 01:05:19,673
AUDIENCE: Everything like v is multiplied by 2,
听众：v之类的东西都乘以2， 

1664
01:05:19,673 --> 01:05:22,755
and w is multiplied by 2 and everything in this problem,
 w被2乘以这个问题的一切， 

1665
01:05:22,755 --> 01:05:23,255
right?
对？ 

1666
01:05:23,255 --> 01:05:26,210



1667
01:05:26,409 --> 01:05:28,469
PROFESSOR: So if you're doubling the word size,
教授：所以，如果您将字号加倍， 

1668
01:05:28,469 --> 01:05:32,140
then this is going to double, this is going to double.
然后这将增加一倍，这将增加一倍。 

1669
01:05:32,141 --> 01:05:32,889
Everything's fine.
一切安好。 

1670
01:05:32,889 --> 01:05:35,739



1671
01:05:35,739 --> 01:05:38,679
What if you double the size of the weights?
如果将砝码的大小加倍怎么办？ 

1672
01:05:38,679 --> 01:05:41,069



1673
01:05:41,070 --> 01:05:43,550
AUDIENCE: That only adds an extra bit.
听众：这只会增加一点点。 

1674
01:05:43,550 --> 01:05:44,300
PROFESSOR: Sorry.
教授：对不起。 

1675
01:05:44,300 --> 01:05:46,300
So if you double the size of the weight numbers?
那么，如果您将重量数字的大小加倍？ 

1676
01:05:46,300 --> 01:05:47,730



1677
01:05:47,730 --> 01:05:50,809
So if you move from 32-bit weights to 64-bit weights?
那么，如果您从32位权重转移到64位权重？ 

1678
01:05:50,809 --> 01:05:52,746



1679
01:05:52,746 --> 01:05:54,606
AUDIENCE: That's still a constant factor, right?
听众：这仍然是一个不变的因素，对吗？ 

1680
01:05:54,806 --> 01:05:56,639
PROFESSOR: What happens to the running time?
教授：运行时间会怎样？ 

1681
01:05:56,639 --> 01:05:57,400
AUDIENCE: Nothing.
听众：没事。 

1682
01:05:57,400 --> 01:05:57,990
PROFESSOR: Nothing.
教授：没事。 

1683
01:05:58,190 --> 01:05:59,599



1684
01:05:59,599 --> 01:06:01,500
w does not show up in Dijkstra.
 w没有出现在Dijkstra中。 

1685
01:06:01,500 --> 01:06:03,250



1686
01:06:03,250 --> 01:06:05,730
If it would, then we'd be trouble.
如果可以的话，那就麻烦了。 

1687
01:06:05,730 --> 01:06:07,704
It wouldn't be polynomial anymore.
它不再是多项式了。 

1688
01:06:07,704 --> 01:06:08,961
AUDIENCE: But practically, you will
听众：但是实际上，您会

1689
01:06:09,161 --> 01:06:10,743
be accessing that number, right?
正在访问该号码，对吗？ 

1690
01:06:10,744 --> 01:06:11,960
PROFESSOR: Yeah, but that shows up
教授：是的，但是那显示出来了

1691
01:06:12,159 --> 01:06:13,859
in the cost of one operation.
一次手术的成本。 

1692
01:06:13,860 --> 01:06:14,344



1693
01:06:14,344 --> 01:06:16,385
That's why I'm saying this is how many operations
这就是为什么我说这是多少操作

1694
01:06:16,385 --> 01:06:18,625
you do, how many arithmetic operations.
你要做多少算术运算。 

1695
01:06:18,625 --> 01:06:19,780



1696
01:06:19,780 --> 01:06:21,757
Then the model of computation that we use is RAM,
那么我们使用的计算模型是RAM 

1697
01:06:21,956 --> 01:06:23,539
and that says that you can do any math
那说你可以做任何数学

1698
01:06:23,539 --> 01:06:24,769
operation in order one.
操作顺序一。 

1699
01:06:24,769 --> 01:06:27,838



1700
01:06:27,838 --> 01:06:28,554
AUDIENCE: [INAUDIBLE].
听众：[听不清]。 

1701
01:06:28,753 --> 01:06:30,250



1702
01:06:30,250 --> 01:06:33,139
PROFESSOR: So here, my number in the input,
教授：所以这里，我输入的数字， 

1703
01:06:33,139 --> 01:06:35,621
s, which is the size of a weight,
 s，即重量的大小， 

1704
01:06:35,621 --> 01:06:36,869
showed up in the running time.
出现在运行时间。 

1705
01:06:36,869 --> 01:06:38,365



1706
01:06:38,365 --> 01:06:39,824
AUDIENCE: Oh, the size of the input
听众：哦，输入的大小

1707
01:06:39,824 --> 01:06:40,500
showed up in the running time.
出现在运行时间。 

1708
01:06:40,699 --> 01:06:42,448
PROFESSOR: So the size of the input is OK,
教授：所以输入的大小还可以， 

1709
01:06:42,449 --> 01:06:45,403
but one number in the input showed up,
但输入中出现一个数字， 

1710
01:06:45,403 --> 01:06:46,820
whereas here, that's not the case.
而在这里并非如此。 

1711
01:06:46,820 --> 01:06:51,635
The weights do not show up in the running time.
砝码不会在运行时间中显示。 

1712
01:06:51,635 --> 01:06:53,094



1713
01:06:53,094 --> 01:06:55,523
AUDIENCE: So why don't we just always run Dijkstra, then?
听众：那么，为什么我们不总是运行迪杰斯特拉呢？ 

1714
01:06:55,523 --> 01:06:56,580



1715
01:06:56,581 --> 01:06:58,829
PROFESSOR: Actually for this problem, for the knapsack
教授：实际上，对于这个问题，对于背包

1716
01:06:58,829 --> 01:07:02,139
problem, you can't find an algorithm that is polynomial.
问题，您无法找到多项式算法。 

1717
01:07:02,139 --> 01:07:04,119
If you do, there's a $1 million prize for it
如果这样做，您将获得一百万美元的奖金

1718
01:07:04,119 --> 01:07:06,039
because you just proved that p equals mp.
因为您刚刚证明p等于mp。 

1719
01:07:06,039 --> 01:07:10,039



1720
01:07:10,039 --> 01:07:12,259
This is the best we can do for knapsack.
这是我们能为背包做的最好的事情。 

1721
01:07:12,260 --> 01:07:14,748
AUDIENCE: Is counting sort pseudo linear,
听众：正在计数排序伪线性， 

1722
01:07:14,748 --> 01:07:20,840
because you need to have a maximum, a range?
因为需要最大范围？ 

1723
01:07:20,840 --> 01:07:21,920
Does that make sense?
那有意义吗？ 

1724
01:07:21,920 --> 01:07:23,074



1725
01:07:23,074 --> 01:07:23,914
PROFESSOR: Counting sort.
教授：计数排序。 

1726
01:07:24,114 --> 01:07:25,789



1727
01:07:25,789 --> 01:07:27,809
AUDIENCE: Depends on your range.
听众：取决于您的范围。 

1728
01:07:27,809 --> 01:07:31,429
PROFESSOR: Yeah, but the range shows up under a log.
教授：是的，但范围显示在日志下方。 

1729
01:07:31,429 --> 01:07:33,019
You're allowed to have logs.
您可以拥有日志。 

1730
01:07:33,019 --> 01:07:34,340
You're allowed to have log w.
您可以拥有日志w。 

1731
01:07:34,340 --> 01:07:35,347
You're not allowed to have w.
你不允许有w。 

1732
01:07:35,547 --> 01:07:40,163



1733
01:07:40,164 --> 01:07:41,630
It's dependent on the size of the input.
这取决于输入的大小。 

1734
01:07:41,829 --> 01:07:44,730
If you double the number size, then you're
如果将数字大小加倍，那么

1735
01:07:44,730 --> 01:07:48,929
going to have twice as many rounds,
将有两倍的回合， 

1736
01:07:48,929 --> 01:07:51,103
but you don't have an exponential number of rounds.
但您没有指数级的回合。 

1737
01:07:51,103 --> 01:07:53,559



1738
01:07:53,559 --> 01:07:54,059
Sorry.
抱歉。 

1739
01:07:54,059 --> 01:07:55,500
You're thinking of counting sort.
您正在考虑计数排序。 

1740
01:07:55,500 --> 01:07:56,489
I thought radix sort.
我以为基数排序。 

1741
01:07:56,489 --> 01:07:58,030
Radix sort doesn't matter because you
基数排序并不重要，因为您

1742
01:07:58,030 --> 01:08:00,699
assume we can do everything in-- never mind.
假设我们可以做所有事情-没关系。 

1743
01:08:00,699 --> 01:08:01,789
You're right for counting sort.
您是正确的排序排序。 

1744
01:08:01,989 --> 01:08:04,899



1745
01:08:04,900 --> 01:08:05,400
Sorry.
抱歉。 

1746
01:08:05,400 --> 01:08:06,750
You're right for counting sort.
您是正确的排序排序。 

1747
01:08:06,750 --> 01:08:07,250
Sorry.
抱歉。 

1748
01:08:07,250 --> 01:08:09,329
I was confusing counting sort with radix sort.
我把计数排序与基数排序混淆了。 

1749
01:08:09,329 --> 01:08:13,519
So for counting sort, yeah, it's not linear.
因此，对于计数排序，是的，它不是线性的。 

1750
01:08:13,519 --> 01:08:15,500
It's linear in your range size, which
它的范围大小是线性的

1751
01:08:15,500 --> 01:08:19,350
is not linear in the input size, which
输入大小不是线性的

1752
01:08:19,350 --> 01:08:21,016
is why we don't do counting sort.
这就是为什么我们不进行计数排序的原因。 

1753
01:08:21,216 --> 01:08:22,680
We do radix sort.
我们做基数排序。 

1754
01:08:22,680 --> 01:08:25,608



1755
01:08:25,609 --> 01:08:27,863
AUDIENCE: We do counting sort in radix sort?
观众：我们是在以基数排序计数吗？ 

1756
01:08:27,863 --> 01:08:28,529
PROFESSOR: Yeah.
教授：是的。 

1757
01:08:28,529 --> 01:08:31,738
But radix sort limits the size of the range, right?
但是基数排序限制了范围的大小，对吗？ 

1758
01:08:31,738 --> 01:08:33,029
That's the point of radix sort.
这就是基数排序的要点。 

1759
01:08:33,029 --> 01:08:33,369
AUDIENCE: Oh.
听众：哦。 

1760
01:08:33,569 --> 01:08:35,289
I see what you're thinking.
我明白你在想什么。 

1761
01:08:35,289 --> 01:08:37,640
So doing counting sort with each number?
那么对每个数字进行计数排序呢？ 

1762
01:08:37,640 --> 01:08:39,520
AUDIENCE: Right, with really big numbers,
听众：对，有很多数字， 

1763
01:08:39,520 --> 01:08:40,930
taking a really long time.
花了很长时间。 

1764
01:08:40,930 --> 01:08:43,289
AUDIENCE: Yeah, that would take a long time.
听众：是的，这将花费很长时间。 

1765
01:08:43,289 --> 01:08:44,090
PROFESSOR: Yep.
教授：是的。 

1766
01:08:44,090 --> 01:08:45,010
That is very true.
是的。 

1767
01:08:45,010 --> 01:08:48,818
If you try to do pure counting sort on 64-bit numbers,
如果您尝试对64位数字进行纯计数排序， 

1768
01:08:48,818 --> 01:08:50,109
you're going to run out of RAM.
您将用完RAM。 

1769
01:08:50,109 --> 01:08:55,152



1770
01:08:55,351 --> 01:08:57,489
Does this make some sense?
这有意义吗？ 

1771
01:08:57,489 --> 01:08:59,199



1772
01:08:59,199 --> 01:08:59,699
OK.
好。 

1773
01:08:59,699 --> 01:09:00,729



1774
01:09:00,729 --> 01:09:04,608
Promise to look over the other problems, and in return,
承诺要解决其他问题，作为回报， 

1775
01:09:04,608 --> 01:09:06,649
given that I didn't have time to cover them here,
鉴于我没有时间在这里报道它们， 

1776
01:09:06,649 --> 01:09:08,170
I promise to answer any emails you
我保证会回复您的任何电子邮件

1777
01:09:08,170 --> 01:09:09,849
guys might ask me over the weekend.
周末可能会问我。 

1778
01:09:09,849 --> 01:09:10,390
AUDIENCE: Oh.
听众：哦。 

1779
01:09:10,390 --> 01:09:15,390
Awesome.
太棒了

