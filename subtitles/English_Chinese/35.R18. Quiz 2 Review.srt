1
00:00:00,000 --> 00:00:00,080



2
00:00:00,080 --> 00:00:01,800
The following content is provided
提供以下内容

3
00:00:01,800 --> 00:00:04,040
under a Creative Commons license.
根据知识共享许可。 

4
00:00:04,040 --> 00:00:06,879
Your support will help MIT OpenCourseWare continue
您的支持将帮助MIT OpenCourseWare继续

5
00:00:06,879 --> 00:00:10,740
to offer high quality educational resources for free.
免费提供高质量的教育资源。 

6
00:00:10,740 --> 00:00:13,359
To make a donation or view additional materials
捐款或查看其他材料

7
00:00:13,359 --> 00:00:17,236
from hundreds of MIT courses, visit MIT OpenCourseWare
从数百门麻省理工学院的课程中，访问MIT OpenCourseWare 

8
00:00:17,236 --> 00:00:17,861
at ocw.mit.edu.
在ocw.mit.edu。 

9
00:00:17,861 --> 00:00:20,793



10
00:00:20,794 --> 00:00:22,460
PROFESSOR: So you guys might have heard,
教授：所以你们可能听说过

11
00:00:22,460 --> 00:00:24,589
we have a quiz tomorrow.
明天我们有测验。 

12
00:00:24,589 --> 00:00:26,879
So we're going to do a review for that.
因此，我们将对此进行审查。 

13
00:00:26,879 --> 00:00:29,689
Did everyone turn in P set six?
每个人都上交P组六吗？ 

14
00:00:29,690 --> 00:00:30,000
Yes?
是？ 

15
00:00:30,199 --> 00:00:30,899
Good.
好。 

16
00:00:30,899 --> 00:00:34,060
All right, so what's on this quiz?
好吧，那么这个测验是什么？ 

17
00:00:34,060 --> 00:00:37,469
Numerics and graph stuff.
数字和图形的东西。 

18
00:00:37,469 --> 00:00:39,920
So are there any specific pain points?
那么有什么特别的痛点吗？ 

19
00:00:39,920 --> 00:00:40,864
I have problems prepared.
我有准备的问题。 

20
00:00:41,064 --> 00:00:42,750
Now, and then at 8:00 PM is going
现在，然后在晚上8:00 

21
00:00:42,750 --> 00:00:44,700
to be a review session for concepts.
进行概念复习。 

22
00:00:44,700 --> 00:00:47,459
So now problems, 8:00 PM concepts, tomorrow [? Yakim ?]
所以现在有问题，明天8:00 PM概念[亚基姆（Yakim？） 

23
00:00:47,659 --> 00:00:50,579
has office hours at 5:00 PM, conveniently
下班时间为5:00 PM，方便

24
00:00:50,579 --> 00:00:51,699
placed before the quiz.
置于测验之前。 

25
00:00:51,700 --> 00:00:52,359
Poor guy.
可怜的家伙。 

26
00:00:52,359 --> 00:00:55,229
So take advantage of that.
因此，利用这一点。 

27
00:00:55,229 --> 00:00:56,084
So yeah.
是的。 

28
00:00:56,085 --> 00:00:59,460
AUDIENCE: Numerics, on P set we were mostly
观众：数值，在P集上，我们主要是

29
00:00:59,460 --> 00:01:02,140
asked-- you said five, four, whichever came before.
问-您说的是五，四，以先到者为准。 

30
00:01:02,140 --> 00:01:05,140
You mostly asked for the running times and things like that.
您通常要求提供运行时间以及类似信息。 

31
00:01:05,140 --> 00:01:08,369
But the numeric lecture notes are kind of detailed
但是数字讲义有点详细

32
00:01:08,569 --> 00:01:13,319
and go into Newtonian method and all that.
然后进入牛顿法等等。 

33
00:01:13,319 --> 00:01:15,750
How much detail do we need to know?
我们需要知道多少细节？ 

34
00:01:15,750 --> 00:01:18,129
PROFESSOR: So on the P set we make your life easier
教授：所以在P系列上，我们让您的生活更轻松

35
00:01:18,129 --> 00:01:20,799
by giving you the pseudocode of the code
通过给你代码的伪代码

36
00:01:20,799 --> 00:01:23,039
that you needed to implement.
您需要实现的。 

37
00:01:23,040 --> 00:01:26,179
And we ask you one algorithm design question,
我们问您一个算法设计问题， 

38
00:01:26,379 --> 00:01:28,619
the problem of finding the k-th root.
找到第k个根的问题。 

39
00:01:28,620 --> 00:01:30,619
And that required you to understand
那需要你了解

40
00:01:30,819 --> 00:01:32,759
almost everything that was going on.
几乎所有发生的事情。 

41
00:01:32,760 --> 00:01:35,209
We'll want you to understand things that are going on
我们希望您了解正在发生的事情

42
00:01:35,409 --> 00:01:39,950
to come up with something fairly similar to what you've seen.
提出与您所见非常相似的东西。 

43
00:01:39,950 --> 00:01:41,449
So yeah, I know that I told you guys
是的，我知道我告诉过你们

44
00:01:41,450 --> 00:01:42,777
before that ignore numerics.
在此之前，请忽略数字。 

45
00:01:42,777 --> 00:01:44,859
Just close your eyes and pretend it didn't happen.
只要闭上眼睛，假装没有发生。 

46
00:01:44,859 --> 00:01:47,950
Actually it turns out there's a significant amount of numerics
事实证明，有大量的数字

47
00:01:47,950 --> 00:01:48,450
on the quiz.
在测验中。 

48
00:01:48,450 --> 00:01:50,450
So we're going to start with a numerics problem,
因此，我们将从数字问题开始， 

49
00:01:50,450 --> 00:01:51,769
and go through it.
并经历它。 

50
00:01:51,769 --> 00:01:53,500
I'm really sorry about that.
我真的很抱歉。 

51
00:01:53,500 --> 00:01:55,849
Clearly I didn't have my way for this, right?
显然我没有办法，对吗？ 

52
00:01:55,849 --> 00:02:00,089
OK so we started two big things in numerics.
好的，所以我们从数字上开始了两件事。 

53
00:02:00,090 --> 00:02:02,469
Karatsuba, which is really easy compared
 Karatsuba，这真的很容易比较

54
00:02:02,469 --> 00:02:07,230
to Newton which requires a lot of understanding.
牛顿，这需要很多了解。 

55
00:02:07,230 --> 00:02:11,000
So we're going to spend our time on Newton today.
因此，我们今天将花时间在牛顿上。 

56
00:02:11,199 --> 00:02:12,989
OK, so anything aside from that?
好吧，除此之外呢？ 

57
00:02:12,990 --> 00:02:13,612
Yes.
是。 

58
00:02:13,812 --> 00:02:15,728
AUDIENCE: The thing we were just talking about
听众：我们刚才所说的

59
00:02:15,729 --> 00:02:17,757
before you were here was what kind of edges
在你来之前是什么样的优势

60
00:02:17,757 --> 00:02:21,159
are produced by depth first search versus breadth
由深度优先搜索与广度生成

61
00:02:21,159 --> 00:02:21,700
first search?
第一次搜索？ 

62
00:02:21,700 --> 00:02:23,334
AUDIENCE: And why do they matter?
听众：为什么它们很重要？ 

63
00:02:23,334 --> 00:02:24,750
PROFESSOR: And why do they matter.
教授：为什么如此重要。 

64
00:02:24,750 --> 00:02:24,949
OK.
好。 

65
00:02:24,949 --> 00:02:26,009
AUDIENCE: Because it's probably going to be a question on the--
听众：因为这可能是关于以下方面的问题： 

66
00:02:26,009 --> 00:02:28,829
PROFESSOR: So I'm going to go on this very quickly now,
教授：所以我现在要非常快地进行下去， 

67
00:02:28,830 --> 00:02:30,090
because I want to cover problems,
因为我想解决问题， 

68
00:02:30,289 --> 00:02:33,941
but tonight-- this is on the outline for the review.
但今晚-这是要进行审查的大纲。 

69
00:02:33,941 --> 00:02:35,439
So if you guys can make it tonight--
所以如果你们今晚能做到

70
00:02:35,439 --> 00:02:37,105
AUDIENCE: It's late, so I can't make it.
听众：太迟了，所以我做不到。 

71
00:02:37,105 --> 00:02:38,211
PROFESSOR: Sorry.
教授：对不起。 

72
00:02:38,211 --> 00:02:39,919
Well, they are also in the lecture notes.
好吧，它们也在讲义中。 

73
00:02:39,919 --> 00:02:42,109
But I'll go through them very quickly now.
但是，我现在将非常快速地通过它们。 

74
00:02:42,110 --> 00:02:42,840
OK, anything else?
好的，还有其他事情吗？ 

75
00:02:43,039 --> 00:02:47,780



76
00:02:47,780 --> 00:02:49,449
AUDIENCE: Making trees with DFS and BFS,
听众：用DFS和BFS制作树木， 

77
00:02:49,449 --> 00:02:51,048
this might be tonight also.
这也可能是今晚。 

78
00:02:51,049 --> 00:02:52,090
PROFESSOR: Making trees--
教授：植树- 

79
00:02:52,090 --> 00:02:54,050
AUDIENCE: Or your search trees.
听众：或者您的搜索树。 

80
00:02:54,050 --> 00:02:58,500
So instead of-- do you know what I mean by that?
所以，而不是-您知道我的意思吗？ 

81
00:02:58,699 --> 00:03:01,254
PROFESSOR: Do you mean graph transformation?
教授：您的意思是图变换吗？ 

82
00:03:01,254 --> 00:03:03,629
AUDIENCE: So you've got a tree and you search through it.
听众：因此，您有一棵树，然后在其中搜索。 

83
00:03:03,629 --> 00:03:05,627
So then when you're searching through it,
因此，当您搜索它时， 

84
00:03:05,627 --> 00:03:07,460
the result of searching it, you can put that
搜索结果，您可以将其

85
00:03:07,460 --> 00:03:11,099
into almost a binary tree.
变成几乎二叉树。 

86
00:03:11,099 --> 00:03:12,979
PROFESSOR: OK so how BFS and DFS work
教授：好的，那么BFS和DFS是如何工作的

87
00:03:12,979 --> 00:03:15,479
and how they produce trees, I'm assuming, right?
我假设它们是如何产生树木的，对吗？ 

88
00:03:15,479 --> 00:03:17,039
Because if you start out with a tree,
因为如果从一棵树开始， 

89
00:03:17,039 --> 00:03:19,979
everything's going to be really nice and simple.
一切都会变得非常简单。 

90
00:03:19,979 --> 00:03:21,409
AUDIENCE: Right.
听众：对。 

91
00:03:21,409 --> 00:03:22,359
PROFESSOR: Yes?
教授：是吗？ 

92
00:03:22,360 --> 00:03:23,597
AUDIENCE: Bidirectional search.
受众：双向搜索。 

93
00:03:23,796 --> 00:03:24,379
PROFESSOR: OK.
教授：好的。 

94
00:03:24,379 --> 00:03:25,960
AUDIENCE: Is that going to be included?
听众：这将包括在内吗？ 

95
00:03:25,960 --> 00:03:27,501
PROFESSOR: At a very conceptual level
教授：从概念上讲

96
00:03:27,501 --> 00:03:31,460
because we didn't give you a P set on it.
因为我们没有给你一个P集。 

97
00:03:31,460 --> 00:03:32,939
AUDIENCE: Was that what rubrics was?
听众：那是什么专栏？ 

98
00:03:33,139 --> 00:03:34,159
AUDIENCE: Yeah.
听众：是的。 

99
00:03:34,159 --> 00:03:34,810
AUDIENCE: It was bidirectional?
听众：是双向的？ 

100
00:03:34,810 --> 00:03:36,250
AUDIENCE: Well it's not going to be on it so, we're happy.
听众：嗯，这不会继续，所以我们很高兴。 

101
00:03:36,250 --> 00:03:38,040
PROFESSOR: Well I mean we didn't give you--
教授：嗯，我的意思是我们没有给您- 

102
00:03:38,040 --> 00:03:40,909
you kind of had to solve a problem just by-- we have
您只能通过以下方式解决问题： 

103
00:03:40,909 --> 00:03:42,949
to tell you this is bidirectional
告诉你这是双向的

104
00:03:42,949 --> 00:03:44,849
BFS, go code it up.
 BFS，将其编码。 

105
00:03:44,849 --> 00:03:47,250
This is bi-directional Dijkstra, go code it up.
这是双向Dijkstra，请对其进行编码。 

106
00:03:47,250 --> 00:03:51,110
So we're not going to ask you anything too fancy on them.
因此，我们不会再问您任何对它们的幻想。 

107
00:03:51,110 --> 00:03:53,204
So nothing past the P set.
所以没有什么超越P集。 

108
00:03:53,204 --> 00:03:54,620
AUDIENCE: Will you have a question
听众：你有问题吗

109
00:03:54,620 --> 00:03:57,050
like when you were studying BFS, saying
就像你在学习BFS时一样

110
00:03:57,050 --> 00:04:00,112
how there will be levels of graphs?
图的水平将如何？ 

111
00:04:00,312 --> 00:04:00,937
PROFESSOR: Yep.
教授：是的。 

112
00:04:00,937 --> 00:04:02,889
AUDIENCE: Could there be anything about that?
听众：那有什么事吗？ 

113
00:04:02,889 --> 00:04:05,419
PROFESSOR: So levels of graphs as in the levels in BFS?
教授：那么图的水平是否与BFS中的水平相同？ 

114
00:04:05,419 --> 00:04:08,226
Or the levels that we're using when we're building graphs?
还是构建图形时使用的级别？ 

115
00:04:08,227 --> 00:04:09,768
AUDIENCE: Copies of graphs and then--
受众：图表的副本，然后- 

116
00:04:09,768 --> 00:04:10,210
AUDIENCE: Transformations.
听众：转变。 

117
00:04:10,210 --> 00:04:10,370
PROFESSOR: Yep.
教授：是的。 

118
00:04:10,569 --> 00:04:11,979
OK, transformations and layers.
确定，转换和图层。 

119
00:04:11,979 --> 00:04:13,447
Yeah, I think this is important.
是的，我认为这很重要。 

120
00:04:13,447 --> 00:04:15,987
AUDIENCE: Any particular tips on what kind of transformations
听众：有关如何进行转换的任何特定技巧

121
00:04:15,987 --> 00:04:17,014
we might encounter?
我们可能会遇到？ 

122
00:04:17,014 --> 00:04:17,680
PROFESSOR: Sure.
教授：当然可以。 

123
00:04:17,680 --> 00:04:19,882
Problem one has this transformation, problem two--
问题一发生了这种转变，问题二- 

124
00:04:19,882 --> 00:04:20,865
[AUDIENCE LAUGHTER]
 [听众笑声] 

125
00:04:20,865 --> 00:04:24,689
AUDIENCE: Basically, when do we use these?
听众：基本上，我们什么时候使用这些？ 

126
00:04:24,689 --> 00:04:29,439
Is it when we are given more than one parameter for a cause.
当给我们一个以上的原因参数时，是这样吗？ 

127
00:04:29,439 --> 00:04:31,396
PROFESSOR: So I have some problems on this
教授：所以我对此有一些问题

128
00:04:31,396 --> 00:04:32,319
but we have to have a deal.
但我们必须达成协议。 

129
00:04:32,519 --> 00:04:34,560
You guys have to help me go through the problems
你们必须帮助我解决问题

130
00:04:34,560 --> 00:04:36,680
fast enough so that we get here.
足够快，以便我们到达这里。 

131
00:04:36,680 --> 00:04:37,180
OK?
好？ 

132
00:04:37,180 --> 00:04:39,829
So if you know the answer, say the answer.
因此，如果您知道答案，请说出答案。 

133
00:04:39,829 --> 00:04:42,909
Don't let me wait.
不要让我等待。 

134
00:04:42,910 --> 00:04:43,665
OK.
好。 

135
00:04:43,665 --> 00:04:46,660
AUDIENCE: Also, when you run Dijkstra and Bellman-Ford
观众：而且，当您运行Dijkstra和Bellman-Ford时

136
00:04:46,660 --> 00:04:50,139
on a graph, with positive edges, they
在具有正边的图形上， 

137
00:04:50,339 --> 00:04:52,969
produce the same shortest path weight
产生相同的最短路径重量

138
00:04:52,970 --> 00:04:55,370
but might have different trees?
但可能有不同的树？ 

139
00:04:55,569 --> 00:04:57,836
PROFESSOR: Yes, that's conceivable.
教授：是的，这是可以想象的。 

140
00:04:57,836 --> 00:04:58,420
Because they--
因为他们 - 

141
00:04:58,420 --> 00:05:00,449
AUDIENCE: It's one of the questions on spring 2011.
观众：这是2011年春季的问题之一。 

142
00:05:00,649 --> 00:05:01,233
PROFESSOR: OK.
教授：好的。 

143
00:05:01,233 --> 00:05:04,420
So first off, they both have positive edges, so
首先，它们都具有优势

144
00:05:04,420 --> 00:05:06,170
they both work, right?
他们都工作，对不对？ 

145
00:05:06,170 --> 00:05:09,247
If you had to choose, which one would you choose?
如果必须选择，您会选择哪一个？ 

146
00:05:09,247 --> 00:05:10,879
If you had to choose which are going to run,
如果您必须选择要运行的内容， 

147
00:05:11,079 --> 00:05:11,750
which one would you run?
你会跑哪一个？ 

148
00:05:11,750 --> 00:05:12,540
AUDIENCE: Dijkstra.
听众：Dijkstra。 

149
00:05:12,540 --> 00:05:13,735
PROFESSOR: OK, why Dijkstra?
教授：好的，为什么是迪克斯特拉？ 

150
00:05:13,735 --> 00:05:15,069
AUDIENCE: It's faster.
听众：更快。 

151
00:05:15,069 --> 00:05:15,959
PROFESSOR: Faster.
教授：更快。 

152
00:05:15,959 --> 00:05:27,463
OK so positive edges, Dijkstra is faster.
好吧，积极的一面，Dijkstra更快。 

153
00:05:27,463 --> 00:05:29,129
Now if you're going to run both of them,
现在，如果您要同时运行它们， 

154
00:05:29,129 --> 00:05:31,469
they relax edges in different orders.
他们以不同的顺序放松边缘。 

155
00:05:31,470 --> 00:05:31,970
Right?
对？ 

156
00:05:31,970 --> 00:05:34,310
So let's say we have this.
所以说我们有这个。 

157
00:05:34,310 --> 00:05:36,949



158
00:05:36,949 --> 00:05:40,560
I know you guys remember the sequence of diamonds, right?
我知道你们还记得钻石的顺序，对吧？ 

159
00:05:40,560 --> 00:05:43,709
My nice example that shows that the number of paths in a graph
我的漂亮示例显示了图中的路径数

160
00:05:43,709 --> 00:05:46,079
is exponential in the number of vertices.
在顶点数上是指数的。 

161
00:05:46,079 --> 00:05:47,375
So let's have one diamond.
因此，让我们拥有一颗钻石。 

162
00:05:47,375 --> 00:05:50,489
1, 1, 1, 1.
 1 1 1 

163
00:05:50,490 --> 00:05:57,490
S, A, B, T. So say we're looking for shortest path
 S，A，B，T。所以说我们正在寻找最短的路径

164
00:05:57,490 --> 00:05:58,550
from S. Right?
从S.对吗？ 

165
00:05:58,550 --> 00:06:02,660
So the distance from S to S is zero,
所以从S到S的距离是零， 

166
00:06:02,660 --> 00:06:05,730
and everything else starts out as infinity.
其他一切都从无穷开始。 

167
00:06:05,730 --> 00:06:07,069
SA is infinity.
 SA是无限的。 

168
00:06:07,269 --> 00:06:10,149
SB is infinity.
 SB是无穷大。 

169
00:06:10,149 --> 00:06:12,629
ST is infinity.
 ST是无穷大。 

170
00:06:12,629 --> 00:06:14,649
Suppose I relax edges in this order.
假设我按此顺序放松边缘。 

171
00:06:14,649 --> 00:06:18,149
One, two, three, four.
一二三四。 

172
00:06:18,149 --> 00:06:19,189
What am I going to get?
我要得到什么？ 

173
00:06:19,189 --> 00:06:22,540
If I relax SA, then the distance from S to A
如果我放松SA，那么从S到A的距离

174
00:06:22,540 --> 00:06:23,730
is going to become 1, right?
会变成1，对吗？ 

175
00:06:23,730 --> 00:06:26,889
Because it's 0 plus 1 1.
因为它是0加1 1。 

176
00:06:27,089 --> 00:06:30,609
And then the parent of A is going to be S.
然后，A的父级将是S。 

177
00:06:30,610 --> 00:06:34,300
Now say I relax AT.
现在说我放松一下。 

178
00:06:34,300 --> 00:06:38,439
The distance from S to T is going to be 2.
从S到T的距离将为2。 

179
00:06:38,439 --> 00:06:39,639
Sorry.
抱歉。 

180
00:06:39,639 --> 00:06:46,019
Parent of T is going to be A. Right?
 T的父母将是A。对吗？ 

181
00:06:46,019 --> 00:06:50,079
OK now I'm relaxing this one.
好吧，现在我放松一下。 

182
00:06:50,079 --> 00:06:53,399
This is going to become one and the parent of B
这将成为B的父母

183
00:06:53,399 --> 00:06:56,819
is going to become S. And as I'm relaxing this one,
即将成为S。当我放松这一步时， 

184
00:06:56,819 --> 00:07:00,459
nothing happens because I already had a distance of 2.
没有任何反应，因为我已经有2的距离了。 

185
00:07:00,459 --> 00:07:03,009
Now if I relax them in this order instead,
现在，如果我以此顺序放松他们， 

186
00:07:03,009 --> 00:07:07,209
so the bottom one first and the top one is afterwards,
所以最底层的是第一个，之后的是第一个， 

187
00:07:07,209 --> 00:07:09,219
I'm going to get the different path.
我将走不同的道路。 

188
00:07:09,220 --> 00:07:09,560
Right?
对？ 

189
00:07:09,759 --> 00:07:11,849
OK so what path do I have now from S to T?
好吧，现在我从S到T的路是什么？ 

190
00:07:11,850 --> 00:07:15,439



191
00:07:15,439 --> 00:07:16,899
AUDIENCE: Right now you have SAT.
听众：现在你有SAT。 

192
00:07:16,899 --> 00:07:19,250
PROFESSOR: OK, why SAT?
教授：好的，为什么要参加SAT考试？ 

193
00:07:19,250 --> 00:07:20,519
How do you compute the path?
您如何计算路径？ 

194
00:07:20,519 --> 00:07:21,909
Parent pointers, right?
父指针，对不对？ 

195
00:07:21,910 --> 00:07:25,620
Start at T, look at the parent pointer.
从T开始，查看父指针。 

196
00:07:25,819 --> 00:07:26,980
Look at the parent pointer.
查看父指针。 

197
00:07:26,980 --> 00:07:29,939



198
00:07:29,939 --> 00:07:32,550
So because I relax them in this order,
因此，因为我以此顺序放松他们， 

199
00:07:32,550 --> 00:07:35,259
this path was considered before this path.
该路径先于该路径被考虑。 

200
00:07:35,259 --> 00:07:37,819
So the parent pointer of T is A but if I relax them
所以T的父指针是A但如果我放松它们

201
00:07:37,819 --> 00:07:40,541
in the other order, the parent pointer could be B.
按照另一种顺序，父指针可以是B。 

202
00:07:40,541 --> 00:07:42,419
So by the way, this could happen if you're
顺便说一句，如果您

203
00:07:42,420 --> 00:07:43,901
running Dijkstra or Bellman-Ford.
运行Dijkstra或Bellman-Ford。 

204
00:07:44,101 --> 00:07:45,560
Or if you're running Dijkstra, it's
或者，如果您正在运行Dijkstra，那就是

205
00:07:45,560 --> 00:07:48,610
just about how you're going to have the ties separated.
关于您将如何分离关系。 

206
00:07:48,610 --> 00:07:50,319
So your priority queue implementation
因此，您的优先级队列实现

207
00:07:50,319 --> 00:07:52,346
might give you different paths.
可能会给您不同的路径。 

208
00:07:52,346 --> 00:07:53,639
Does it make sense now?
现在有意义吗？ 

209
00:07:53,839 --> 00:07:55,729
So if the order in which edges are relaxed.
因此，如果边缘松弛的顺序。 

210
00:07:55,730 --> 00:07:58,252
That's what defines with path you're going to end up with.
这就是您要最终确定的路径的定义。 

211
00:07:58,452 --> 00:07:59,139
AUDIENCE: OK.
听众：好的。 

212
00:07:59,139 --> 00:08:00,050
PROFESSOR: OK.
教授：好的。 

213
00:08:00,050 --> 00:08:02,480
Hopefully useful.
希望有用。 

214
00:08:02,480 --> 00:08:04,560
All right.
好吧。 

215
00:08:04,560 --> 00:08:06,485
I saw four hands before.
我以前看过四只手。 

216
00:08:06,485 --> 00:08:08,720
AUDIENCE: Oh, just overall, how similar
听众：哦，总体而言，有多相似

217
00:08:08,720 --> 00:08:11,370
is this test compared to previous tests?
该测试与以前的测试相比吗？ 

218
00:08:11,370 --> 00:08:15,069
PROFESSOR: Less algorithm design, more concepts.
教授：更少的算法设计，更多的概念。 

219
00:08:15,069 --> 00:08:15,694
AUDIENCE: Nice.
听众：很好。 

220
00:08:15,694 --> 00:08:17,120
AUDIENCE: Yes.
听众：是的。 

221
00:08:17,120 --> 00:08:19,660
PROFESSOR: Well OK, not less algorithm--
教授：好吧，不少算法- 

222
00:08:19,660 --> 00:08:21,889
so it's not going to be as much out-of-the-box thinking,
因此不会有太多的开箱即用的想法， 

223
00:08:22,089 --> 00:08:25,259
it's going to be a lot more of what we drilled already.
这将是我们已经钻探的更多内容。 

224
00:08:25,259 --> 00:08:27,120
So as a hint, what kind of problem
所以暗示一下，什么样的问题

225
00:08:27,120 --> 00:08:29,204
did we practice over, and over, and over?
我们一遍又一遍地练习吗？ 

226
00:08:29,404 --> 00:08:30,589
AUDIENCE: States
观众：州

227
00:08:30,589 --> 00:08:31,509
PROFESSOR: OK.
教授：好的。 

228
00:08:31,509 --> 00:08:33,360
Graph transformation, right?
图变换，对不对？ 

229
00:08:33,360 --> 00:08:35,451
So chances are you'll see that.
因此，您很可能会看到这一点。 

230
00:08:35,451 --> 00:08:37,340
AUDIENCE: Wait, what's graph transformation?
听众：等等，图变换是什么？ 

231
00:08:37,340 --> 00:08:42,658
[LAUGHTER]
 [笑声] 

232
00:08:42,658 --> 00:08:44,700
PROFESSOR: So we start with a complicated problem
教授：所以我们从一个复杂的问题开始

233
00:08:44,700 --> 00:08:48,219
and reduce it to a shortest path problem or to a shortest length
并将其减少到最短路径问题或最短长度

234
00:08:48,419 --> 00:08:49,089
path problem.
路径问题。 

235
00:08:49,090 --> 00:08:52,200



236
00:08:52,200 --> 00:08:52,609
OK.
好。 

237
00:08:52,809 --> 00:08:54,659
Cool.
凉。 

238
00:08:54,659 --> 00:08:57,429
So that being said, let's go.
话虽这么说，走吧。 

239
00:08:57,429 --> 00:09:00,479
Numerics, everyone's favorite topic.
数字，每个人最喜欢的话题。 

240
00:09:00,480 --> 00:09:04,719
So suppose we're trying to compute this.
因此，假设我们正在尝试对此进行计算。 

241
00:09:04,919 --> 00:09:08,199
Cube root of 6,006.
立方根为6,006。 

242
00:09:08,200 --> 00:09:10,829
And the problem statement says this,
问题陈述说， 

243
00:09:11,029 --> 00:09:17,079
you start out with an initial approximation of one,
您开始时的初始近似值为1， 

244
00:09:17,080 --> 00:09:25,609
and it wants two approximations after that.
然后需要两个近似值。 

245
00:09:25,809 --> 00:09:28,679
The problem also tells you which function we're going to use.
该问题还告诉您我们将使用哪个功能。 

246
00:09:28,679 --> 00:09:30,539
But why don't we make this fun and try
但是，为什么我们不做这个有趣的尝试

247
00:09:30,539 --> 00:09:34,414
to guess what the function will be?
猜猜函数是什么？ 

248
00:09:34,414 --> 00:09:45,329
AUDIENCE: x cubed minus 6,006?
观众：x减6006？ 

249
00:09:45,330 --> 00:09:47,350
PROFESSOR: OK. x cubed minus 6,006
教授：好的。 x立方减6,006 

250
00:09:47,350 --> 00:09:49,288
why did I choose this function?
为什么选择此功能？ 

251
00:09:49,288 --> 00:09:49,830
Well, not me.
好吧，不是我。 

252
00:09:49,830 --> 00:09:51,378
Why did you choose this function?
为什么选择此功能？ 

253
00:09:51,378 --> 00:09:52,378
AUDIENCE: It's the root.
听众：这是根源。 

254
00:09:52,378 --> 00:09:55,129



255
00:09:55,129 --> 00:10:02,939
PROFESSOR: OK so reason number one-- right?
教授：好的，所以原因一是吧？ 

256
00:10:02,940 --> 00:10:03,897
Important.
重要。 

257
00:10:03,897 --> 00:10:05,730
Has to be zero at the answer, because that's
答案必须为零，因为那是

258
00:10:05,730 --> 00:10:07,740
what Newton's method gives us.
牛顿的方法给我们带来了什么。 

259
00:10:07,740 --> 00:10:08,990
And what else?
还有什么？ 

260
00:10:08,990 --> 00:10:10,460
AUDIENCE: Multiplication is easy.
听众：乘法很容易。 

261
00:10:10,460 --> 00:10:14,389



262
00:10:14,389 --> 00:10:16,370
PROFESSOR: OK.
教授：好的。 

263
00:10:16,370 --> 00:10:19,159
So it's easy to compute whatever Newton's method wants
所以很容易计算牛顿方法想要的

264
00:10:19,159 --> 00:10:20,620
us to compute.
我们来计算。 

265
00:10:20,620 --> 00:10:23,570
What does Newton's method want us to compute?
牛顿的方法要我们计算什么？ 

266
00:10:23,570 --> 00:10:28,230
So given an approximation, xi, how do we
因此，给定一个近似值xi 

267
00:10:28,230 --> 00:10:31,320
get to the next approximation, xi plus 1.
得到下一个近似值xi加1。 

268
00:10:31,320 --> 00:10:32,187
Formula.
式。 

269
00:10:32,187 --> 00:10:34,519
By the way, this formula should be on your cheat sheets.
顺便说一句，这个公式应该在备忘单上。 

270
00:10:34,519 --> 00:10:37,563
If it's not, no sympathy for you.
如果不是这样，那么您就不会同情。 

271
00:10:37,563 --> 00:10:39,515
AUDIENCE: I don't remember.
听众：我不记得了。 

272
00:10:39,515 --> 00:10:44,884
xi plus f over f prime.
 xi加f超过f素数。 

273
00:10:44,884 --> 00:10:51,250



274
00:10:51,250 --> 00:10:52,440
AUDIENCE: Where's the prime?
听众：最主要的地方在哪里？ 

275
00:10:52,440 --> 00:10:54,240
AUDIENCE: Prime's on the bottom.
听众：Prime在最下面。 

276
00:10:54,240 --> 00:10:56,320
PROFESSOR: So yeah, where's the prime?
教授：是的，总理在​​哪里？ 

277
00:10:56,320 --> 00:10:58,359
And is this right?
是这样吗？ 

278
00:10:58,559 --> 00:11:01,975



279
00:11:01,975 --> 00:11:05,392
AUDIENCE: Isn't there a constant?
听众：不是常数吗？ 

280
00:11:05,392 --> 00:11:06,860
AUDIENCE: Isn't it minus?
听众：不是吗？ 

281
00:11:06,860 --> 00:11:08,341
PROFESSOR: Isn't it minus?
教授：不是吗？ 

282
00:11:08,341 --> 00:11:11,287
AUDIENCE: Maybe.
听众：也许吧。 

283
00:11:11,287 --> 00:11:12,269
AUDIENCE: There you go.
听众：你去。 

284
00:11:12,269 --> 00:11:13,389
PROFESSOR: So yeah, if you guys start out
教授：是的，如果你们开始

285
00:11:13,389 --> 00:11:15,639
with the wrong formula you'd get the wrong answer.
用错误的公式，您将得到错误的答案。 

286
00:11:15,639 --> 00:11:17,490
Again, no sympathy.
再次，没有同情。 

287
00:11:17,490 --> 00:11:20,500
So get that on your sheets.
所以把它放在你的床单上。 

288
00:11:20,500 --> 00:11:23,570
OK so this is what we need to compute, right?
好，这就是我们需要计算的，对吗？ 

289
00:11:23,570 --> 00:11:26,330
You start with an approximation and you have to subtract this.
您从一个近似值开始，必须减去它。 

290
00:11:26,330 --> 00:11:29,590
So this has to be easy to compute.
因此，这必须易于计算。 

291
00:11:29,590 --> 00:11:35,450
What if I chose instead a very nice function.
如果我选择了一个非常好的功能该怎么办。 

292
00:11:35,450 --> 00:11:37,450
x-- sorry, x minus.
 x-抱歉，x减。 

293
00:11:37,450 --> 00:11:40,750



294
00:11:40,750 --> 00:11:44,432
This is clearly zero where I want it to be, right?
显然我希望它是零，对吗？ 

295
00:11:44,432 --> 00:11:46,056
AUDIENCE: But we don't know what six--
听众：但是我们不知道六个- 

296
00:11:46,056 --> 00:11:47,479
PROFESSOR: But if I'm trying to compute
教授：但是如果我要计算

297
00:11:47,679 --> 00:11:51,120
the successive approximations, very good, I'm getting what?
逐次逼近法，非常好，我得到了什么？ 

298
00:11:51,120 --> 00:11:59,669
f of x over f prime of x is x minus square root 3 6,006
 x在f的素数上的f是x减去平方根3 6,006 

299
00:11:59,669 --> 00:12:02,814
over-- what's the derivative of this?
结束-这是什么派生？ 

300
00:12:02,815 --> 00:12:03,490
AUDIENCE: One.
听众：一。 

301
00:12:03,490 --> 00:12:04,879
PROFESSOR: One.
教授：一个。 

302
00:12:04,879 --> 00:12:07,139
So I haven't done anything, right?
所以我什么也没做，对吧？ 

303
00:12:07,139 --> 00:12:09,370
In order to compute the successive approximation,
为了计算逐次逼近， 

304
00:12:09,370 --> 00:12:11,450
I have to know this number.
我必须知道这个号码。 

305
00:12:11,450 --> 00:12:14,819
So this doesn't get me anywhere, that's why it's a bad function.
因此，这无助于我，这就是为什么它的功能不好。 

306
00:12:15,019 --> 00:12:18,289
By the way, it's not enough that this is easy to compute.
顺便说一句，简单计算是不够的。 

307
00:12:18,289 --> 00:12:22,919
What you want is this guy has to be easy to compute.
您想要的是这个家伙必须易于计算。 

308
00:12:22,919 --> 00:12:24,769
In the case of division, we had a function
在除法的情况下，我们有一个功能

309
00:12:24,769 --> 00:12:26,279
that looked pretty wacky.
看起来很古怪。 

310
00:12:26,279 --> 00:12:29,360
But then when we divided that by the derivative,
但是当我们将其除以导数时， 

311
00:12:29,360 --> 00:12:31,690
we got something reasonably nice.
我们得到了相当不错的东西。 

312
00:12:31,690 --> 00:12:34,240
So this has to be easy to compute.
因此，这必须易于计算。 

313
00:12:34,240 --> 00:12:36,990
AUDIENCE: So we changed it from that one to this one just
听众：所以我们把它从那一个改为了这个

314
00:12:36,990 --> 00:12:38,994
because this one is easier or--
因为这比较容易，或者- 

315
00:12:38,994 --> 00:12:40,209
PROFESSOR: So we're using this one
教授：所以我们正在使用这个

316
00:12:40,409 --> 00:12:44,475
because this one-- let's see how easy this one is to compute.
因为这一点-让我们来看看计算这一点有多容易。 

317
00:12:44,475 --> 00:12:46,720
Computing this one requires that you know the answer
计算这一项需要您知道答案

318
00:12:46,720 --> 00:12:48,600
to your original problem, which is not cool.
原来的问题，这并不酷。 

319
00:12:48,600 --> 00:12:50,335
Right.
对。 

320
00:12:50,535 --> 00:12:53,309
So you're trying to compute this number.
因此，您正在尝试计算此数字。 

321
00:12:53,309 --> 00:12:55,419
But if you use this, Newton's approximation
但是如果使用这个，牛顿的近似值

322
00:12:55,419 --> 00:12:57,860
requires that you compute this.
要求您对此进行计算。 

323
00:12:57,860 --> 00:13:00,061
So you have to know this here.
所以你必须在这里知道这一点。 

324
00:13:00,261 --> 00:13:02,469
Which is what you're trying to do in the first place.
首先是您要尝试的。 

325
00:13:02,470 --> 00:13:03,677
AUDIENCE: Wait, I'm confused.
听众：等等，我很困惑。 

326
00:13:03,677 --> 00:13:05,649
We went from x cubed minus 6 over 6
我们从x立方减6减去6 

327
00:13:05,649 --> 00:13:07,919
to x minus cube root of 6 over 6.
减去x减去6的立方根6。 

328
00:13:07,919 --> 00:13:08,656
So what's your--
那你是... 

329
00:13:08,657 --> 00:13:10,240
PROFESSOR: So this is a good function.
教授：这是一个很好的功能。 

330
00:13:10,240 --> 00:13:11,100
We can use this.
我们可以使用它。 

331
00:13:11,100 --> 00:13:12,889
This is a bad function and I was asking
这是一个不好的功能，我问

332
00:13:12,889 --> 00:13:14,080
why is this a bad function.
为什么这是一个不好的功能。 

333
00:13:14,080 --> 00:13:15,912
AUDIENCE: Oh, OK.
听众：哦，好。 

334
00:13:15,912 --> 00:13:16,830
PROFESSOR: OK.
教授：好的。 

335
00:13:16,830 --> 00:13:18,950
So lets see, if we try to compute it using this,
因此，让我们看看，如果我们尝试使用此方法进行计算， 

336
00:13:18,950 --> 00:13:21,215
what do we get?
我们得到什么？ 

337
00:13:21,215 --> 00:13:23,125
xi minus
西减

338
00:13:23,125 --> 00:13:25,543
AUDIENCE: x cubed minus 6,006.
观众：x减6006。 

339
00:13:25,543 --> 00:13:27,487
PROFESSOR: X cubed minus 6,006.
教授：X立方减6,006。 

340
00:13:27,488 --> 00:13:28,440
Divided by--
除以 - 

341
00:13:28,640 --> 00:13:29,432
AUDIENCE: 3x cubed.
观众：3倍立方体。 

342
00:13:29,432 --> 00:13:32,360



343
00:13:32,360 --> 00:13:34,509
PROFESSOR: OK.
教授：好的。 

344
00:13:34,509 --> 00:13:38,062
So someone simplify this for me.
所以有人为我简化了。 

345
00:13:38,062 --> 00:13:47,432
AUDIENCE: 6i minus x over 3 plus 6,006 over 3 squared.
观众：6i减去x超过3，再加上6006超过3的平方。 

346
00:13:47,432 --> 00:13:48,816
Oh, well.
那好吧。 

347
00:13:48,816 --> 00:13:49,514
It's 2,002.
 2002 

348
00:13:49,514 --> 00:13:51,056
PROFESSOR: I'll choose the easy step.
教授：我将选择简单的步骤。 

349
00:13:51,056 --> 00:13:53,998



350
00:13:53,998 --> 00:13:54,498
OK.
好。 

351
00:13:54,498 --> 00:14:01,970



352
00:14:01,970 --> 00:14:02,845
So what's x1?
那么x1是什么？ 

353
00:14:02,845 --> 00:14:10,029



354
00:14:10,029 --> 00:14:12,509
AUDIENCE: You plug in x0.
听众：您插入x0。 

355
00:14:12,509 --> 00:14:14,316
PROFESSOR: OK.
教授：好的。 

356
00:14:14,316 --> 00:14:16,584
I heard a 2,002.
我听到了2002。 

357
00:14:16,784 --> 00:14:19,159
I don't think it's-- it's very close.
我不认为这很接近。 

358
00:14:19,159 --> 00:14:20,584
AUDIENCE: 2,002 and two thirds.
听众：2,002和三分之二。 

359
00:14:20,585 --> 00:14:22,490
0.67.
 0.67。 

360
00:14:22,490 --> 00:14:24,109
PROFESSOR: OK, cool.
教授：好的，很酷。 

361
00:14:24,309 --> 00:14:28,229
So 0.67, let's get to that later.
所以0.67，让我们稍后再谈。 

362
00:14:28,230 --> 00:14:31,210
I don't like fractional numbers.
我不喜欢小数。 

363
00:14:31,210 --> 00:14:32,960
I mean this is the right answer math-wise,
我的意思是这是数学上正确的答案， 

364
00:14:32,960 --> 00:14:35,229
but we'll get to that because if we want to code this up,
但是我们会解决的，因为如果我们要对此进行编码， 

365
00:14:35,429 --> 00:14:37,179
we probably don't want fractional numbers.
我们可能不想要分数。 

366
00:14:37,179 --> 00:14:38,729
So very good point there.
那里很好。 

367
00:14:38,730 --> 00:14:40,940
What if I want to compute x2?
如果我想计算x2怎么办？ 

368
00:14:40,940 --> 00:14:43,350
I take this guy and I plug it into where?
我带这个家伙，我把它插入哪里？ 

369
00:14:43,350 --> 00:14:47,019



370
00:14:47,019 --> 00:14:49,730
This thing over here, right?
这东西在这里，对吗？ 

371
00:14:49,730 --> 00:14:51,750
So this way I can compute approximations
这样我就可以计算近似值

372
00:14:51,750 --> 00:14:56,240
that get closer and closer to my original value.
越来越接近我的原始价值。 

373
00:14:56,240 --> 00:14:56,740
OK.
好。 

374
00:14:56,740 --> 00:14:57,820
Does this ring a bell?
这会响吗？ 

375
00:14:57,820 --> 00:15:01,229



376
00:15:01,429 --> 00:15:03,050
Yes, everyone is happy with this?
是的，每个人对此都很满意？ 

377
00:15:03,051 --> 00:15:03,349
Cool.
凉。 

378
00:15:03,549 --> 00:15:06,098



379
00:15:06,099 --> 00:15:07,189
So how about the initial guess?
那么最初的猜测呢？ 

380
00:15:07,389 --> 00:15:10,529
Here we started with a known initial guess.
在这里，我们从一个已知的初始猜测开始。 

381
00:15:10,529 --> 00:15:11,971
Is this a good guess?
这是一个很好的猜测吗？ 

382
00:15:11,971 --> 00:15:14,326
AUDIENCE: It's a really bad guess.
听众：这是一个很糟糕的猜测。 

383
00:15:14,326 --> 00:15:16,450
2,002?
 2002 

384
00:15:16,450 --> 00:15:17,450
PROFESSOR: No, I mean 1.
教授：不，我是说1。 

385
00:15:17,450 --> 00:15:17,950
AUDIENCE: 1?
听众：1？ 

386
00:15:17,950 --> 00:15:19,699
That's also a really bad guess.
这也是一个非常糟糕的猜测。 

387
00:15:19,899 --> 00:15:21,370
AUDIENCE: Why would you even ask?
听众：你为什么还要问？ 

388
00:15:21,370 --> 00:15:23,330
AUDIENCE: 11 and a half.
听众：11岁半。 

389
00:15:23,330 --> 00:15:24,819
PROFESSOR: All right.
教授：好的。 

390
00:15:25,019 --> 00:15:29,000
So you're saying 11 and a half would be a nice guess.
所以您说的是11点半是一个不错的猜测。 

391
00:15:29,000 --> 00:15:30,919
So, first off, let's see, what do we
所以，首先，让我们看看

392
00:15:30,919 --> 00:15:34,639
need to-- what does Newton's algorithm guarantee?
需要-牛顿算法保证什么？ 

393
00:15:34,639 --> 00:15:38,120
What-- if the guess is really, really bad,
怎样-如果猜测真的非常糟糕， 

394
00:15:38,120 --> 00:15:40,029
would we get an answer all the time?
我们会一直得到答案吗？ 

395
00:15:40,029 --> 00:15:42,019
Maybe takes forever but we'll get an answer.
也许需要永远，但是我们会得到答案。 

396
00:15:42,019 --> 00:15:43,375
True or false?
对或错？ 

397
00:15:43,375 --> 00:15:44,000
AUDIENCE: True.
听众：是的。 

398
00:15:44,000 --> 00:15:46,476



399
00:15:46,476 --> 00:15:47,309
PROFESSOR: Not true.
教授：不对。 

400
00:15:47,309 --> 00:15:48,586
Sorry.
抱歉。 

401
00:15:48,586 --> 00:15:50,919
AUDIENCE: But it has to be right for your answer to be--
听众：但是您的答案必须正确- 

402
00:15:50,919 --> 00:15:53,455
PROFESSOR: OK, so what does Newton's method guarantee?
教授：好的，那么牛顿法能保证什么呢？ 

403
00:15:53,456 --> 00:15:54,686
[INTERPOSING VOICES]
 [插入语音] 

404
00:15:54,886 --> 00:15:55,719
PROFESSOR: Yep, yep.
教授：是的。 

405
00:15:55,720 --> 00:15:57,584
So what is the fancy math name for that?
那么，那花哨的数学名字是什么？ 

406
00:15:57,784 --> 00:15:59,659
AUDIENCE: Quadratic convergence or something.
听众：二次收敛或类似的东西。 

407
00:15:59,659 --> 00:16:01,539
PROFESSOR: Quadratic convergence, all right.
教授：二次收敛，很好。 

408
00:16:01,539 --> 00:16:03,769
So this is what Newton guarantees.
这就是牛顿所保证的。 

409
00:16:03,769 --> 00:16:06,529



410
00:16:06,529 --> 00:16:11,970
Quadratic-- so what does this mean?
二次方-这是什么意思？ 

411
00:16:11,970 --> 00:16:15,740
For all your approximations, they're all going to be xi.
对于您的所有近似值，它们都是xi。 

412
00:16:15,740 --> 00:16:20,979
If we write them as true answer times 1 plus error, i.
如果我们将它们写为真实答案乘以1加错误，即为i。 

413
00:16:21,179 --> 00:16:25,639
So this error is the relative error of the approximation.
因此，该误差是近似值的相对误差。 

414
00:16:25,639 --> 00:16:32,169
Newtons method guarantees that the error at each step
牛顿法保证了每一步的误差

415
00:16:32,169 --> 00:16:35,059
is squared.
平方。 

416
00:16:35,059 --> 00:16:41,119
So if this guy-- if E0 is greater than 1,
因此，如果这个人-如果E0大于1， 

417
00:16:41,120 --> 00:16:43,328
would we get an answer?
我们会得到答案吗？ 

418
00:16:43,328 --> 00:16:43,870
AUDIENCE: No.
听众：不。 

419
00:16:43,870 --> 00:16:47,820



420
00:16:47,820 --> 00:16:50,379
PROFESSOR: OK so what we need?
教授：好的，我们需要什么？ 

421
00:16:50,379 --> 00:16:54,080
What's the minimum that we need?
我们需要的最低限度是多少？ 

422
00:16:54,080 --> 00:16:58,139
E0 has to be between what and what?
 E0必须介于什么和什么之间？ 

423
00:16:58,139 --> 00:17:00,539
AUDIENCE: Negative 1?
观众：负面1？ 

424
00:17:00,539 --> 00:17:02,459
AUDIENCE: Is it negative 1, 1 or 0 and 1?
观众：是负数1、1还是0和1？ 

425
00:17:02,460 --> 00:17:04,000
AUDIENCE: It would be 0 and 1, right?
听众：会是0和1，对吧？ 

426
00:17:04,000 --> 00:17:05,819
Because won't it be less than one?
因为会不会少于一个？ 

427
00:17:05,819 --> 00:17:07,279
AUDIENCE: Negative 1.
听众：负面1。 

428
00:17:07,279 --> 00:17:09,200
AUDIENCE: Oh, absolute value.
听众：哦，绝对值。 

429
00:17:09,200 --> 00:17:11,053
PROFESSOR: I think if you score something smaller
教授：我想如果您的分数较小

430
00:17:11,253 --> 00:17:12,669
than negative 1 you get a positive
比负1你得到正

431
00:17:12,670 --> 00:17:15,490
and then-- so, let's say this works.
然后-可以说这可行。 

432
00:17:15,490 --> 00:17:21,000
So then x0 has to be between what and what
因此，x0必须介于什么和什么之间

433
00:17:21,000 --> 00:17:22,484
in relation to the real answer?
相对于真正的答案？ 

434
00:17:22,484 --> 00:17:29,909



435
00:17:29,910 --> 00:17:35,355
AUDIENCE: The real answer minus x0 over [INAUDIBLE].
听众：实际答案是[听不清]时减去x0。 

436
00:17:35,355 --> 00:17:37,479



437
00:17:37,479 --> 00:17:38,986
AUDIENCE: 2 times the actual answer is 0.
听众：实际答案的2倍为0。 

438
00:17:39,186 --> 00:17:42,769



439
00:17:42,769 --> 00:17:45,579
PROFESSOR: OK so this is a sucky guess.
教授：好的，这是一个令人毛骨悚然的猜测。 

440
00:17:45,579 --> 00:17:47,319
We can do a lot better, but at least it
我们可以做得更好，但至少可以做到

441
00:17:47,319 --> 00:17:48,528
will make the thing converge.
会使事情收敛。 

442
00:17:48,528 --> 00:17:51,319



443
00:17:51,319 --> 00:17:51,819
Fair enough?
很公平？ 

444
00:17:51,819 --> 00:17:55,710



445
00:17:55,710 --> 00:17:58,669
OK now what if I want a good guess?
好吧，如果我想猜猜该怎么办？ 

446
00:17:58,869 --> 00:18:03,519
First off, let's backtrack to a more general problem
首先，让我们回溯到更普遍的问题

447
00:18:03,519 --> 00:18:05,329
because this is easy, right?
因为这很容易，对吗？ 

448
00:18:05,329 --> 00:18:08,369
To plug it into our calculator and you have the answer.
要将其插入我们的计算器，您将获得答案。 

449
00:18:08,369 --> 00:18:13,972
So what if I'm trying to compute cube root of r.
那么，如果我尝试计算r的立方根怎么办。 

450
00:18:13,972 --> 00:18:16,176
Can everyone see, by the way?
大家可以顺便看到吗？ 

451
00:18:16,176 --> 00:18:16,759
AUDIENCE: Yes.
听众：是的。 

452
00:18:16,759 --> 00:18:17,015
AUDIENCE: Mhmm.
听众：嗯。 

453
00:18:17,015 --> 00:18:17,397
PROFESSOR: OK.
教授：好的。 

454
00:18:17,597 --> 00:18:20,345
So I'm trying to compute cube root of r.
所以我正在尝试计算r的立方根。 

455
00:18:20,345 --> 00:18:21,809
r is a number.
 r是一个数字。 

456
00:18:21,809 --> 00:18:26,046
Suppose I'm trying to compute, for example, cube root of 2.
假设我尝试计算例如2的立方根。 

457
00:18:26,046 --> 00:18:29,129



458
00:18:29,329 --> 00:18:33,129
What's the first thing I need to do?
我需要做的第一件事是什么？ 

459
00:18:33,130 --> 00:18:34,819
I'm going to code this up, by the way.
顺便说一下，我将对此进行编码。 

460
00:18:35,019 --> 00:18:37,060
Well, not me but suppose we want to code this up.
好吧，不是我，而是假设我们要对此进行编码。 

461
00:18:37,060 --> 00:18:39,155
What's the first thing we want to do?
我们要做的第一件事是什么？ 

462
00:18:39,155 --> 00:18:42,000
AUDIENCE: I think we want an initial guess at a function.
听众：我认为我们想对某个功能进行初步猜测。 

463
00:18:42,000 --> 00:18:44,250
PROFESSOR: OK so we're going to need an initial guess.
教授：好的，我们需要初步猜测。 

464
00:18:44,250 --> 00:18:44,930
That's good.
那很好。 

465
00:18:44,930 --> 00:18:49,769



466
00:18:49,769 --> 00:18:52,259
And what else do we want?
我们还想要什么？ 

467
00:18:52,259 --> 00:18:54,549
AUDIENCE: We need to decide how much precision we want.
听众：我们需要决定想要多少精度。 

468
00:18:54,549 --> 00:18:55,174
PROFESSOR: Yep.
教授：是的。 

469
00:18:55,174 --> 00:18:56,335
And why is that?
为什么是这样？ 

470
00:18:56,335 --> 00:18:59,044
AUDIENCE: Because this cube root of 2 is 1.
听众：因为这个2的立方根是1。 

471
00:18:59,244 --> 00:19:01,669
If you round down.
如果您舍入。 

472
00:19:01,670 --> 00:19:04,379
That doesn't tell us very much.
那并不能告诉我们太多。 

473
00:19:04,579 --> 00:19:07,021
I don't know, we don't like the fractions.
我不知道，我们不喜欢这些分数。 

474
00:19:07,021 --> 00:19:08,480
PROFESSOR: We don't like fractions.
教授：我们不喜欢分数。 

475
00:19:08,480 --> 00:19:10,670
OK, why don't we like fractions?
好吧，为什么我们不喜欢分数呢？ 

476
00:19:10,670 --> 00:19:11,835
It's a lot easier to code.
编写代码要容易得多。 

477
00:19:11,835 --> 00:19:12,990
AUDIENCE: Decimal point there.
听众：小数点在那里。 

478
00:19:12,990 --> 00:19:14,640
PROFESSOR: Yep, you have to deal with the decimal point
教授：是的，您必须处理小数点

479
00:19:14,640 --> 00:19:15,397
and we don't like that.
而且我们不喜欢这样。 

480
00:19:15,597 --> 00:19:17,912
So we want to take this problem, and we
所以我们想解决这个问题，我们

481
00:19:17,912 --> 00:19:20,000
want to move it into integer land.
想要将其移动到整数域。 

482
00:19:20,000 --> 00:19:21,750
So what we did here has fractions.
因此，我们在这里所做的事情很少。 

483
00:19:21,750 --> 00:19:23,980
We don't like that because that's a pain to code.
我们不喜欢那样，因为那是编写代码的痛苦。 

484
00:19:23,980 --> 00:19:26,779
We didn't make you code fractions on the P set, right?
我们没有让您在P集上编码分数，对吗？ 

485
00:19:26,779 --> 00:19:29,190
So then we better know how to avoid fractions
所以我们更好地知道如何避免分数

486
00:19:29,190 --> 00:19:32,670
if you want to solve real life problems.
如果您想解决现实生活中的问题。 

487
00:19:32,670 --> 00:19:36,109
So we're going to say that we're happy with some amount
所以我们要说，我们对一定金额感到满意

488
00:19:36,309 --> 00:19:38,109
of precision in the answer.
精确的答案。 

489
00:19:38,109 --> 00:19:39,919
And then we're going to do something
然后我们要做点什么

490
00:19:39,920 --> 00:19:42,475
that lets us do all our computations in integer land.
这样我们就可以在整数域中进行所有计算。 

491
00:19:42,675 --> 00:19:49,339



492
00:19:49,339 --> 00:19:51,720
Because that's a happy place.
因为那是一个快乐的地方。 

493
00:19:51,720 --> 00:20:00,019
So how do I-- suppose I'm working in base B
那我怎么-假设我在B基地工作

494
00:20:00,019 --> 00:20:03,720
and I want d digits of precision.
我想要d位精度。 

495
00:20:03,720 --> 00:20:06,299
What do I want to compute?
我要计算什么？ 

496
00:20:06,299 --> 00:20:08,806
How do I transform the problem in that way?
如何以这种方式解决问题？ 

497
00:20:08,806 --> 00:20:09,660
Yes?
是？ 

498
00:20:09,660 --> 00:20:15,061
AUDIENCE: You multiply 2 root 3 times B to the d.
听众：将2的根乘以B的3倍。 

499
00:20:15,261 --> 00:20:16,720
PROFESSOR: OK so we want the answer
教授：好的，我们想要答案

500
00:20:16,720 --> 00:20:22,145
to be 2 times B to the d.
是d的B的2倍。 

501
00:20:22,145 --> 00:20:24,789
And if we're integer land, what are we actually going to get?
如果我们是整数土地，我们实际上将得到什么？ 

502
00:20:24,789 --> 00:20:30,829



503
00:20:30,829 --> 00:20:37,210
So suppose B is 10-- let's work with familiar numbers-- d is 2.
因此，假设B为10-让我们使用熟悉的数字-d为2。 

504
00:20:37,210 --> 00:20:40,950
So we're going to want to compute
所以我们要计算

505
00:20:40,950 --> 00:20:45,005
square root of 3 2 times 100.
 3 2的平方根乘以100。 

506
00:20:45,005 --> 00:20:46,880
Does anyone have a calculator and can tell me
有人有计算器可以告诉我吗

507
00:20:46,880 --> 00:20:49,390
what square root of 3 is?
 3的平方根是多少？ 

508
00:20:49,390 --> 00:20:50,278
First two digits?
前两位数字？ 

509
00:20:50,278 --> 00:20:51,319
AUDIENCE: Cube root of 2.
听众：2的立方根。 

510
00:20:51,319 --> 00:20:52,694
PROFESSOR: Sorry, cube root of 2.
教授：对不起，立方根为2。 

511
00:20:52,694 --> 00:20:57,720



512
00:20:57,720 --> 00:20:59,784
AUDIENCE: 1.2.
听众：1.2。 

513
00:20:59,984 --> 00:21:06,769
PROFESSOR: So let's say that square root of 3 is 1.2345.
教授：所以我们说3的平方根是1.2345。 

514
00:21:06,769 --> 00:21:08,779
Hopefully someone will fix this up for us.
希望有人会为我们解决这个问题。 

515
00:21:08,779 --> 00:21:10,019
But let's say it's this.
但是，可以说就是这个。 

516
00:21:10,019 --> 00:21:13,309
If I multiply it by 100 what do I get?
如果我乘以100，我会得到什么？ 

517
00:21:13,309 --> 00:21:14,750
123 times 45.
 123倍45。 

518
00:21:14,750 --> 00:21:18,779



519
00:21:18,779 --> 00:21:21,859
So multiply by 100 means you move the decimal point
所以乘以100表示​​您移动小数点

520
00:21:21,859 --> 00:21:22,639
to the right.
在右边。 

521
00:21:22,640 --> 00:21:23,140
Right?
对？ 

522
00:21:23,140 --> 00:21:24,619
So it's still not an integer.
所以它仍然不是整数。 

523
00:21:24,819 --> 00:21:27,009
If we work in integer land, our algorithm
如果我们在整数土地上工作，我们的算法

524
00:21:27,009 --> 00:21:29,450
will return an integer.
将返回一个整数。 

525
00:21:29,450 --> 00:21:30,950
What's the integer that we're hoping
我们希望的整数是多少

526
00:21:30,950 --> 00:21:33,463
our algorithm will return?
我们的算法会返回吗？ 

527
00:21:33,463 --> 00:21:35,259
AUDIENCE: 1.23, right?
听众：1.23对吧？ 

528
00:21:35,259 --> 00:21:37,089
PROFESSOR: We're hoping so, right?
教授：我们希望如此，对吗？ 

529
00:21:37,089 --> 00:21:37,589
Why?
为什么？ 

530
00:21:37,589 --> 00:21:38,730
What can you do with 123?
 123可以做什么？ 

531
00:21:38,730 --> 00:21:41,950



532
00:21:41,950 --> 00:21:42,519
Shift right.
向右移动。 

533
00:21:42,519 --> 00:21:47,059
So if you divide this by 100, you get 1.23.
因此，如果将其除以100，则得到1.23。 

534
00:21:47,059 --> 00:21:49,894
And this is our answer with two digits of precision.
这是我们的答案，精度为两位数。 

535
00:21:49,894 --> 00:21:56,581
AUDIENCE: Do you want the actual-- it's 1.2599.
听众：您是否想要真实的-1.2599。 

536
00:21:56,582 --> 00:21:57,589
PROFESSOR: You guys are good.
教授：你们很好。 

537
00:21:57,789 --> 00:22:04,799



538
00:22:04,799 --> 00:22:07,460
OK.
好。 

539
00:22:07,460 --> 00:22:11,319
So our algorithm will give us this, right?
所以我们的算法会给我们这个，对吗？ 

540
00:22:11,319 --> 00:22:16,529
So it's not going to give us exactly cube
所以这不会给我们确切的立方体

541
00:22:16,529 --> 00:22:18,690
root of 2 times 100.
 2的根100。 

542
00:22:18,690 --> 00:22:20,630
It's not going to give us exactly this value.
它不会给我们确切的价值。 

543
00:22:20,630 --> 00:22:23,223
What's it going to give us?
这将给我们带来什么？ 

544
00:22:23,423 --> 00:22:24,964
AUDIENCE: Two digits-- close to that.
受众：两位数-接近该数字。 

545
00:22:24,964 --> 00:22:29,720



546
00:22:29,720 --> 00:22:32,829
PROFESSOR: So it's going to give us an integer, right?
教授：因此，它将给我们一个整数，对吗？ 

547
00:22:32,829 --> 00:22:34,869
So what kind of integer?
那么什么样的整数呢？ 

548
00:22:34,869 --> 00:22:35,756
Math.
数学。 

549
00:22:35,757 --> 00:22:36,389
AUDIENCE: Truncated?
听众：被截断了吗？ 

550
00:22:36,589 --> 00:22:38,480
PROFESSOR: OK, what's the math for that?
教授：好的，这是什么数学？ 

551
00:22:38,480 --> 00:22:39,049
Truncated.
被截断了。 

552
00:22:39,049 --> 00:22:40,529
Floor.
地板。 

553
00:22:40,529 --> 00:22:42,069
Very good.
很好。 

554
00:22:42,069 --> 00:22:44,740
So this is what we're actually going to compute.
这就是我们实际要计算的。 

555
00:22:44,740 --> 00:22:47,009
Actually, because we're in integer land,
实际上，因为我们处在整数土地上， 

556
00:22:47,009 --> 00:22:48,829
we're going to have floors at every step
我们将在每一步都铺地板

557
00:22:48,829 --> 00:22:50,809
when we're doing that approximation.
当我们这样做的时候。 

558
00:22:50,809 --> 00:22:52,309
And there's a fancy proof for Newton
牛顿有花哨的证据

559
00:22:52,309 --> 00:22:54,268
that says that even though you're taking floors
这说明即使您要发言

560
00:22:54,268 --> 00:22:58,430
all the time, it will still converge to the right thing.
一直以来，它仍然会收敛于正确的事物。 

561
00:22:58,430 --> 00:23:01,739
So in order to compute this, how are we
所以为了计算这个，我们如何

562
00:23:01,739 --> 00:23:03,029
going to transform the problem?
要改变这个问题？ 

563
00:23:03,029 --> 00:23:06,059



564
00:23:06,059 --> 00:23:09,250
AUDIENCE: Slide the Bd into that.
听众：将Bd插入其中。 

565
00:23:09,250 --> 00:23:10,066
PROFESSOR: OK.
教授：好的。 

566
00:23:10,066 --> 00:23:12,190
AUDIENCE: You're going to have to put a 3 in there.
听众：您将不得不在其中放置3。 

567
00:23:12,190 --> 00:23:12,533
B to the 3d.
 B到3d。 

568
00:23:12,733 --> 00:23:14,149
PROFESSOR: So we're actually going
教授：所以我们实际上要去

569
00:23:14,150 --> 00:23:18,265
to compute cube root of 2 times B to the 3d.
计算3倍B的2倍的立方根。 

570
00:23:18,465 --> 00:23:25,579



571
00:23:25,579 --> 00:23:26,629
Fair enough?
很公平？ 

572
00:23:26,630 --> 00:23:28,178
And if we slide this right by the digits
如果我们按数字向右滑动

573
00:23:28,378 --> 00:23:30,794
afterwards we're going to get our two digits of precision.
之后，我们将获得两位数的精度。 

574
00:23:30,795 --> 00:23:33,389



575
00:23:33,589 --> 00:23:35,369
OK.
好。 

576
00:23:35,369 --> 00:23:38,909
So now I figured out my precision.
所以现在我想出了我的精度。 

577
00:23:38,910 --> 00:23:41,740
I want an initial guess-- and actually I lied,
我想要一个初步的猜测-实际上我撒了谎， 

578
00:23:41,740 --> 00:23:44,250
there's one more problem.
还有一个问题。 

579
00:23:44,250 --> 00:23:45,059
Running time.
运行时间。 

580
00:23:45,059 --> 00:23:48,547



581
00:23:48,547 --> 00:23:50,505
Do you guys want to start with the running time
你们要开始跑步吗

582
00:23:50,505 --> 00:23:53,825
or initial guess?
还是最初的猜测？ 

583
00:23:53,825 --> 00:23:56,569
AUDIENCE: Initial guess.
听众：初步猜测。 

584
00:23:56,569 --> 00:24:01,244
PROFESSOR: OK so what I want a good initial guess?
教授：好的，那么我想作一个初步的猜测吗？ 

585
00:24:01,244 --> 00:24:06,116
AUDIENCE: Between 0 and 2x.
听众：0到2倍之间。 

586
00:24:06,116 --> 00:24:08,450
PROFESSOR: OK so if I don't have that the algorithm will
教授：好的，如果我没有那个算法， 

587
00:24:08,450 --> 00:24:09,379
crash and burn.
崩溃和燃烧。 

588
00:24:09,579 --> 00:24:11,049
When we did Newton in recitation,
当我们背诵牛顿时

589
00:24:11,049 --> 00:24:13,599
I said that I would like two things.
我说我想两件事。 

590
00:24:13,599 --> 00:24:17,109
And I backed up, I coded that into P set five
然后我备份，将其编码为P组5 

591
00:24:17,109 --> 00:24:18,596
when I did the guess.
我猜的时候

592
00:24:18,596 --> 00:24:19,970
So what are the two things that I
那我有两件事是什么

593
00:24:19,970 --> 00:24:21,644
want from a good initial guess?
想要从一个好的初始猜测中得出？ 

594
00:24:21,644 --> 00:24:23,069
AUDIENCE: Order of magnitude?
听众：数量级？ 

595
00:24:23,069 --> 00:24:24,769
PROFESSOR: OK.
教授：好的。 

596
00:24:24,769 --> 00:24:26,279
Perfect.
完善。 

597
00:24:26,279 --> 00:24:29,000
AUDIENCE: Oh, god.
听众：哦，天哪。 

598
00:24:29,000 --> 00:24:36,000
[LAUGHS]
 [笑声] 

599
00:24:36,000 --> 00:24:37,700
PROFESSOR: OK, so order of magnitude
教授：好的，数量级

600
00:24:37,700 --> 00:24:43,390
is a fancy CSE way to say, right number of digits.
是一种奇妙的CSE说法，正确的数字位数。 

601
00:24:43,390 --> 00:24:46,470
Suppose we're computing this.
假设我们正在计算这个。 

602
00:24:46,470 --> 00:24:49,190
Or suppose we're computing the cube
或者假设我们正在计算多维数据集

603
00:24:49,190 --> 00:24:57,880
root of some number in base B. So
以B为底数的根

604
00:24:57,880 --> 00:25:03,649
supposed r is somewhere between 0 and B.
假设r在0到B之间。 

605
00:25:03,849 --> 00:25:06,139
It's one digit in base B. How many digits
基数为B的一位数字。 

606
00:25:06,140 --> 00:25:08,160
is this result is going to have?
这个结果将会有吗？ 

607
00:25:08,160 --> 00:25:11,389



608
00:25:11,589 --> 00:25:13,439
AUDIENCE: The amount of digits divided by 3.
观众：数字除以3。 

609
00:25:13,440 --> 00:25:16,380
The amount of digits in 2 times B to the 3d.
 2倍B到3d的位数。 

610
00:25:16,380 --> 00:25:19,609
Which is whatever B to the 3d is.
 3d中的B是什么。 

611
00:25:19,809 --> 00:25:21,309
AUDIENCE: D plus 1?
听众：D加1？ 

612
00:25:21,309 --> 00:25:25,149
PROFESSOR: OK so roughly either d or d plus 1.
教授：可以，大约d或d加1。 

613
00:25:25,150 --> 00:25:28,389
See, d plus 1.
参见d加1。 

614
00:25:28,589 --> 00:25:33,500
So a decent approximation would be a 1 followed by these zeros.
因此，一个体面的近似值应该是1，然后是这些零。 

615
00:25:33,500 --> 00:25:35,180
An even better approximation is what
更好的近似是

616
00:25:35,180 --> 00:25:39,049
if we can get the first digit right or almost right?
如果我们可以使第一个数字正确或几乎正确？ 

617
00:25:39,049 --> 00:25:40,029
How would we do that?
我们将如何做？ 

618
00:25:40,029 --> 00:25:43,730



619
00:25:43,730 --> 00:25:48,299
AUDIENCE: Pick up the first digit of our r
听众：拿起我们数字的第一个数字

620
00:25:48,299 --> 00:25:50,639
PROFESSOR: OK and I promise that r is one digit.
教授：好的，我保证r是一位数字。 

621
00:25:50,640 --> 00:25:52,740
Just So let's say we pick up r.
就是说，我们拿起r。 

622
00:25:52,740 --> 00:25:54,259
And?
和？ 

623
00:25:54,259 --> 00:25:56,256
AUDIENCE: We do Newtons method on that.
听众：我们在此上采用牛顿法。 

624
00:25:56,256 --> 00:25:57,351
And we just guess one?
我们只是猜一个？ 

625
00:25:57,551 --> 00:25:59,911
Is that a thing?
那是东西吗？ 

626
00:25:59,912 --> 00:26:01,286
PROFESSOR: Uhh--
教授：呃- 

627
00:26:01,286 --> 00:26:02,543
AUDIENCE: Take the cube root of it.
听众：取其立方根。 

628
00:26:02,743 --> 00:26:04,784
AUDIENCE: It should be some kind of inefficient--
听众：应该是效率低下的- 

629
00:26:04,785 --> 00:26:07,599
PROFESSOR: Yeah what's some kind of inefficient way
教授：是的，这是一种低效的方式

630
00:26:07,799 --> 00:26:09,301
that we can think of quickly?
我们可以很快想到的？ 

631
00:26:09,301 --> 00:26:10,169
AUDIENCE: Can you--
听众：你能- 

632
00:26:10,170 --> 00:26:11,039
AUDIENCE: Binary?
听众：二进制？ 

633
00:26:11,039 --> 00:26:12,498
PROFESSOR: Did you say divide and--
教授：您是说分裂，而且- 

634
00:26:12,498 --> 00:26:14,434
AUDIENCE: --divide it by 2r?
听众：-除以2r？ 

635
00:26:14,434 --> 00:26:15,309
PROFESSOR: Oh, sorry.
教授：抱歉。 

636
00:26:15,309 --> 00:26:16,259
I thought You were>you were going to say divide
我以为你是>你将要说分裂

637
00:26:16,259 --> 00:26:17,579
and conquer.
并征服。 

638
00:26:17,579 --> 00:26:20,449
So I heard binary search, so binary search wins.
所以我听到了二进制搜索，所以二进制搜索胜出。 

639
00:26:20,450 --> 00:26:21,950
So we're going to the binary search.
因此，我们将进行二进制搜索。 

640
00:26:21,950 --> 00:26:26,630
Binary search from 0 to r.
从0到r的二进制搜索。 

641
00:26:26,630 --> 00:26:27,130
Right?
对？ 

642
00:26:27,130 --> 00:26:30,409
In order to the binary search, suppose I have my guess,
为了进行二分查找，假设我有我的猜测， 

643
00:26:30,609 --> 00:26:37,521
g, I want to see how g compares to cube root of r.
 g，我想看看g与r的立方根比较。 

644
00:26:37,521 --> 00:26:38,230
How do I do this?
我该怎么做呢？ 

645
00:26:38,230 --> 00:26:41,669



646
00:26:41,869 --> 00:26:49,439
So this is equivalent to g cubed compared to r.
因此，与r相比，这相当于g的立方。 

647
00:26:49,440 --> 00:26:54,028
g cubed is to multiplication, so I know how to do that.
 g求立方就是乘法，所以我知道该怎么做。 

648
00:26:54,028 --> 00:26:54,528
OK?
好？ 

649
00:26:54,528 --> 00:27:00,119



650
00:27:00,119 --> 00:27:01,119
Make sense for everyone?
对每个人都有意义吗？ 

651
00:27:01,119 --> 00:27:04,459



652
00:27:04,460 --> 00:27:07,059
Sorry, r.
对不起，河。 

653
00:27:07,059 --> 00:27:07,559
My bad.
我的错。 

654
00:27:07,559 --> 00:27:11,700



655
00:27:11,700 --> 00:27:14,799
So this is going to be one digit in base, B, so hopefully
所以这将是B的一位数字，所以希望

656
00:27:14,799 --> 00:27:17,740
not too much work.
没有太多的工作。 

657
00:27:17,740 --> 00:27:18,720
OK.
好。 

658
00:27:18,720 --> 00:27:21,233
But remember this, you can;t do the comparison directly
但是请记住，您不能直接进行比较

659
00:27:21,233 --> 00:27:22,899
because you can't compute this directly.
因为您不能直接计算出来。 

660
00:27:22,900 --> 00:27:26,730
So you need to do it this way.
所以您需要这样做。 

661
00:27:26,730 --> 00:27:29,996
AUDIENCE: So r is just the first digit of the number?
听众：那么r只是数字的第一位？ 

662
00:27:30,196 --> 00:27:30,821
PROFESSOR: Yep.
教授：是的。 

663
00:27:30,821 --> 00:27:35,259



664
00:27:35,259 --> 00:27:37,509
So we're going for a slightly easier problem.
因此，我们要解决一个更简单的问题。 

665
00:27:37,509 --> 00:27:40,569
We're trying to compute the cube root of a single digit number
我们正在尝试计算一个数字的立方根

666
00:27:40,569 --> 00:27:44,359
to an arbitrary precision.
达到任意精度

667
00:27:44,359 --> 00:27:46,809
You can make it harder, but there's no point right now.
您可以加大难度，但现在没有意义。 

668
00:27:46,809 --> 00:27:48,139
So we'll stick to this.
因此，我们将坚持这一点。 

669
00:27:48,140 --> 00:27:50,390
So how much time will this take?
那么这需要多少时间？ 

670
00:27:50,390 --> 00:27:53,869
How many approximations will I need to do?
我需要做多少个近似值？ 

671
00:27:54,069 --> 00:27:56,619
By the way, so suppose I compute my approximations.
顺便说一句，假设我计算我的近似值。 

672
00:27:56,619 --> 00:27:57,119
Right?
对？ 

673
00:27:57,119 --> 00:28:02,299
So I compute x0, x1, x2, x3, so on and so forth.
所以我计算x0，x1，x2，x3，依此类推。 

674
00:28:02,299 --> 00:28:04,970
When do I stop?
我什么时候停止？ 

675
00:28:04,970 --> 00:28:07,265
AUDIENCE: When both digits are the same?
听众：当两个数字相同时？ 

676
00:28:07,265 --> 00:28:08,890
PROFESSOR: All the digits are the same.
教授：所有数字都是相同的。 

677
00:28:08,890 --> 00:28:14,919
So when one approximation is the same with the next one.
因此，当一个近似值与下一个近似值相同时。 

678
00:28:15,119 --> 00:28:15,989
That's what you're?
那就是你

679
00:28:15,990 --> 00:28:16,490
Right.
对。 

680
00:28:16,490 --> 00:28:19,170



681
00:28:19,170 --> 00:28:20,640
So these are all integers.
所以这些都是整数。 

682
00:28:20,640 --> 00:28:22,601
The moment I get two identical integers,
当我得到两个相同的整数时

683
00:28:22,801 --> 00:28:24,759
I know there's no point to continue because I'm
我知道没有继续的理由，因为我

684
00:28:24,759 --> 00:28:27,299
going to get the same value forever.
将永远获得相同的价值。 

685
00:28:27,299 --> 00:28:29,359
Also this means that Newton's method
这也意味着牛顿法

686
00:28:29,359 --> 00:28:30,769
has converged on this integer.
已收敛于该整数。 

687
00:28:30,769 --> 00:28:32,529
So hopefully I will get the answer,
所以希望我能得到答案， 

688
00:28:32,529 --> 00:28:37,149
which I can convert into the right answer.
我可以将其转换为正确的答案。 

689
00:28:37,150 --> 00:28:38,849
OK so how fast does this work?
好的，这工作有多快？ 

690
00:28:39,049 --> 00:28:40,740
What is n?
什么是n？ 

691
00:28:40,740 --> 00:28:43,740
When am I going to stop?
我什么时候要停下来？ 

692
00:28:43,740 --> 00:28:46,214
AUDIENCE: Log base 2 of d?
听众：d的底数为2？ 

693
00:28:46,214 --> 00:28:49,184
PROFESSOR: OK.
教授：好的。 

694
00:28:49,184 --> 00:28:59,099
So n is-- so the number of digits in my approximation--
所以n是-所以我的近似数字是- 

695
00:28:59,099 --> 00:29:02,689
the number of correct digits-- doubles every time.
正确位数-每次加倍。 

696
00:29:02,690 --> 00:29:05,399
So after log these steps, I have the right answer.
因此，在记录完这些步骤之后，我得到了正确的答案。 

697
00:29:05,599 --> 00:29:09,419
Now what if instead of doing this I did binary search?
现在，如果不是这样做，而是进行二进制搜索怎么办？ 

698
00:29:09,420 --> 00:29:14,640
So instead of doing Newton's method I do binary search on 0
所以我没有做牛顿的方法，而是对0进行二进制搜索

699
00:29:14,640 --> 00:29:15,665
to r?
去r？ 

700
00:29:15,865 --> 00:29:16,740
I can do that, right?
我可以的，对吗？ 

701
00:29:16,740 --> 00:29:19,039
Because I can get a guess and then
因为我可以猜测然后

702
00:29:19,039 --> 00:29:24,116
I can use this to see if my guess is right or wrong.
我可以用它来查看我的猜测是对还是错。 

703
00:29:24,116 --> 00:29:25,950
So in theory I could do it in binary search.
因此，从理论上讲，我可以在二进制搜索中做到这一点。 

704
00:29:25,950 --> 00:29:26,899
How fast would that be?
那有多快？ 

705
00:29:27,099 --> 00:29:28,599
AUDIENCE: And what is the difference
听众：有什么区别

706
00:29:28,599 --> 00:29:29,723
between big r and little r?
在大r和小r之间？ 

707
00:29:29,723 --> 00:29:32,349



708
00:29:32,349 --> 00:29:34,894
PROFESSOR: Big R is-- oh, I didn't write the big r.
教授：大R是-哦，我没有写大R。 

709
00:29:34,894 --> 00:29:35,895
Big r is this guy, here.
大家伙是这个人，在这里。 

710
00:29:35,895 --> 00:29:36,935
AUDIENCE: Oh, OK, gotcha.
听众：哦，好，知道了。 

711
00:29:36,935 --> 00:29:37,829
OK.
好。 

712
00:29:37,829 --> 00:29:39,220
PROFESSOR: And this is little r.
教授：这是小r。 

713
00:29:39,220 --> 00:29:39,880
Sorry.
抱歉。 

714
00:29:39,880 --> 00:29:42,349
Good question, I apologize for that.
好问题，对此我表示歉意。 

715
00:29:42,549 --> 00:29:47,960
So R is little r times B to the 3d.
因此，R几乎是B的3倍。 

716
00:29:47,960 --> 00:29:51,400
AUDIENCE: D times log 2 of B--
听众：D乘以B的对数2- 

717
00:29:51,400 --> 00:29:52,400
AUDIENCE: To the d.
听众：d。 

718
00:29:52,400 --> 00:29:53,163
Log r to the d.
将r登录到d。 

719
00:29:53,163 --> 00:29:54,579
AUDIENCE: Oh, it's the same thing.
听众：哦，是同一回事。 

720
00:29:54,579 --> 00:29:55,539
Right.
对。 

721
00:29:55,539 --> 00:29:58,399
AUDIENCE: Yeah.
听众：是的。 

722
00:29:58,400 --> 00:29:58,900
On the y.
在y上。 

723
00:29:58,900 --> 00:30:02,759



724
00:30:02,759 --> 00:30:09,109
PROFESSOR: OK so the number of guesses is
教授：好的，所以猜测的数目是

725
00:30:09,109 --> 00:30:10,409
AUDIENCE: Log big r.
听众：大日志。 

726
00:30:10,410 --> 00:30:12,440
PROFESSOR: Log big r.
教授：大日志。 

727
00:30:12,440 --> 00:30:19,170
And someone was one step ahead and said it's order of B times
有人领先一步，说这是B次

728
00:30:19,170 --> 00:30:21,710
log little r.
日志小河

729
00:30:21,710 --> 00:30:25,299
Or I think it's d plus little r.
或者我认为是d加小r。 

730
00:30:25,299 --> 00:30:30,589
So this is order of d.
因此，这是d阶。 

731
00:30:30,589 --> 00:30:32,927
Does this make sense for everyone?
这对每个人有意义吗？ 

732
00:30:32,928 --> 00:30:36,503
AUDIENCE: I didn't quite follow what happened there.
听众：我不太了解那里发生的事情。 

733
00:30:36,703 --> 00:30:38,869
PROFESSOR: So I'm doing a binary search on the range
教授：所以我正在对范围进行二进制搜索

734
00:30:38,869 --> 00:30:40,539
from 0 to r.
从0到r。 

735
00:30:40,539 --> 00:30:41,240
How many steps?
多少步？ 

736
00:30:41,240 --> 00:30:43,018
How many guesses?
有多少个猜测？ 

737
00:30:43,018 --> 00:30:43,745
Log r.
记录r。 

738
00:30:43,945 --> 00:30:44,469
Right?
对？ 

739
00:30:44,470 --> 00:30:47,750
This is binary search.
这是二进制搜索。 

740
00:30:47,750 --> 00:30:53,619
R is little r times b to the 3d.
 R是3d的r乘以b。 

741
00:30:53,619 --> 00:31:00,419
So if we log this, log R is log little r
因此，如果我们记录此日志，则日志R为日志小r 

742
00:31:00,420 --> 00:31:10,759
plus 3d log B. B is order one, so we get order of log B.
加上3d日志B。B是订单1，因此我们得到了日志B的订单。 

743
00:31:10,759 --> 00:31:14,299
OK so Newton's method is exponentially faster
好的，所以牛顿法成倍地加快了速度

744
00:31:14,299 --> 00:31:17,919
in terms of the number of digits compared to binary search.
与二进制搜索相比的位数。 

745
00:31:17,920 --> 00:31:20,630
So if you can pull it off with Newton's method
所以如果你可以用牛顿的方法

746
00:31:20,630 --> 00:31:22,169
and you have big numbers, you probably
你有很多数字，你可能

747
00:31:22,369 --> 00:31:24,298
want to use Newton's method.
想要使用牛顿的方法。 

748
00:31:24,298 --> 00:31:26,589
Because binary search will give you a slower algorithm.
因为二进制搜索将为您提供较慢的算法。 

749
00:31:26,589 --> 00:31:30,237



750
00:31:30,238 --> 00:31:32,420
OK, how are we doing with these concepts?
好的，我们如何处理这些概念？ 

751
00:31:32,420 --> 00:31:37,480



752
00:31:37,480 --> 00:31:39,529
I see everyone's unhappy.
我看到每个人都不开心。 

753
00:31:39,529 --> 00:31:41,430
Is it because of Newton or something I said?
是因为牛顿还是我说了什么？ 

754
00:31:41,430 --> 00:31:43,769
AUDIENCE: Can you summarize the difference
听众：您能总结一下区别吗

755
00:31:43,769 --> 00:31:45,519
between binary search and Newton's, again?
在二分搜索和牛顿搜索之间呢？ 

756
00:31:45,519 --> 00:31:47,930
So you said binary search takes kind
所以你说二进制搜索很不错

757
00:31:47,930 --> 00:31:49,859
of long versus Newton's method.
与牛顿法比较。 

758
00:31:50,059 --> 00:31:50,789
PROFESSOR: OK.
教授：好的。 

759
00:31:50,789 --> 00:31:53,391
So how do you do binary search?
那么如何进行二进制搜索？ 

760
00:31:53,391 --> 00:31:55,140
AUDIENCE: Divide and conquer, which is--
听众：分而治之，即

761
00:31:55,140 --> 00:31:56,681
PROFESSOR: Divide and conquer, right?
教授：分而治之，对吧？ 

762
00:31:56,681 --> 00:31:59,459
You start out with an interval, you guess somewhere in half,
您以一定的间隔开始，您猜到一半左右， 

763
00:31:59,459 --> 00:32:02,000
and then you see which half of the interval you recurse onto.
然后您会看到递归到间隔的哪一半。 

764
00:32:02,000 --> 00:32:05,039
And your interval halves in size every time.
每次间隔的大小减半。 

765
00:32:05,039 --> 00:32:08,700
So given the initial size of the interval, the number of guesses
因此，鉴于间隔的初始大小，猜测的数量

766
00:32:08,700 --> 00:32:12,149
you have is log of that interval size.
您拥有的是该间隔大小的日志。 

767
00:32:12,349 --> 00:32:16,409
In this case we're guessing a number between 0 and r.
在这种情况下，我们猜测数字介于0和r之间。 

768
00:32:16,410 --> 00:32:18,774
So the big goal is to compute cube root of R.
因此，最大的目标是计算R的立方根。 

769
00:32:18,974 --> 00:32:21,099
And we're guessing that hey, it has to be somewhere
而且我们猜测嘿，它一定在某处

770
00:32:21,099 --> 00:32:25,250
between 0 and R. So we're going to do binary search on this.
在0到R之间。因此我们将对此进行二进制搜索。 

771
00:32:25,250 --> 00:32:28,339
And in order to see how our guess compares,
为了了解我们的猜测如何比较， 

772
00:32:28,339 --> 00:32:31,030
we're going to use this trick, here.
我们将在此处使用此技巧。 

773
00:32:31,030 --> 00:32:33,740



774
00:32:33,740 --> 00:32:37,640
So the number of guesses we make is log R. Now
因此，我们做出的猜测数量为对数R。现在

775
00:32:37,640 --> 00:32:39,900
R is that number, over there.
 R是那个数字。 

776
00:32:39,900 --> 00:32:42,869
It's little r times B to the 3d.
它比3d少R倍。 

777
00:32:43,069 --> 00:32:44,519
So how many digits does it have?
那么它有几位数呢？ 

778
00:32:44,519 --> 00:32:47,529
Roughly d digits.
大约d位数字。 

779
00:32:47,529 --> 00:32:50,389
So log of R is going to be order d.
因此，R的对数将为d。 

780
00:32:50,390 --> 00:32:53,650



781
00:32:53,650 --> 00:32:57,399
OK so if you do binary search to guess a d digit number,
好的，所以如果您执行二进制搜索来猜测广告位数， 

782
00:32:57,599 --> 00:32:59,779
the running time will be roughly order d.
运行时间大致为d。 

783
00:32:59,779 --> 00:33:02,200
Order of the number of digits.
位数的顺序。 

784
00:33:02,200 --> 00:33:05,150
If you use Newton's method and your function
如果您使用牛顿方法和函数

785
00:33:05,150 --> 00:33:06,399
is good and everything converges,
很好，一切都融合在一起， 

786
00:33:06,599 --> 00:33:08,399
then you have quadratic convergence.
那么您将获得二次收敛性。 

787
00:33:08,400 --> 00:33:11,639
Which guarantees that you'll have log of d guesses.
这样可以保证您有d个猜测的日志。 

788
00:33:11,839 --> 00:33:14,079
Log of d approximations.
 d近似值的对数。 

789
00:33:14,079 --> 00:33:16,779
So Newton's method is a lot faster for big numbers,
因此，对于大数而言，牛顿的方法要快得多， 

790
00:33:16,779 --> 00:33:20,450
because you have a log there instead of d.
因为您有一个日志而不是d。 

791
00:33:20,450 --> 00:33:22,809
So this is the big difference between them.
因此，这是它们之间的最大区别。 

792
00:33:22,809 --> 00:33:24,679
But for Newton, you need a lot of things.
但是对于牛顿来说，您需要做很多事情。 

793
00:33:24,680 --> 00:33:24,669
Right?
对？ 

794
00:33:24,869 --> 00:33:26,952
You need that function, you need an initial guess,
您需要该功能，需要初步猜测， 

795
00:33:26,952 --> 00:33:29,899
you need a lot of things to make it work.
您需要做很多事情才能使其正常工作。 

796
00:33:29,900 --> 00:33:30,400
Yes?
是？ 

797
00:33:30,400 --> 00:33:32,657
AUDIENCE: So is that just like the number of times it runs?
听众：那就像它运行的次数一样吗？ 

798
00:33:32,857 --> 00:33:35,984
Because don't you have a multiplication and a division?
因为您没有乘法和除法吗？ 

799
00:33:35,984 --> 00:33:36,609
PROFESSOR: Yep.
教授：是的。 

800
00:33:36,609 --> 00:33:38,829
So this is the number of guesses.
这就是猜测的数量。 

801
00:33:38,829 --> 00:33:40,720
The total running time is quite different.
总运行时间完全不同。 

802
00:33:40,720 --> 00:33:43,135
You need to jump through a few more hoops to analyze that.
您需要再跳几圈来进行分析。 

803
00:33:43,135 --> 00:33:48,279
But this is the number of guesses or approximations
但这是猜测或近似的数量

804
00:33:48,279 --> 00:33:51,362
that each method makes.
每种方法都能做到的。 

805
00:33:51,362 --> 00:33:52,619
So if your math would be order one,
因此，如果您的数学将是一阶， 

806
00:33:52,819 --> 00:33:54,110
this would be the running time.
这就是运行时间。 

807
00:33:54,111 --> 00:33:59,150
If the math isn't order one, then it gets more complicated.
如果数学不是一阶，那么它将变得更加复杂。 

808
00:33:59,150 --> 00:34:02,432
AUDIENCE: So what's the running time of a division?
听众：那么一个部门的运行时间是多少？ 

809
00:34:02,432 --> 00:34:04,640
PROFESSOR: What is running time of the division using
教授：使用该部门的时间是多少

810
00:34:04,640 --> 00:34:07,750
Newton's method?
牛顿法？ 

811
00:34:07,750 --> 00:34:10,309
It's the same as the running time of the multiplication
与乘法的运行时间相同

812
00:34:10,309 --> 00:34:12,150
that you're using to compute your approximations.
您用来计算近似值的方法。 

813
00:34:12,349 --> 00:34:14,949



814
00:34:14,949 --> 00:34:17,889
And it's like two pages of notes to prove that.
就像两页笔记来证明这一点。 

815
00:34:17,889 --> 00:34:20,764
So let's not go over that now.
因此，让我们现在不复述。 

816
00:34:20,764 --> 00:34:22,889
But the idea is that every time you're multiplying,
但想法是，每当您繁殖时， 

817
00:34:22,889 --> 00:34:24,409
you start multiplying small numbers
你开始乘以小数

818
00:34:24,409 --> 00:34:26,590
and the numbers double in size when you're multiplying them.
和数字相乘时，它们的大小加倍。 

819
00:34:26,590 --> 00:34:28,213
So only the last multiplication counts.
因此，只有最后的乘法才重要。 

820
00:34:28,213 --> 00:34:30,420
All the others are tiny compared to that.
相比之下，所有其他的都很小。 

821
00:34:30,420 --> 00:34:34,679



822
00:34:34,679 --> 00:34:35,105
OK.
好。 

823
00:34:35,304 --> 00:34:36,428
Anything else about Newton?
关于牛顿还有什么？ 

824
00:34:36,429 --> 00:34:43,110



825
00:34:43,110 --> 00:34:44,840
Sorry guys, we have Newton on the exam
抱歉，我们有牛顿参加考试

826
00:34:44,840 --> 00:34:46,090
so we have to go through this.
所以我们必须经历这个。 

827
00:34:46,090 --> 00:34:49,900
Let's go through some fun graph problems.
让我们研究一些有趣的图形问题。 

828
00:34:49,900 --> 00:34:54,507
OK so we kicked off these two.
好，所以我们开始了这两个。 

829
00:34:54,507 --> 00:34:56,465
Graphs the BFS edges and graph transformations.
绘制BFS边的图形并绘制变换。 

830
00:34:56,465 --> 00:35:07,532



831
00:35:07,532 --> 00:35:09,289
OK I'm going to do a graph transformation first
好的，我将首先进行图形转换

832
00:35:09,489 --> 00:35:12,165
because I think that's more useful than BFS edges,
因为我认为这比BFS边缘更有用， 

833
00:35:12,166 --> 00:35:13,789
but hopefully I'm going to get to both.
但希望我能同时做到。 

834
00:35:13,789 --> 00:35:25,650



835
00:35:25,650 --> 00:35:28,460
So suppose I have a graph.
因此，假设我有一张图。 

836
00:35:28,460 --> 00:35:31,019
Each path is either red or blue.
每个路径是红色或蓝色。 

837
00:35:31,219 --> 00:35:35,109



838
00:35:35,110 --> 00:35:38,440
By the way, no political connection whatsoever.
顺便说一句，没有任何政治联系。 

839
00:35:38,440 --> 00:35:40,409
And you have weights on each path.
您在每条路径上都有权重。 

840
00:35:40,409 --> 00:35:47,279



841
00:35:47,280 --> 00:35:52,230
So we want a path from S to T with the following constraint.
因此，我们需要具有以下约束的从S到T的路径。 

842
00:35:52,429 --> 00:35:55,649
So these weights are the costs of, maybe,
因此，这些权重可能是

843
00:35:55,650 --> 00:35:59,250
how much gas you're spending to go on that road.
您在那条路上花了多少汽油。 

844
00:35:59,250 --> 00:36:01,976
So in order to switch from a red edge to a blue edge,
因此，为了从红色边缘切换到蓝色边缘， 

845
00:36:01,976 --> 00:36:03,309
you also have to pay some money.
您还必须支付一些钱。 

846
00:36:03,309 --> 00:36:06,619
You have to pay a cost of 5.
您必须支付5的费用。 

847
00:36:06,619 --> 00:36:08,920
So if you're going to go-- if you're
因此，如果您要去-如果您要

848
00:36:08,920 --> 00:36:12,519
going to go from S to A-- let's call
要从S转到A –让我们打电话

849
00:36:12,519 --> 00:36:16,789
this guy A-- if you're going to go this way,
这个家伙-如果你要走这条路， 

850
00:36:16,789 --> 00:36:23,219
then your total cost is 3, 1, 4.
那么您的总费用为3、1、4。 

851
00:36:23,219 --> 00:36:28,599
If you're going to go from S to B, then if you go this way,
如果您要从S转到B，那么如果您采用这种方式， 

852
00:36:28,599 --> 00:36:31,619
your total cost is going to be 3 plus 1
您的总费用将是3加1 

853
00:36:31,619 --> 00:36:35,380
plus 5 for switching from a red to a blue edge.
加5用于从红色边缘切换到蓝色边缘。 

854
00:36:35,380 --> 00:36:38,440
So the cost for switching from red to blue is 5.
因此，从红色切换为蓝色的成本为5。 

855
00:36:38,639 --> 00:36:42,601
The cost for switching from blue to red is 5.
从蓝色切换到红色的成本为5。 

856
00:36:42,601 --> 00:36:44,393
And I'll let you guys think of it for a bit
我会让你们想一想

857
00:36:44,393 --> 00:36:45,393
while I erase the board.
当我擦除木板时。 

858
00:36:45,393 --> 00:37:09,030



859
00:37:09,030 --> 00:37:13,090
AUDIENCE: What's your goal in playing the best path from--
听众：发挥以下最佳途径的目标是- 

860
00:37:13,090 --> 00:37:16,025
PROFESSOR: Best path from S to T. Smallest total cost.
教授：从S到T的最佳途径。总成本最低。 

861
00:37:16,025 --> 00:37:16,365
AUDIENCE: OK.
听众：好的。 

862
00:37:16,565 --> 00:37:26,029



863
00:37:26,030 --> 00:37:28,840
PROFESSOR: So any thoughts?
教授：有什么想法吗？ 

864
00:37:28,840 --> 00:37:31,289
Yes.
是。 

865
00:37:31,289 --> 00:37:33,045
AUDIENCE: It's kind of on the run,
听众：有点儿忙， 

866
00:37:33,244 --> 00:37:38,134
but create a supernode connect all the red paths.
但创建一个连接所有红色路径的超节点。 

867
00:37:38,135 --> 00:37:40,869
And create another one connecting all the blue paths.
并创建另一个连接所有蓝色路径的路径。 

868
00:37:41,068 --> 00:37:45,469
And then try to find the shortest length to T just using
然后尝试使用来找到最短的T长度

869
00:37:45,469 --> 00:37:49,139
those two graphs, I guess.
我猜那两个图。 

870
00:37:49,139 --> 00:37:50,639
PROFESSOR: So you're going to create
教授：所以您将创建

871
00:37:50,639 --> 00:37:52,779
a supernode connecting the paths.
连接路径的超节点。 

872
00:37:52,780 --> 00:37:54,806
So how does this work?
那么这是如何工作的呢？ 

873
00:37:55,005 --> 00:38:02,475
AUDIENCE: You create the path from S
听众：您从S创建路径

874
00:38:02,476 --> 00:38:04,269
to T just using the reds.
到T只用红色。 

875
00:38:04,469 --> 00:38:07,059
PROFESSOR: OK so I'm going to copy everything and use
教授：好的，我将复制所有内容并使用

876
00:38:07,059 --> 00:38:08,969
the reds.
红人。 

877
00:38:08,969 --> 00:38:18,169
So S, C, D, T, and I'm only going to use the reds.
因此，S，C，D，T和我只会使用红色。 

878
00:38:18,170 --> 00:38:23,806
All right, red, red, red.
好吧，红色，红色，红色。 

879
00:38:23,806 --> 00:38:27,300



880
00:38:27,300 --> 00:38:29,269
OK.
好。 

881
00:38:29,469 --> 00:38:33,469
AUDIENCE: And then-- wait, is that all the right paths?
听众：然后-等一下，这是所有正确的道路吗？ 

882
00:38:33,469 --> 00:38:35,857
PROFESSOR: I hope so.
教授：我希望如此。 

883
00:38:35,858 --> 00:38:37,358
AUDIENCE: All right, and then you're
听众：好的，那么你就

884
00:38:37,358 --> 00:38:41,380
going to try doing that with the blue paths as well.
还要尝试使用蓝色路径。 

885
00:38:41,380 --> 00:38:45,326
PROFESSOR: So am I creating another copy of this?
教授：那么我要再创建一个副本吗？ 

886
00:38:45,326 --> 00:38:46,079
AUDIENCE: Yeah.
听众：是的。 

887
00:38:46,079 --> 00:38:46,663
PROFESSOR: OK.
教授：好的。 

888
00:38:46,663 --> 00:38:59,570



889
00:38:59,570 --> 00:39:01,049
Let's see, what else, what else?
让我们看看，还有什么，还有什么？ 

890
00:39:01,050 --> 00:39:08,940



891
00:39:08,940 --> 00:39:13,121
OK
好

892
00:39:13,121 --> 00:39:14,978
AUDIENCE: From S to T, right?
听众：从S到T，对不对？ 

893
00:39:14,978 --> 00:39:16,230
PROFESSOR: A path from S to T?
教授：从S到T的道路？ 

894
00:39:16,230 --> 00:39:21,563
AUDIENCE: Yeah, so you just compare the path of S
听众：是的，所以您只需比较S的路径

895
00:39:21,563 --> 00:39:23,556
to the path of T. So you completely
到T的路径。所以你完全

896
00:39:23,556 --> 00:39:27,539
take that out, the additional cost [INAUDIBLE]
取出来，额外费用[听不清] 

897
00:39:27,539 --> 00:39:29,282
just by comparing those two and seeing
只是通过比较这两个并看到

898
00:39:29,282 --> 00:39:30,688
which ones are the shortest path.
哪一条是最短的路径。 

899
00:39:30,688 --> 00:39:32,271
AUDIENCE: It's correct for this graph,
观众：这张图是正确的， 

900
00:39:32,271 --> 00:39:35,010
but it's not correct in general.
但这通常是不正确的。 

901
00:39:35,010 --> 00:39:37,320
[INTERPOSING VOICES]
 [插入语音] 

902
00:39:37,519 --> 00:39:42,509
AUDIENCE: And the last option would be combining--
听众：最后一种选择是结合

903
00:39:42,510 --> 00:39:44,559
PROFESSOR: OK so if I do this so far.
教授：好的，如果我到目前为止已经这样做的话。 

904
00:39:44,559 --> 00:39:46,900
So I've taken the original graph and I've created two copies.
因此，我拍摄了原始图形，并创建了两个副本。 

905
00:39:47,099 --> 00:39:48,519
One that has all of the red paths,
具有所有红色路径的一条

906
00:39:48,519 --> 00:39:50,007
one that has all the blue paths.
一条拥有所有蓝色道路的道路。 

907
00:39:50,007 --> 00:39:51,253
AUDIENCE: Right.
听众：对。 

908
00:39:51,253 --> 00:39:52,920
PROFESSOR: By the way, let's label this.
教授：顺便说一句，给我们贴上标签。 

909
00:39:52,920 --> 00:39:54,760
The nodes are--
节点是- 

910
00:39:54,760 --> 00:39:56,760
AUDIENCE: So it would work in this specific case
听众：因此在这种情况下可以使用

911
00:39:56,760 --> 00:40:00,500
because you [INAUDIBLE].
因为你[听不清]。 

912
00:40:00,699 --> 00:40:03,389
PROFESSOR: So if you compute the two shortest paths here,
教授：因此，如果您在此处计算两条最短路径， 

913
00:40:03,389 --> 00:40:06,819
you'll get the path using only reds, path using only blues.
您将仅使用红色获得路径，仅使用蓝色获得路径。 

914
00:40:06,820 --> 00:40:09,090
But you're not expressing the fact
但是你没有表达事实

915
00:40:09,090 --> 00:40:12,579
that you're allowed to alternate between reds and blues.
允许您在红色和蓝色之间切换。 

916
00:40:12,579 --> 00:40:14,190
How do you express that?
你怎么表达呢？ 

917
00:40:14,190 --> 00:40:16,110
AUDIENCE: Make a lot of corrections.
听众：进行很多更正。 

918
00:40:16,110 --> 00:40:17,920
AUDIENCE: Put two layers in--
听众：放两层

919
00:40:17,920 --> 00:40:18,900
PROFESSOR: Two layers.
教授：两层。 

920
00:40:18,900 --> 00:40:20,110
OK so these are two layers.
好的，所以这是两层。 

921
00:40:20,110 --> 00:40:24,039
This is the red layer, and this is the blue layer.
这是红色层，这是蓝色层。 

922
00:40:24,239 --> 00:40:27,369



923
00:40:27,369 --> 00:40:29,380
And how do I connect them?
以及如何连接它们？ 

924
00:40:29,380 --> 00:40:31,340
AUDIENCE: If there's an edge connecting them
观众：如果有一个边缘连接它们

925
00:40:31,340 --> 00:40:35,750
on the upper graph, we're just connecting them.
在上方的图表中，我们只是将它们连接起来。 

926
00:40:35,750 --> 00:40:38,219
AUDIENCE: Or connect the respective nodes
听众：或连接各个节点

927
00:40:38,219 --> 00:40:40,278
and make it a 5.
并使其成为5。 

928
00:40:40,278 --> 00:40:41,695
PROFESSOR: Both answers work, they
教授：两个答案都起作用， 

929
00:40:41,695 --> 00:40:43,000
have the same number of edges.
边数相同

930
00:40:43,000 --> 00:40:44,929
The last answer is easier to visualize,
最后一个答案更容易形象化， 

931
00:40:44,929 --> 00:40:47,000
so I'm going to go with that.
所以我要继续。 

932
00:40:47,000 --> 00:40:49,420
So I can go from the red world to the blue world,
所以我可以从红色世界走向蓝色世界， 

933
00:40:49,420 --> 00:40:51,190
and back, if I'm willing to pay 5.
如果我愿意支付5。 

934
00:40:51,190 --> 00:40:55,690



935
00:40:55,690 --> 00:40:56,414
So this is what--
这就是- 

936
00:40:56,614 --> 00:41:02,841



937
00:41:02,842 --> 00:41:07,260
AUDIENCE: And you just use those with the new edges.
听众：您只需要使用那些具有新优势的产品即可。 

938
00:41:07,260 --> 00:41:09,425
Or not DFS, but Dijkstra's.
或不是DFS，而是Dijkstra。 

939
00:41:09,425 --> 00:41:12,049
PROFESSOR: All right so all the edges here are positive, right?
教授：好的，所以这里的所有边缘都是正面的，对吗？ 

940
00:41:12,050 --> 00:41:13,523
So I'm going to use Dijkstra.
因此，我将使用Dijkstra。 

941
00:41:13,523 --> 00:41:18,360



942
00:41:18,360 --> 00:41:20,364
AUDIENCE: Is there any case in a positive graph
观众：正面图中有没有情况

943
00:41:20,563 --> 00:41:24,859
that Dijkstra's slower than Bellman-Ford?
 Dijkstra比Bellman-Ford慢吗？ 

944
00:41:24,860 --> 00:41:27,681
Because one is like b log b, and the other one is like b e.
因为一个像b log b，另一个像b e。 

945
00:41:27,681 --> 00:41:28,179
Right?
对？ 

946
00:41:28,179 --> 00:41:29,859
So if you have a lot of--
因此，如果您有很多…… 

947
00:41:29,860 --> 00:41:31,501
PROFESSOR: OK so what is Dijkstra?
教授：好的，Dijkstra是什么？ 

948
00:41:31,501 --> 00:41:32,980
AUDIENCE: B log b-
听众：B log b- 

949
00:41:32,980 --> 00:41:34,132
PROFESSOR: Almost.
教授：差不多了。 

950
00:41:34,132 --> 00:41:36,019
AUDIENCE: T log b, I think, right?
观众：我想是对数b，对不对？ 

951
00:41:36,019 --> 00:41:39,170
That's the theoretical best case ever,
这是理论上最好的情况， 

952
00:41:39,170 --> 00:41:42,568
PROFESSOR: So actually, the theoretical is E plus--
教授：实际上，理论上是E加- 

953
00:41:42,568 --> 00:41:44,067
AUDIENCE: Yeah, that's what I meant.
听众：是的，这就是我的意思。 

954
00:41:44,068 --> 00:41:44,842
AUDIENCE: Oh.
听众：哦。 

955
00:41:45,041 --> 00:41:45,769
Oh--
哦 - 

956
00:41:45,769 --> 00:41:47,561
PROFESSOR: This is what you get with heaps,
教授：这就是堆的收获， 

957
00:41:47,561 --> 00:41:50,722
so this is what we got in the P set.
这就是我们在P集中得到的。 

958
00:41:50,722 --> 00:41:52,500
AUDIENCE: What was the first one?
听众：第一个是什么？ 

959
00:41:52,500 --> 00:41:55,375
AUDIENCE: The first one is like Fibonacci heaps.
听众：第一个就像斐波那契堆。 

960
00:41:55,375 --> 00:41:57,000
It's got a really high constant factor,
它有一个非常高的恒定因子， 

961
00:41:57,000 --> 00:41:59,159
so you never actually use it.
因此您永远不会实际使用它。 

962
00:41:59,159 --> 00:42:01,399
PROFESSOR: So this is a nice theoretical thing,
教授：所以这是一个很好的理论上的东西， 

963
00:42:01,400 --> 00:42:03,480
and this is what you get in practice.
这就是您所练习的。 

964
00:42:03,679 --> 00:42:06,099
If you use the regular binary heaps.
如果使用常规二进制堆。 

965
00:42:06,099 --> 00:42:08,289
And so you compare this to Bellman-Ford
所以您可以将其与Bellman-Ford进行比较

966
00:42:08,289 --> 00:42:16,340
which is-- whoops-- V times E. I'm
是-哎呀-V乘以E。我是

967
00:42:16,340 --> 00:42:19,210
going to guess that this is faster no matter what.
猜测无论如何这都更快。 

968
00:42:19,409 --> 00:42:21,109
AUDIENCE: Yes, OK.
听众：是的，好的。 

969
00:42:21,110 --> 00:42:25,460
So the theoretical one could be slower, then, possible.
因此，理论上可能会更慢。 

970
00:42:25,659 --> 00:42:28,429
The Fibonacci one?
斐波那契一个？ 

971
00:42:28,429 --> 00:42:32,498
Because if you have a ton of vertices without many edges.
因为如果您有很多没有很多边的顶点。 

972
00:42:32,498 --> 00:42:34,289
PROFESSOR: OK If you have a ton of vertices
教授：好的，如果您有大量的顶点

973
00:42:34,289 --> 00:42:35,579
but not too many edges.
但没有太多的优势。 

974
00:42:35,579 --> 00:42:36,590
AUDIENCE: Yeah.
听众：是的。 

975
00:42:36,590 --> 00:42:38,500
PROFESSOR: Then you're saying that this
教授：那你是说

976
00:42:38,500 --> 00:42:42,121
is going to be bigger than-- so what do you do in that case?
会比-大-那么在这种情况下您会怎么做？ 

977
00:42:42,121 --> 00:42:45,128
AUDIENCE: I mean you could just ignore the vertices, I guess.
听众：我的意思是你可以忽略顶点。 

978
00:42:45,128 --> 00:42:46,670
PROFESSOR: OK so if you have a ton of
教授：好的，如果您有很多

979
00:42:46,670 --> 00:42:48,070
vertices and not that many edges.
顶点而不是那么多的边缘。 

980
00:42:48,070 --> 00:42:51,789
So if you have edges smaller-- sorry-- yeah,
所以，如果您的边缘较小，对不起，是的， 

981
00:42:51,789 --> 00:42:53,750
it's just smaller than vertices, then
它只是比顶点小，然后

982
00:42:53,750 --> 00:42:56,070
some vertices have to be unconnected.
一些顶点必须不连接。 

983
00:42:56,070 --> 00:42:56,891
So what to do?
那么该怎么办？ 

984
00:42:57,090 --> 00:42:58,382
AUDIENCE: You just ignore them.
听众：您只是忽略它们。 

985
00:42:58,382 --> 00:42:59,380
AUDIENCE: You're not going to reach them anyway.
听众：无论如何，您都不会联系他们。 

986
00:42:59,380 --> 00:43:00,730
PROFESSOR: How do you ignore them?
教授：您如何忽略它们？ 

987
00:43:00,929 --> 00:43:01,730
How do you ignore them in--
您如何在以下情况中忽略它们： 

988
00:43:01,730 --> 00:43:02,750
AUDIENCE: Oh, I see your point.
听众：哦，我明白你的意思。 

989
00:43:02,750 --> 00:43:04,623
So you're never going to get to them anyways.
因此，您无论如何都不会去找他们。 

990
00:43:04,623 --> 00:43:05,125
So--
所以 - 

991
00:43:05,125 --> 00:43:07,206
AUDIENCE: Well no, but once you've started at one,
听众：嗯，不，但是一旦开始， 

992
00:43:07,206 --> 00:43:08,887
you're going to have to touch them all.
您将不得不全部触摸它们。 

993
00:43:08,887 --> 00:43:11,259
They're all going to be in the heap.
他们都将在堆中。 

994
00:43:11,260 --> 00:43:12,039
Yeah.
是的

995
00:43:12,239 --> 00:43:13,905
AUDIENCE: No, don't put them in the heap
听众：不，不要把它们放在堆里

996
00:43:13,905 --> 00:43:16,619
until you look at them.
直到你看着他们。 

997
00:43:16,619 --> 00:43:19,210
AUDIENCE: Well, there's a starting point, right?
听众：嗯，有一个起点，对吧？ 

998
00:43:19,210 --> 00:43:21,710
If you can't go anywhere in the starting point, you're done.
如果您不能在起点上走到任何地方，那您就完成了。 

999
00:43:21,710 --> 00:43:26,704
PROFESSOR: OK so you take the starting point and you do--
教授：好的，所以您以出发点为准， 

1000
00:43:26,704 --> 00:43:28,090
[INTERPOSING VOICES]
 [插入语音] 

1001
00:43:28,090 --> 00:43:31,539
PROFESSOR: Ok so I would take the starting point and do a BFS
教授：好的，我将以此为出发点并进行BFS 

1002
00:43:31,739 --> 00:43:33,849
and ignore everything else.
并忽略其他一切。 

1003
00:43:33,849 --> 00:43:37,355
And that is clearly order of how many vertices and edges that
这显然是多少个顶点和边的顺序

1004
00:43:37,355 --> 00:43:38,590
are reachable from that.
从那是可以达到的。 

1005
00:43:38,590 --> 00:43:41,309
So that will give you a nice graph.
这样就可以给您一个漂亮的图形。 

1006
00:43:41,309 --> 00:43:43,570
Either that, or if you initialization your Dijkstra
要么，或者如果您初始化Dijkstra 

1007
00:43:43,570 --> 00:43:45,565
carefully enough, this actually only reflects
足够小心，这实际上只反映了

1008
00:43:45,764 --> 00:43:48,629
the reachable edges and vertices.
可达的边缘和顶点。 

1009
00:43:48,630 --> 00:43:50,610
So you never have this.
所以你永远不会有这个。 

1010
00:43:50,610 --> 00:43:52,730
So either one works.
所以任何一个都可以。 

1011
00:43:52,730 --> 00:43:55,235
In theory mode, it might be better to say I'll do a BFS
在理论模式下，最好说我将进行BFS 

1012
00:43:55,235 --> 00:43:57,210
and reduce the graph.
并减少图形。 

1013
00:43:57,210 --> 00:43:58,826
Because that's easier to argue.
因为这更容易争论。 

1014
00:43:58,826 --> 00:43:59,326
Yes.
是。 

1015
00:43:59,326 --> 00:44:03,829
AUDIENCE: So, for this, when you make all
观众：因此，当您创造所有

1016
00:44:03,829 --> 00:44:06,713
that-- I guess my question is are we
那-我想我的问题是我们

1017
00:44:06,713 --> 00:44:09,409
going to be asked to talk about running times
将被要求谈论跑步时间

1018
00:44:09,409 --> 00:44:10,879
for different transformation?
为了不同的转变？ 

1019
00:44:10,880 --> 00:44:12,771
Or the algorithms?
还是算法？ 

1020
00:44:12,771 --> 00:44:14,730
PROFESSOR: Well so at the very least, last time
教授：好吧，至少是最后一次

1021
00:44:14,730 --> 00:44:17,429
we said, this is the problem.
我们说过，这就是问题所在。 

1022
00:44:17,429 --> 00:44:19,559
Give us an algorithm with this running time.
给我们一个运行时间的算法。 

1023
00:44:19,559 --> 00:44:19,840
AUDIENCE: Right.
听众：对。 

1024
00:44:19,840 --> 00:44:21,347
PROFESSOR: So you have to be able to know
教授：所以你必须要知道

1025
00:44:21,547 --> 00:44:22,469
your transformations.
您的转变。 

1026
00:44:22,469 --> 00:44:24,635
So not the running for computing the transformation,
所以不是为了计算转换而奔波， 

1027
00:44:24,635 --> 00:44:27,650
but you have to be able to know how much bigger the graph gets
但您必须能够知道图形会变大多少

1028
00:44:27,650 --> 00:44:29,811
and what that implies for the running time.
以及运行时间的含义。 

1029
00:44:29,811 --> 00:44:31,809
Turns out that usually for these transformations
事实证明，通常对于这些转换

1030
00:44:31,809 --> 00:44:33,309
you can compute them in linear time.
您可以在线性时间内计算它们。 

1031
00:44:33,309 --> 00:44:35,329
So the time for computing a transformation
因此计算转换的时间

1032
00:44:35,329 --> 00:44:37,190
is much smaller than the time for running
比运行时间小得多

1033
00:44:37,190 --> 00:44:38,250
Dijkstra or Bellman-Ford.
 Dijkstra或Bellman-Ford。 

1034
00:44:38,449 --> 00:44:43,311
So that's why we don't really go into that.
这就是为什么我们不真正讨论这一点。 

1035
00:44:43,311 --> 00:44:45,440
This one is definitely linear time.
这绝对是线性时间。 

1036
00:44:45,440 --> 00:44:50,030
So what happens to the graph in this case?
那么在这种情况下图会发生什么？ 

1037
00:44:50,030 --> 00:44:52,503
Number of edges and number of vertices.
边数和顶点数。 

1038
00:44:52,503 --> 00:44:54,867
AUDIENCE: Number of edges increases by V
听众：边数增加V 

1039
00:44:54,867 --> 00:44:56,759
and number of vertices.
和顶点数。 

1040
00:44:56,760 --> 00:44:59,130
So increase by V.
因此增加V。 

1041
00:44:59,130 --> 00:45:02,692
PROFESSOR: That's V, and times is 2.
教授：那是V，时间是2。 

1042
00:45:02,692 --> 00:45:04,650
So you plug this into Bellman-Ford or Dijkstra,
所以您将其插入Bellman-Ford或Dijkstra， 

1043
00:45:04,650 --> 00:45:06,289
you find out the new running time.
您会发现新的运行时间。 

1044
00:45:06,289 --> 00:45:08,989
So every time you see what is the size of your new graph,
因此，每次您看到新图表的大小时， 

1045
00:45:08,989 --> 00:45:10,530
and you plug that into the algorithm.
然后将其插入算法。 

1046
00:45:10,530 --> 00:45:14,353



1047
00:45:14,353 --> 00:45:16,019
OK so what is the intuition behind this?
好吧，这背后的直觉是什么？ 

1048
00:45:16,019 --> 00:45:17,369
Did everyone get this problem?
每个人都有这个问题吗？ 

1049
00:45:17,369 --> 00:45:20,529



1050
00:45:20,530 --> 00:45:22,530
So it's the old problem that we're going through
这是我们要解决的老问题

1051
00:45:22,530 --> 00:45:26,050
again and again, where you have a graph that's 2D,
一次又一次地，你有一个二维图

1052
00:45:26,050 --> 00:45:28,777
and we want to compute something that Dijkstra
我们想计算出Dijkstra 

1053
00:45:28,976 --> 00:45:30,059
can't compute on it's own.
不能自己计算。 

1054
00:45:30,059 --> 00:45:32,679
Or that Bellman-Ford can't compute on it's own.
或Bellman-Ford不能自己计算。 

1055
00:45:32,679 --> 00:45:34,799
So in order to be able to compute those things,
因此，为了能够计算这些东西， 

1056
00:45:34,800 --> 00:45:37,150
we need to add additional states to the graph.
我们需要向图中添加其他状态。 

1057
00:45:37,349 --> 00:45:39,719
And the way we do that is we make copies of the graph
我们这样做的方法是制作图的副本

1058
00:45:39,719 --> 00:45:40,589
that we call layers.
我们称之为图层。 

1059
00:45:40,590 --> 00:45:44,550
Because we're thinking that if you take that 2D map, and you
因为我们在考虑如果您拍摄2D地图，而您

1060
00:45:44,550 --> 00:45:46,130
create copies of it, you basically
创建它的副本，基本上

1061
00:45:46,329 --> 00:45:49,759
have a 3D graph where there is the original graph.
有一个3D图形，其中有原始图形。 

1062
00:45:49,760 --> 00:45:52,360



1063
00:45:52,559 --> 00:45:54,519
That's the science part of the problem, the art
那是问题的科学部分，艺术

1064
00:45:54,519 --> 00:45:57,150
part of solving the problem is figuring out
解决问题的一部分是弄清楚

1065
00:45:57,150 --> 00:45:59,550
what those layers are and how you connect them.
这些层是什么以及如何连接它们。 

1066
00:45:59,550 --> 00:46:01,880
Because by doing that you can solve a ton of problems,
因为这样做可以解决很多问题， 

1067
00:46:01,880 --> 00:46:05,309
as we have seen in this class.
正如我们在本课程中所看到的。 

1068
00:46:05,309 --> 00:46:07,759
AUDIENCE: Is there a possibility that you
听众：您是否有可能

1069
00:46:07,760 --> 00:46:09,791
have a very large number of layers needed
需要大量的图层

1070
00:46:09,990 --> 00:46:14,597
to be permutations of-- different choice
被不同的选择

1071
00:46:14,597 --> 00:46:17,286
to make instead of just a red or a blue?
制作，而不只是红色或蓝色？ 

1072
00:46:17,286 --> 00:46:18,190
PROFESSOR: Yep.
教授：是的。 

1073
00:46:18,190 --> 00:46:21,536
So is there a problem where we had a ton of layers?
那么我们有大量的图层存在问题吗？ 

1074
00:46:21,536 --> 00:46:22,159
AUDIENCE: Mhmm.
听众：嗯。 

1075
00:46:22,159 --> 00:46:23,429
PROFESSOR: Yep.
教授：是的。 

1076
00:46:23,429 --> 00:46:25,219
OK so two problems, right?
好，那么有两个问题吧？ 

1077
00:46:25,219 --> 00:46:26,942
AUDIENCE: One for every second.
听众：每秒一听。 

1078
00:46:26,942 --> 00:46:28,809
[LAUGHS]
 [笑声] 

1079
00:46:28,809 --> 00:46:31,875
PROFESSOR: And so these are the layers, presumably.
教授：这些大概就是这些层。 

1080
00:46:31,876 --> 00:46:33,750
We had two problems that had a ton of layers.
我们遇到了两个问题，这些问题有很多层。 

1081
00:46:33,750 --> 00:46:35,208
One of them was the highway problem
其中之一是高速公路问题

1082
00:46:35,208 --> 00:46:37,070
where you had timetables.
您有时间表的地方。 

1083
00:46:37,070 --> 00:46:39,172
And there, the number of layers was the number
那里的层数就是

1084
00:46:39,172 --> 00:46:40,880
of minutes in the day you're considering.
您正在考虑的分钟数。 

1085
00:46:40,880 --> 00:46:44,010
So roughly, 1440.
大约是1440。 

1086
00:46:44,010 --> 00:46:47,210
And the other one was StarCraft where the number of layers
另一个是星际争霸，其中层数

1087
00:46:47,409 --> 00:46:50,399
was something ginormous, right?
是巨大的东西，对吗？ 

1088
00:46:50,400 --> 00:46:53,106
So as long as that fits the theory, that's fine.
因此，只要符合理论，就可以。 

1089
00:46:53,106 --> 00:46:55,730
As long as the number of layers fits whatever the problem wants
只要层数适合任何问题

1090
00:46:55,730 --> 00:46:57,693
you to compute, its OK.
您进行计算，就可以了。 

1091
00:46:57,893 --> 00:47:01,302
AUDIENCE: So transforming another layer,
听众：所以要变换另一层， 

1092
00:47:01,302 --> 00:47:07,150
is that like in V time because copying the number of vertices?
是否像V时间一样，因为复制了顶点数？ 

1093
00:47:07,150 --> 00:47:09,945
PROFESSOR: Yeah, so you should be
教授：是的，所以你应该

1094
00:47:09,945 --> 00:47:12,639
able to implement this in order of V plus E, which
能够按照V加E的顺序实现

1095
00:47:12,639 --> 00:47:15,670
is what you need to output the new graph description.
您需要输出新的图形描述。 

1096
00:47:15,670 --> 00:47:19,405
I claim that for this you can.
我声称可以做到这一点。 

1097
00:47:19,405 --> 00:47:24,039
AUDIENCE: So for E prime, I guess, how'd you get that?
听众：所以我想对于E素数，你是怎么得到的？ 

1098
00:47:24,239 --> 00:47:26,375
PROFESSOR: So for each vertex you
教授：所以对于每个顶点

1099
00:47:26,375 --> 00:47:29,610
are going to create a red copy and a blue copy.
将要创建一个红色副本和一个蓝色副本。 

1100
00:47:29,610 --> 00:47:31,079
2V, this is easy.
 2V，这很容易。 

1101
00:47:31,079 --> 00:47:34,769
Now, the red edges stay in here, the blue edges stay in here.
现在，红色边缘留在这里，蓝色边缘留在这里。 

1102
00:47:34,769 --> 00:47:36,539
So nothing changed so far.
到目前为止，一切都没有改变。 

1103
00:47:36,539 --> 00:47:39,279
But each red vertex needs to be connected to the blue vertex
但是每个红色顶点都需要连接到蓝色顶点

1104
00:47:39,280 --> 00:47:42,320
by an edge of weight 5.
靠重量5。 

1105
00:47:42,320 --> 00:47:46,280
So that means that we're going to copy over the original edges
因此，这意味着我们将复制原始边缘

1106
00:47:46,280 --> 00:47:49,456
and we're going to add the edges that connect the vertices.
我们将添加连接顶点的边。 

1107
00:47:49,655 --> 00:47:51,519
AUDIENCE: [INAUDIBLE].
听众：[听不清]。 

1108
00:47:51,519 --> 00:47:53,769
PROFESSOR: So we're not going to ask about the running
教授：所以我们不会再问跑步了

1109
00:47:53,769 --> 00:47:55,449
time of the transformations in general.
转换的时间。 

1110
00:47:55,449 --> 00:47:57,989
Because we assume that they can be done in linear time.
因为我们假设它们可以在线性时间内完成。 

1111
00:47:57,989 --> 00:48:01,149
But you need to at least have a sense of whether your graph is
但是您至少需要了解您的图表是否

1112
00:48:01,150 --> 00:48:02,880
going to double, whether it's going
会翻倍，是否会

1113
00:48:02,880 --> 00:48:06,059
to increase exponentially, or what's going to happen to it.
呈指数增长，否则会发生什么。 

1114
00:48:06,059 --> 00:48:08,099
So let's make a small tweak to this problem.
因此，让我们对这个问题进行一些小的调整。 

1115
00:48:08,099 --> 00:48:10,150
Suppose that the instead of having this,
假设而不是拥有这个， 

1116
00:48:10,150 --> 00:48:13,460
I can go from red to blue, but once I've
我可以从红色变成蓝色，但是一旦

1117
00:48:13,460 --> 00:48:16,360
gone from red to blue, I can't go back.
从红色变成蓝色，我回不去了。 

1118
00:48:16,360 --> 00:48:20,849
So I can start out either red or blue, I can go red to blue,
所以我可以从红色或蓝色开始，我可以从红色变为蓝色， 

1119
00:48:20,849 --> 00:48:23,793
but once I'm in blue I can't go back to red.
但是一旦我穿上蓝色，就无法回到红色。 

1120
00:48:23,793 --> 00:48:25,521
AUDIENCE: Make those directed edges.
听众：做那些有方向的边缘。 

1121
00:48:25,521 --> 00:48:27,389
PROFESSOR: From where to where?
教授：从哪里到哪里？ 

1122
00:48:27,389 --> 00:48:28,784
AUDIENCE: Red to blue.
听众：从红色到蓝色。 

1123
00:48:28,784 --> 00:48:32,509



1124
00:48:32,510 --> 00:48:36,400
PROFESSOR: OK so this is how I express constraints,
教授：好的，这就是我表达约束的方式， 

1125
00:48:36,599 --> 00:48:39,569
in constraints among layers.
层之间的约束。 

1126
00:48:39,570 --> 00:48:42,539
Before, we had two layers, red and blue.
以前，我们有两层，红色和蓝色。 

1127
00:48:42,539 --> 00:48:45,215
And we connected them by an edge of weight 5, which
我们通过重量5的边缘将它们连接起来

1128
00:48:45,215 --> 00:48:47,089
says you can go from red world to blue world,
说你可以从红色世界走向蓝色世界， 

1129
00:48:47,090 --> 00:48:50,460
and back, all you have to do is pay 5.
然后，您要做的就是支付5。 

1130
00:48:50,460 --> 00:48:53,510
If we have directed edges, then this is a constraint.
如果我们有方向的边缘，那么这是一个约束。 

1131
00:48:53,510 --> 00:48:56,690
If the constraint said there's no cost,
如果约束条件说没有费用， 

1132
00:48:56,690 --> 00:48:58,480
but you can only go from red to blue,
但是你只能从红色变成蓝色， 

1133
00:48:58,480 --> 00:49:00,440
you still have to do two layers.
您仍然必须做两层。 

1134
00:49:00,440 --> 00:49:02,789
And keep track of which layer you're in.
并跟踪您所在的图层。 

1135
00:49:02,789 --> 00:49:05,059
But then your edge of the weight 0.
但随后您的权重为0。 

1136
00:49:05,059 --> 00:49:07,440
Since we have to pay, the edge is weight 5.
由于我们必须付款，因此优势在于重量5。 

1137
00:49:07,440 --> 00:49:10,590



1138
00:49:10,590 --> 00:49:12,460
So we can use layers to express additional costs,
因此，我们可以使用图层来表达额外的费用， 

1139
00:49:12,659 --> 00:49:13,960
or just to express constraints.
或只是为了表达约束。 

1140
00:49:13,960 --> 00:49:17,150



1141
00:49:17,150 --> 00:49:18,394
Does this make sense?
这有意义吗？ 

1142
00:49:18,394 --> 00:49:20,769
AUDIENCE: Does this include back edges, or forward edges,
观众：这包括后边缘还是前边缘， 

1143
00:49:20,769 --> 00:49:21,701
as well?
也一样

1144
00:49:21,702 --> 00:49:22,710
PROFESSOR: Let's get to that.
教授：让我们开始吧。 

1145
00:49:22,909 --> 00:49:25,319
OK, so does this make sense so far?
好，到目前为止，这有意义吗？ 

1146
00:49:25,320 --> 00:49:28,130
One more question, what shortest path do I want to compute here?
还有一个问题，我想在这里计算什么最短路径？ 

1147
00:49:28,329 --> 00:49:31,054



1148
00:49:31,054 --> 00:49:34,639
To make sure that you guys got it.
为了确保你们得到它。 

1149
00:49:34,639 --> 00:49:37,500
AUDIENCE: Oh, you have to do two of them maybe, four--
听众：哦，你必须做两个，也许四个- 

1150
00:49:37,500 --> 00:49:39,099
PROFESSOR: OK, I like four of them.
教授：好的，我喜欢其中的四个。 

1151
00:49:39,099 --> 00:49:46,289
So I have to do SR, TR, SR, TB, SB, TR, SB, TB.
所以我必须要做SR，TR，SR，TB，SB，TR，SB，TB。 

1152
00:49:46,289 --> 00:49:48,065
Fortunately, our algorithms give us
幸运的是，我们的算法给了我们

1153
00:49:48,065 --> 00:49:49,439
the shortest path from one source
来自一个来源的最短路径

1154
00:49:49,440 --> 00:49:50,648
to all of the other vertices.
到所有其他顶点。 

1155
00:49:50,648 --> 00:49:54,079
So I'd only have to run Dijkstra or Bellman-Ford twice.
因此，我只需要运行两次Dijkstra或Bellman-Ford。 

1156
00:49:54,079 --> 00:49:56,250
What if I want to run the algorithm once?
如果我想运行一次算法怎么办？ 

1157
00:49:56,250 --> 00:49:57,123
What do I do?
我该怎么办？ 

1158
00:49:57,123 --> 00:50:00,019
AUDIENCE: You put vertices on the edges.
听众：将顶点放在边缘上。 

1159
00:50:00,019 --> 00:50:03,530
PROFESSOR: OK so supernode as a source, supernode
教授：好的，所以超级节点作为源，超级节点

1160
00:50:03,530 --> 00:50:05,550
as a destination.
作为目的地。 

1161
00:50:05,550 --> 00:50:07,480
And I connect them to what?
我将它们连接到什么？ 

1162
00:50:07,480 --> 00:50:08,847
AUDIENCE: Zero weight.
听众：零重量。 

1163
00:50:09,047 --> 00:50:09,963
PROFESSOR: To?
教授：要吗？ 

1164
00:50:09,963 --> 00:50:10,880
AUDIENCE: The two.
听众：两个。 

1165
00:50:10,880 --> 00:50:11,800
AUDIENCE: Final V.
观众：最终V。 

1166
00:50:11,800 --> 00:50:13,500
PROFESSOR: OK, very good.
教授：好的，很好。 

1167
00:50:13,699 --> 00:50:15,784
And?
和？ 

1168
00:50:15,784 --> 00:50:16,409
AUDIENCE: Same.
听众：一样。 

1169
00:50:16,409 --> 00:50:20,114



1170
00:50:20,114 --> 00:50:21,489
PROFESSOR: So what happened here?
教授：那这里发生了什么？ 

1171
00:50:21,489 --> 00:50:24,459
This says you can go anywhere.
这表示您可以去任何地方。 

1172
00:50:24,460 --> 00:50:26,494
And this says you can come back from anywhere.
这表示您可以从任何地方回来。 

1173
00:50:26,494 --> 00:50:28,864
AUDIENCE: Bridge between the worlds.
听众：世界之间的桥梁。 

1174
00:50:28,864 --> 00:50:29,811
PROFESSOR: Yep.
教授：是的。 

1175
00:50:29,811 --> 00:50:32,190
[AUDIENCE LAUGHING]
 [听众嘲笑] 

1176
00:50:32,190 --> 00:50:35,550
PROFESSOR: So do we want this to be directed or undirected,
教授：那么我们是否希望这是有方向的还是无方向的， 

1177
00:50:35,550 --> 00:50:37,384
by the way, does it matter?
顺便问一下，这有关系吗？ 

1178
00:50:37,384 --> 00:50:38,175
AUDIENCE: Directed.
听众：导演。 

1179
00:50:38,175 --> 00:50:39,231
You can only go one way--
您只能走一条路- 

1180
00:50:39,231 --> 00:50:41,730
AUDIENCE: Oh, depends on which problem you're talking about.
听众：哦，取决于您在谈论哪个问题。 

1181
00:50:41,730 --> 00:50:45,592



1182
00:50:45,592 --> 00:50:47,300
PROFESSOR: I think if they're undirected,
教授：我想如果他们是无方向的， 

1183
00:50:47,300 --> 00:50:49,307
it shouldn't matter too much, because there shouldn't
它不应该太重要，因为不应该

1184
00:50:49,507 --> 00:50:54,629
be a path where you go back to the source and then you switch.
成为返回源然后切换的路径。 

1185
00:50:54,630 --> 00:50:56,510
But this would be if you're on a quiz
但这是如果您正在测验

1186
00:50:56,510 --> 00:50:57,884
and you don't want to think about
而你不想考虑

1187
00:50:57,884 --> 00:51:00,487
that, I'd make them directed just to be on the safe side.
那，我会指导他们只是为了安全起见。 

1188
00:51:00,487 --> 00:51:01,228
AUDIENCE: What were the four shortest
观众：最短的四个是什么

1189
00:51:01,228 --> 00:51:02,957
paths you said we needed to calculate
您说的我们需要计算的路径

1190
00:51:02,958 --> 00:51:05,230
for the original problem, before you added the supernodes?
对于原始问题，在添加超级节点之前？ 

1191
00:51:05,429 --> 00:51:07,759
PROFESSOR: So we don't know whether we start out
教授：所以我们不知道我们是否开始

1192
00:51:07,760 --> 00:51:08,514
with a red edge--
带有红色边缘

1193
00:51:08,713 --> 00:51:09,380
AUDIENCE: Right.
听众：对。 

1194
00:51:09,380 --> 00:51:10,628
PROFESSOR: --with a blue edge.
教授：-带蓝色边缘。 

1195
00:51:10,628 --> 00:51:13,911
We don't know whether we end up with a red edge or a blue edge.
我们不知道是以红色边缘还是蓝色边缘结束。 

1196
00:51:13,911 --> 00:51:15,909
AUDIENCE: Stay in red world, stay in blue world,
听众：留在红色世界，留在蓝色世界， 

1197
00:51:15,909 --> 00:51:17,319
red to blue and blue to red.
红色到蓝色和蓝色到红色。 

1198
00:51:17,320 --> 00:51:21,059
PROFESSOR: Yeah OK, cool.
教授：是的，很好。 

1199
00:51:21,059 --> 00:51:24,331
So let's talk about BFS and DFS very briefly, I guess.
因此，我想让我们简短地谈谈BFS和DFS。 

1200
00:51:24,331 --> 00:51:27,109



1201
00:51:27,110 --> 00:51:28,144
So BFS and DFS.
因此，BFS和DFS。 

1202
00:51:28,144 --> 00:51:31,199



1203
00:51:31,199 --> 00:51:32,449
What does BFS give us?
 BFS给我们带来什么？ 

1204
00:51:32,449 --> 00:51:35,769
Why is it useful?
为什么有用？ 

1205
00:51:35,769 --> 00:51:37,699
AUDIENCE: Shortest paths.
听众：最短的路径。 

1206
00:51:37,699 --> 00:51:39,250
PROFESSOR: Shortest paths in terms
教授：最短路径

1207
00:51:39,250 --> 00:51:40,409
of number of edges, right?
的边缘数量，对吗？ 

1208
00:51:40,409 --> 00:51:42,710
No weight on the engines.
发动机没有重量。 

1209
00:51:42,710 --> 00:51:52,369
So shortest paths using the number of edges.
因此，最短路径使用的是边数。 

1210
00:51:52,369 --> 00:51:55,769
What does DFS give us?
 DFS给我们带来什么？ 

1211
00:51:55,769 --> 00:51:57,802
AUDIENCE: Topological start.
听众：拓扑开始。 

1212
00:51:57,802 --> 00:51:59,760
PROFESSOR: Hey, man, you had this on the P set,
教授：嘿，伙计，您在P台上有这个， 

1213
00:51:59,760 --> 00:52:00,885
I wouldn't call it nothing.
我什么也不会说。 

1214
00:52:00,885 --> 00:52:05,090



1215
00:52:05,090 --> 00:52:07,800
OK, how does BFS look at the graph?
好了，BFS如何看图？ 

1216
00:52:07,800 --> 00:52:10,610
How does it partition the graph?
如何划分图形？ 

1217
00:52:10,809 --> 00:52:12,079
Nodes are grouped into--
节点分组为- 

1218
00:52:12,079 --> 00:52:12,849
AUDIENCE: Levels.
听众：水平。 

1219
00:52:12,849 --> 00:52:13,521
PROFESSOR: Levels.
教授：水平。 

1220
00:52:13,521 --> 00:52:15,355
AUDIENCE: The light distance and the source.
听众：光的距离和光源。 

1221
00:52:15,355 --> 00:52:17,266



1222
00:52:17,266 --> 00:52:18,849
PROFESSOR: So you start with a source,
教授：所以您从一个源头开始， 

1223
00:52:18,849 --> 00:52:21,309
and then all the nodes that are one edge
然后是一个边缘的所有节点

1224
00:52:21,309 --> 00:52:23,909
away are at level one, all the nodes that
在第一层，所有的节点

1225
00:52:23,909 --> 00:52:28,960
are two edges away are level two, so on and so forth.
是两个边缘，位于第二层，依此类推。 

1226
00:52:28,960 --> 00:52:30,349
What does DFS give us?
 DFS给我们带来什么？ 

1227
00:52:30,349 --> 00:52:34,469



1228
00:52:34,469 --> 00:52:34,969
A mess?
一团糟？ 

1229
00:52:34,969 --> 00:52:36,759
A mess, right?
一团糟，对不对？ 

1230
00:52:36,760 --> 00:52:39,690
So it gives us edge types.
因此，它为我们提供了边缘类型。 

1231
00:52:39,889 --> 00:52:43,650



1232
00:52:43,650 --> 00:52:46,775
And it gives us exit times.
这给了我们退出时间。 

1233
00:52:46,775 --> 00:52:51,019



1234
00:52:51,019 --> 00:52:53,414
Exit times are useful for topological sort, right?
退出时间对于拓扑排序很有用，对吧？ 

1235
00:52:53,414 --> 00:52:53,914
Yes.
是。 

1236
00:52:53,914 --> 00:52:56,769
AUDIENCE: It also gives us a tree.
听众：它也给我们提供了一棵树。 

1237
00:52:56,769 --> 00:53:00,360
PROFESSOR: OK, does BFS give us a tree?
教授：好的，BFS可以给我们树吗？ 

1238
00:53:00,360 --> 00:53:01,309
AUDIENCE: Yes.
听众：是的。 

1239
00:53:01,309 --> 00:53:03,019
AUDIENCE: Yes, they both give us trees.
听众：是的，他们俩都给我们树。 

1240
00:53:03,019 --> 00:53:04,936
PROFESSOR: So both of them will give us trees.
教授：所以他们俩都会给我们树木。 

1241
00:53:04,936 --> 00:53:10,380



1242
00:53:10,380 --> 00:53:11,710
So what are those trees?
那那些树是什么？ 

1243
00:53:11,909 --> 00:53:16,449
For each node, BFS or DFS discovered that node
对于每个节点，BFS或DFS发现了该节点

1244
00:53:16,449 --> 00:53:19,879
by going from some parent node across an edge.
通过从某个边缘的父节点进入。 

1245
00:53:19,880 --> 00:53:23,610
So that edge belongs to the BFS or to the DFS tree.
因此，该边缘属于BFS或DFS树。 

1246
00:53:23,610 --> 00:53:25,170
How do we compute those trees?
我们如何计算这些树？ 

1247
00:53:25,170 --> 00:53:27,947



1248
00:53:27,947 --> 00:53:29,501
AUDIENCE: Just do it?
听众：是吗？ 

1249
00:53:29,501 --> 00:53:31,210
PROFESSOR: So how do you, in BFS and DFS,
教授：那您如何在BFS和DFS中， 

1250
00:53:31,210 --> 00:53:32,697
what do you compute to--
你算什么- 

1251
00:53:32,697 --> 00:53:33,780
AUDIENCE: Parent pointers?
听众：父指针？ 

1252
00:53:33,780 --> 00:53:34,960
PROFESSOR: Parent pointers.
教授：父指针。 

1253
00:53:35,159 --> 00:53:37,259
So that's what you use to keep track of them.
这就是您用来跟踪它们的方法。 

1254
00:53:37,260 --> 00:53:38,760
Sorry the question is bad but that's
抱歉，这个问题不好，但这是

1255
00:53:38,760 --> 00:53:41,880
what I want you to get out of it.
我要你摆脱它。 

1256
00:53:42,079 --> 00:53:45,090
Parent pointers.
父指针。 

1257
00:53:45,090 --> 00:53:47,420
So DFS and BFS will both compute trees of the graph.
因此DFS和BFS都将计算图的树。 

1258
00:53:47,619 --> 00:53:51,851
Are they the same trees or different trees?
它们是同一棵树还是不同的树？ 

1259
00:53:51,851 --> 00:53:53,059
AUDIENCE: Probably different.
听众：可能有所不同。 

1260
00:53:53,059 --> 00:53:53,949
PROFESSOR: Different trees, right?
教授：不同的树木，对不对？ 

1261
00:53:53,949 --> 00:53:54,615
Let's take this.
让我们来。 

1262
00:53:54,615 --> 00:53:58,159



1263
00:53:58,159 --> 00:54:02,469
S, A, B, right?
 S，A，B，对吗？ 

1264
00:54:02,469 --> 00:54:07,071
BFS will give us this, DFS will give us this.
 BFS会给我们这个，DFS会给我们这个。 

1265
00:54:07,072 --> 00:54:10,940



1266
00:54:11,139 --> 00:54:15,009
OK, what edge types do we have in DFS?
好的，在DFS中我们有哪些边缘类型？ 

1267
00:54:15,010 --> 00:54:16,320
AUDIENCE: Forward edges.
听众：前缘。 

1268
00:54:16,320 --> 00:54:17,530
PROFESSOR: OK, forward.
教授：好的，向前。 

1269
00:54:17,530 --> 00:54:18,030
Cool.
凉。 

1270
00:54:18,030 --> 00:54:19,090
What are they?
这些是什么？ 

1271
00:54:19,289 --> 00:54:21,675
AUDIENCE: Those are just from parent
听众：这些只是来自父母

1272
00:54:21,675 --> 00:54:26,210
to children that are being presented.
给正在介绍的孩子们。 

1273
00:54:26,210 --> 00:54:27,429
PROFESSOR: OK.
教授：好的。 

1274
00:54:27,429 --> 00:54:29,529
AUDIENCE: So, I don't know how else to put it.
听众：所以，我不知道该怎么说。 

1275
00:54:29,530 --> 00:54:32,460
PROFESSOR: OK so you should have this on your cheat sheet,
教授：好的，所以您应该在备忘单上放上它， 

1276
00:54:32,460 --> 00:54:34,103
right?
对？ 

1277
00:54:34,103 --> 00:54:36,019
If nobody knows the answer, you should have it
如果没人知道答案，那你应该有答案

1278
00:54:36,019 --> 00:54:37,619
on your cheat sheet.
在您的备忘单上。 

1279
00:54:37,619 --> 00:54:43,000
So tree edges, the ones that show up in the DFS tree.
树边缘就是DFS树中显示的边缘。 

1280
00:54:43,000 --> 00:54:44,572
Backwards edges,
向后边缘

1281
00:54:44,572 --> 00:54:46,300
AUDIENCE: Cross edges.
听众：交叉边缘。 

1282
00:54:46,300 --> 00:54:47,585
PROFESSOR: Cross edges.
教授：交叉边缘。 

1283
00:54:47,784 --> 00:54:50,329
AUDIENCE: Forward edges.
听众：前缘。 

1284
00:54:50,329 --> 00:54:53,299
PROFESSOR: And forward edges.
教授：还有前缘。 

1285
00:54:53,300 --> 00:54:56,789
If your graph is undirected, what types of edges
如果图形是无向的，则什么类型的边

1286
00:54:56,789 --> 00:54:59,690
do you not have?
你没有吗？ 

1287
00:54:59,690 --> 00:55:01,625
AUDIENCE: Forward edges.
听众：前缘。 

1288
00:55:01,824 --> 00:55:04,739
Forward edges and backward edges.
前边缘和后边缘。 

1289
00:55:04,739 --> 00:55:06,373
Or no, forward edges.
或否，前缘。 

1290
00:55:06,373 --> 00:55:10,711



1291
00:55:10,711 --> 00:55:12,170
PROFESSOR: OK.
教授：好的。 

1292
00:55:12,170 --> 00:55:14,909
So this is a lecture notes, and we're
这是一个讲义，我们

1293
00:55:14,909 --> 00:55:17,679
going to go over them tonight.
今晚要越过他们。 

1294
00:55:17,679 --> 00:55:20,198
But if you can't make it, they're in lecture notes.
但是，如果您做不到，他们会在讲义中提供帮助。 

1295
00:55:20,199 --> 00:55:21,789
So you should have this on your cheat sheet
所以你应该在备忘单上有这个

1296
00:55:21,989 --> 00:55:24,039
if you don't know them.
如果你不认识他们。 

1297
00:55:24,039 --> 00:55:24,539
Right?
对？ 

1298
00:55:24,539 --> 00:55:26,748
Nobody answered today, so if you guys don't have them
今天没人回答，所以如果你们没有他们

1299
00:55:26,748 --> 00:55:29,500
on your cheat sheet I will be upset.
在您的备忘单上，我会很沮丧。 

1300
00:55:29,699 --> 00:55:32,125
OK.
好。 

1301
00:55:32,125 --> 00:55:34,550
Cool.
凉。 

1302
00:55:34,550 --> 00:55:36,391
More questions?
还有其他问题吗？ 

1303
00:55:36,590 --> 00:55:38,590
AUDIENCE: Edges do not exist in BFS, edge types?
听众：边缘在BFS中不存在，边缘类型？ 

1304
00:55:38,590 --> 00:55:41,549



1305
00:55:41,550 --> 00:55:43,960
PROFESSOR: DFS uses-- so out of BFS we get levels,
教授：DFS使用了-因此从BFS中我们可以获得等级， 

1306
00:55:44,159 --> 00:55:48,389
and out DFS we get those edge types.
在DFS中我们得到那些边缘类型。 

1307
00:55:48,389 --> 00:55:54,359
AUDIENCE: Is there-- about the edge types?
听众：关于边缘类型吗？ 

1308
00:55:54,360 --> 00:55:57,400
PROFESSOR: Some algorithms use them in their proofs.
教授：一些算法在证明中使用它们。 

1309
00:55:57,400 --> 00:55:59,610
So the proof for topological sort
所以拓扑排序的证明

1310
00:55:59,610 --> 00:56:02,030
uses the fact that in directed acyclic graphs,
使用以下事实：在有向无环图中

1311
00:56:02,030 --> 00:56:04,360
you won't have some types of edges.
您将没有某些类型的边缘。 

1312
00:56:04,360 --> 00:56:05,920
For the other types of edges it argues
对于其他类型的边缘，它认为

1313
00:56:06,119 --> 00:56:08,349
that the order that you get from topological sort
您从拓扑排序中获得的顺序

1314
00:56:08,349 --> 00:56:09,809
is the right order.
是正确的顺序。 

1315
00:56:09,809 --> 00:56:12,320
So it's mostly theoretical but since we taught you
这主要是理论上的，但自从我们教了你

1316
00:56:12,320 --> 00:56:15,295
about edge types, we might ask you about them.
关于边缘类型，我们可能会问您有关它们的信息。 

1317
00:56:15,295 --> 00:56:15,793
Yes.
是。 

1318
00:56:15,793 --> 00:56:18,279
AUDIENCE: So does DFS actually-- is
听众：DFS实际上也是如此

1319
00:56:18,280 --> 00:56:21,050
it able to distinguish between back-crossing over,
它能够区分回交， 

1320
00:56:21,050 --> 00:56:24,590
or is it only-- does it only see that the node has already
还是仅-仅看到该节点已经

1321
00:56:24,590 --> 00:56:26,730
been visited by something?
被某人拜访了吗？ 

1322
00:56:26,929 --> 00:56:32,558
PROFESSOR: So how would you make it distinguish between them?
教授：那么您如何区分它们呢？ 

1323
00:56:32,559 --> 00:56:33,150
You have to, right?
你必须吧？ 

1324
00:56:33,349 --> 00:56:35,190
Because otherwise, why are we studying them?
因为否则，我们为什么要研究它们？ 

1325
00:56:35,190 --> 00:56:37,780
There has to be a way to distinguish between them.
必须有一种区分它们的方法。 

1326
00:56:37,780 --> 00:56:40,403
AUDIENCE: Because the DFS does recursive calls
听众：因为DFS会进行递归调用

1327
00:56:40,603 --> 00:56:43,299
and you know where the back is.
你知道后面在哪里

1328
00:56:43,300 --> 00:56:45,690
PROFESSOR: So let's do a DFS tree quickly.
教授：因此，让我们快速创建DFS树。 

1329
00:56:45,690 --> 00:56:51,369



1330
00:56:51,369 --> 00:56:53,630
So suppose we went like this.
因此，假设我们像这样去了。 

1331
00:56:53,630 --> 00:57:01,940
And then like this, this, and then this.
然后像这样，这个，然后这个。 

1332
00:57:02,139 --> 00:57:06,109
Sorry, I'm trying really hard to make up an example on the spot
抱歉，我正在尽力当场做一个例子

1333
00:57:06,110 --> 00:57:08,827
such that I won't discount myself.
这样我就不会打折。 

1334
00:57:09,027 --> 00:57:17,399



1335
00:57:17,400 --> 00:57:18,922
How do I get that, do you know?
我怎么知道的？ 

1336
00:57:19,121 --> 00:57:22,007
AUDIENCE: Maybe an edge from the second one
听众：也许比第二个优势

1337
00:57:22,007 --> 00:57:25,869
to the last one on the right.
到右边的最后一个。 

1338
00:57:25,869 --> 00:57:26,670
PROFESSOR: Here?
教授：这吗？ 

1339
00:57:26,670 --> 00:57:29,818
AUDIENCE: Yeah and this will be the arrowhead,
听众：是的，这将是箭头， 

1340
00:57:29,818 --> 00:57:33,467
and you can start from the second one.
您可以从第二个开始。 

1341
00:57:33,467 --> 00:57:34,300
PROFESSOR: This one?
教授：这个吗？ 

1342
00:57:34,300 --> 00:57:35,534
AUDIENCE: Yeah.
听众：是的。 

1343
00:57:35,733 --> 00:57:38,818
Wouldn't that be a forward edge?
那不是前锋吗？ 

1344
00:57:38,818 --> 00:57:39,360
PROFESSOR: OK
教授：好的

1345
00:57:39,360 --> 00:57:39,829
AUDIENCE: Because it's downward--
听众：因为它是向下的

1346
00:57:39,829 --> 00:57:41,289
PROFESSOR: Yeah, I like that.
教授：是的，我喜欢。 

1347
00:57:41,289 --> 00:57:45,009
OK, I like that.
好，我喜欢

1348
00:57:45,010 --> 00:57:51,570
OK so S, A, B, C, D, E. So assume
好的，所以S，A，B，C，D，E。 

1349
00:57:51,769 --> 00:57:54,929
this is the order that they listed in adjacency list.
这是它们在邻接表中列出的顺序。 

1350
00:57:54,929 --> 00:57:56,940
So let's label all of the edges.
因此，让我们标记所有边缘。 

1351
00:57:56,940 --> 00:57:59,235
SA and SB are what?
 SA和SB是什么？ 

1352
00:57:59,235 --> 00:58:02,230
AUDIENCE: Forward edges.
听众：前缘。 

1353
00:58:02,230 --> 00:58:06,059
PROFESSOR: OK AC?
教授：好吗？ 

1354
00:58:06,059 --> 00:58:08,059
AUDIENCE: Forward.
听众：转发。 

1355
00:58:08,059 --> 00:58:09,059
PROFESSOR: CD?
教授：CD？ 

1356
00:58:09,059 --> 00:58:10,840
AUDIENCE: Forward.
听众：转发。 

1357
00:58:10,840 --> 00:58:12,146
PROFESSOR: CE?
教授：CE？ 

1358
00:58:12,146 --> 00:58:13,400
AUDIENCE: Forward.
听众：转发。 

1359
00:58:13,400 --> 00:58:14,125
PROFESSOR: OK, AE?
教授：好的，AE？ 

1360
00:58:14,324 --> 00:58:17,034



1361
00:58:17,034 --> 00:58:18,483
AUDIENCE: Aren't those tree edges?
听众：那些树的边缘不是吗？ 

1362
00:58:18,483 --> 00:58:21,211
AUDIENCE: That's a forward edge.
听众：这是一个前沿。 

1363
00:58:21,211 --> 00:58:22,670
PROFESSOR: That took a while, guys.
教授：你们花了一段时间。 

1364
00:58:22,670 --> 00:58:24,601
That took a while.
那花了一段时间。 

1365
00:58:24,601 --> 00:58:26,050
AUDIENCE: It goes forward.
听众：向前发展。 

1366
00:58:26,050 --> 00:58:28,223
AUDIENCE: Well no, forward means like you're
听众：好吧，向前意味着你

1367
00:58:28,224 --> 00:58:29,951
skipping a generation.
跳过一代。 

1368
00:58:29,951 --> 00:58:31,324
PROFESSOR: OK so the three edges.
教授：好的，三个方面。 

1369
00:58:31,324 --> 00:58:34,475



1370
00:58:34,476 --> 00:58:35,760
AUDIENCE: [INAUDIBLE]
观众：[听不清] 

1371
00:58:35,760 --> 00:58:37,510
PROFESSOR: So the three edges are the ones
教授：所以三个边就是那个

1372
00:58:37,510 --> 00:58:39,320
that DFS uses to go forward.
 DFS用于前进。 

1373
00:58:39,320 --> 00:58:41,190
So they're the ones that map the DFS calls.
因此，它们就是映射DFS调用的对象。 

1374
00:58:41,190 --> 00:58:44,099



1375
00:58:44,099 --> 00:58:45,940
So how do we express that?
那么我们该如何表达呢？ 

1376
00:58:45,940 --> 00:58:52,264
So suppose you're at some node u, and you have an edge, uv.
因此，假设您在u的某个节点上，并且有一条边uv。 

1377
00:58:52,264 --> 00:58:54,434
AUDIENCE: The parent of v is u.
听众：v的父母是u。 

1378
00:58:54,434 --> 00:58:55,900
PROFESSOR: So you're at here, right now.
教授：所以你现在在这里。 

1379
00:58:56,099 --> 00:58:59,639



1380
00:58:59,639 --> 00:59:04,569
OK, so v.parent has to be u.
好的，所以v.parent必须是u。 

1381
00:59:04,570 --> 00:59:05,940
And?
和？ 

1382
00:59:05,940 --> 00:59:08,079
v is?
 v是？ 

1383
00:59:08,079 --> 00:59:09,701
Is it visited or not?
是否参观过？ 

1384
00:59:09,702 --> 00:59:11,130
AUDIENCE: It's a new vertex.
听众：这是一个新的顶点。 

1385
00:59:11,130 --> 00:59:13,789
AUDIENCE: It's not.
听众：不是。 

1386
00:59:13,989 --> 00:59:15,449
PROFESSOR: So v is not visited yet.
教授：所以v还没有被访问。 

1387
00:59:15,449 --> 00:59:21,159



1388
00:59:21,159 --> 00:59:23,489
So this is a tree edge.
所以这是树的边缘。 

1389
00:59:23,489 --> 00:59:25,836
Now let's compare this to a forward edge.
现在，我们将其与前缘进行比较。 

1390
00:59:25,836 --> 00:59:32,179



1391
00:59:32,179 --> 00:59:34,058
So what happens to a forward edge?
那么前锋会发生什么呢？ 

1392
00:59:34,059 --> 00:59:36,932
AUDIENCE: Parents of children--
观众：孩子的父母- 

1393
00:59:36,932 --> 00:59:39,344
AUDIENCE: Parent ancestors--
听众：父母的祖先- 

1394
00:59:39,344 --> 00:59:40,969
PROFESSOR: So you're at here right now.
教授：所以您现在在这里。 

1395
00:59:40,969 --> 00:59:44,689



1396
00:59:44,690 --> 00:59:47,260
And you're looking at the edge uv.
而您正在寻找边缘uv。 

1397
00:59:47,260 --> 00:59:49,039
Right? so we're looking at the edge uv.
对？所以我们在看紫外线。 

1398
00:59:49,239 --> 00:59:51,469
uv would point downward in the tree.
紫外线会向下指向树。 

1399
00:59:51,469 --> 00:59:53,800
What's true about--
到底是什么

1400
00:59:53,800 --> 00:59:56,556
AUDIENCE: v.parent is u.
听众：v.parent是你。 

1401
00:59:56,556 --> 00:59:57,139
AUDIENCE: No--
听众：不- 

1402
00:59:57,139 --> 00:59:58,222
AUDIENCE: Not necessarily.
听众：不一定。 

1403
00:59:58,222 --> 01:00:00,599
PROFESSOR: OK.
教授：好的。 

1404
01:00:00,599 --> 01:00:04,559
So v.parent is u.
所以v.parent是你。 

1405
01:00:04,559 --> 01:00:07,219
So it can be the parent, or the grandparent,
因此可以是父母，也可以是祖父母， 

1406
01:00:07,219 --> 01:00:10,349
or-- so u has to be somewhere up the tree.
或-因此您必须在树上某处。 

1407
01:00:10,349 --> 01:00:11,019
Right?
对？ 

1408
01:00:11,019 --> 01:00:14,653
So I can have a ton of dot parents here.
这样我就可以在这里拥有很多父母。 

1409
01:00:14,653 --> 01:00:17,070
AUDIENCE: There has to be more than one dot parent, right?
听众：必须有不止一个双亲，对吗？ 

1410
01:00:17,070 --> 01:00:19,077
Because otherwise we get tree edge.
因为否则我们会得到树边缘。 

1411
01:00:19,277 --> 01:00:21,759
It can't just be one parent.
它不能只是一个父母。 

1412
01:00:21,760 --> 01:00:22,443
PROFESSOR: OK.
教授：好的。 

1413
01:00:22,643 --> 01:00:25,096
AUDIENCE: So you'd have to recurse up more than once.
听众：所以您必须递归多次。 

1414
01:00:25,097 --> 01:00:25,722
PROFESSOR: Yep.
教授：是的。 

1415
01:00:25,722 --> 01:00:29,360
So for a node you go up until you find u, and if you found u,
因此，对于一个节点，您一直向上走直到找到u，如果找到u， 

1416
01:00:29,559 --> 01:00:33,769
then it's a forward edge, otherwise,
那是前锋，否则， 

1417
01:00:33,769 --> 01:00:35,967
if you find the root of the tree then you give up.
如果您找到树的根，则您放弃。 

1418
01:00:35,967 --> 01:00:37,550
AUDIENCE: Well then it's a cross edge.
听众：好吧，这是一个交叉优势。 

1419
01:00:37,550 --> 01:00:40,826



1420
01:00:40,826 --> 01:00:44,230
If you go up and you get to the root but-- oh--
如果你走上去就扎根了-哦- 

1421
01:00:44,230 --> 01:00:46,626
PROFESSOR: Yeah, so if you got to the root,
教授：是的，所以如果您扎根， 

1422
01:00:46,626 --> 01:00:47,750
it is not the forward edge.
它不是前沿。 

1423
01:00:47,750 --> 01:00:49,880
Right now we're looking at what does it mean.
目前，我们正在研究它的含义。 

1424
01:00:49,880 --> 01:00:52,744
So you have to be somewhere around the ancestor chain of u,
所以你必须在你的祖先链的某个地方， 

1425
01:00:52,744 --> 01:00:56,069
so if you keep following v's parents, you have to see u.
因此，如果您继续关注v的父母，则必须去见u。 

1426
01:00:56,070 --> 01:00:59,170
If not, it's not the forward edge.
如果不是，那不是前沿。 

1427
01:00:59,170 --> 01:01:00,010
OK.
好。 

1428
01:01:00,010 --> 01:01:02,070
And when you see it, did you visit it
当您看到它时，您是否参观了它

1429
01:01:02,070 --> 01:01:03,606
or did you not visit it?
还是您没有参观过？ 

1430
01:01:03,806 --> 01:01:04,889
AUDIENCE: Already visited.
听众：已经访问过。 

1431
01:01:04,889 --> 01:01:10,650



1432
01:01:10,650 --> 01:01:11,539
PROFESSOR: OK.
教授：好的。 

1433
01:01:11,739 --> 01:01:15,679
So now we have two more edge types, we have back edges,
所以现在我们有两种边缘类型，有后边缘， 

1434
01:01:15,679 --> 01:01:17,039
and we have cross edges.
我们有交叉的边缘。 

1435
01:01:17,039 --> 01:01:18,739
Right?
对？ 

1436
01:01:18,739 --> 01:01:21,607
Show me a back edge here.
在这里给我看看后缘。 

1437
01:01:21,608 --> 01:01:22,940
AUDIENCE: DA.
听众：DA。 

1438
01:01:22,940 --> 01:01:24,519
PROFESSOR: DA is a back edge.
教授：DA是后缘。 

1439
01:01:24,719 --> 01:01:26,569
OK back edges are also reasonably easy.
确定的后边缘也相当容易。 

1440
01:01:26,570 --> 01:01:27,320
So let's do those.
所以，让我们来做。 

1441
01:01:27,320 --> 01:01:30,610



1442
01:01:30,610 --> 01:01:31,630
What's a back edge.
什么是后边缘。 

1443
01:01:31,630 --> 01:01:34,525
So I am at u now.
所以我现在在你身边。 

1444
01:01:34,525 --> 01:01:37,500
I'm looking at the edge uv.
我在看紫外线。 

1445
01:01:37,699 --> 01:01:39,027
AUDIENCE: It's a cycle.
听众：这是一个循环。 

1446
01:01:39,027 --> 01:01:40,709
AUDIENCE: Node to ancestor.
听众：祖先的节点。 

1447
01:01:40,710 --> 01:01:41,418
PROFESSOR: Sorry?
教授：对不起？ 

1448
01:01:41,418 --> 01:01:43,329
AUDIENCE: It's a node to an ancestor.
听众：这是祖先的节点。 

1449
01:01:43,329 --> 01:01:46,295
PROFESSOR: OK so who is who's ancestor?
教授：好的，谁是谁的祖先？ 

1450
01:01:46,295 --> 01:01:47,744
AUDIENCE: A is D's ancestor.
听众：A是D的祖先。 

1451
01:01:47,744 --> 01:01:48,710
AUDIENCE: V is u's ancestor.
听众：V是你的祖先。 

1452
01:01:48,909 --> 01:01:51,679
PROFESSOR: OK.
教授：好的。 

1453
01:01:51,679 --> 01:02:00,000
So if I keep going, u.parent many times over,
所以，如果我继续前进，你父母很多次， 

1454
01:02:00,000 --> 01:02:05,539
I should eventually see v. Uhh-- yeah.
我最终应该看到诉Uhh-是的。 

1455
01:02:05,539 --> 01:02:09,119
So the difference between this and this
所以这个和这个之间的区别

1456
01:02:09,119 --> 01:02:11,324
is who is who's parent?
谁是谁的父母？ 

1457
01:02:11,324 --> 01:02:16,193
AUDIENCE: Wait, wouldn't u be a parent of v?
听众：等等，你不是v的父母吗？ 

1458
01:02:16,193 --> 01:02:20,000
Because we didn't go from A to C to D and then at D
因为我们没有从A到C再到D再到D 

1459
01:02:20,000 --> 01:02:23,302
I realize that I can go to A, but I
我意识到我可以去A，但是我

1460
01:02:23,302 --> 01:02:27,090
won't go because it's already visited?
不会因为已经访问过而去吗？ 

1461
01:02:27,090 --> 01:02:28,769
PROFESSOR: Wait.
教授：等等。 

1462
01:02:28,969 --> 01:02:30,379
AUDIENCE: But assuming that--
听众：但是假设- 

1463
01:02:30,380 --> 01:02:31,789
AUDIENCE: A is an ancestor of D.
听众：A是D的祖先。 

1464
01:02:31,789 --> 01:02:33,289
PROFESSOR: So A is an ancestor of D
教授：所以A是D的祖先

1465
01:02:33,289 --> 01:02:35,349
because by the time I got to D, I've
因为当我到达D的时候，我已经

1466
01:02:35,349 --> 01:02:42,418
already set the parent pointers for C and D.
已经为C和D设置了父指针。 

1467
01:02:42,418 --> 01:02:43,384
AUDIENCE: Yes.
听众：是的。 

1468
01:02:43,385 --> 01:02:45,317
But-- wait.
可是等等。 

1469
01:02:45,317 --> 01:02:50,114
u.parent is v. Then u is A here and v is D here--
 u.parent是v。那么u在这里是A，v在这里是D-- 

1470
01:02:50,114 --> 01:02:51,250
AUDIENCE: No u is D here.
听众：不，你在这里。 

1471
01:02:51,250 --> 01:02:53,539
PROFESSOR: I'm at u right now, so I'm at D.
教授：我现在在你，所以我在D。 

1472
01:02:53,539 --> 01:02:57,539
And I'm looking at the edge uv.
我在看紫外线。 

1473
01:02:57,539 --> 01:02:59,340
AUDIENCE: Do we have a cross edge in here?
观众：我们这里有交叉边缘吗？ 

1474
01:02:59,340 --> 01:03:01,019
PROFESSOR: Do we have a cross edge in here.
教授：我们这里有交叉口吗？ 

1475
01:03:01,219 --> 01:03:01,949
Good question.
好问题。 

1476
01:03:01,949 --> 01:03:03,837
What is the cross edge?
什么是交叉边缘？ 

1477
01:03:03,838 --> 01:03:06,480
AUDIENCE: C?
听众：C？ 

1478
01:03:06,679 --> 01:03:08,429
PROFESSOR: OK so this guy is a cross edge.
教授：好的，所以这个家伙很挑剔。 

1479
01:03:08,429 --> 01:03:10,346
So what is the difference between a cross edge
那么十字边缘有什么区别

1480
01:03:10,346 --> 01:03:12,789
and a forward edge?
和前缘？ 

1481
01:03:12,789 --> 01:03:16,014
[CLASS MURMURS]
 [班级杂项] 

1482
01:03:16,014 --> 01:03:18,440
AUDIENCE: It's not an ancestor.
听众：它不是祖先。 

1483
01:03:18,440 --> 01:03:22,150
AUDIENCE: Ancester goes up to S.
听众：Ancester升至S。 

1484
01:03:22,150 --> 01:03:26,750
PROFESSOR: So a cross edge is very close to a forward edge
教授：所以交叉边缘非常靠近前边缘

1485
01:03:26,750 --> 01:03:38,670
except u is not an ancestor of v. v in the DFS tree.
除了u不是DFS树中v的祖先。 

1486
01:03:38,670 --> 01:03:42,750



1487
01:03:42,750 --> 01:03:44,434
OK?
好？ 

1488
01:03:44,434 --> 01:03:47,186
AUDIENCE: [INAUDIBLE]
观众：[听不清] 

1489
01:03:47,385 --> 01:03:49,846
PROFESSOR: Yep.
教授：是的。 

1490
01:03:49,846 --> 01:03:50,840
Yep.
是的

1491
01:03:50,840 --> 01:03:55,998
So the only common ancestor between B and C is the source.
因此，B和C之间唯一的共同祖先就是来源。 

1492
01:03:55,998 --> 01:04:04,519



1493
01:04:04,719 --> 01:04:07,849
OK so please get these conditions in the notes.
好的，所以请在注释中获得这些条件。 

1494
01:04:07,849 --> 01:04:11,144
So as a summary, if it's an edge that DFS uses,
因此，作为总结，如果这是DFS使用的优势， 

1495
01:04:11,144 --> 01:04:12,969
it's a tree edge.
这是树的边缘。 

1496
01:04:12,969 --> 01:04:16,959
If it's going against the way of the DFS, it's a back edge.
如果这与DFS的方式背道而驰，那将是一个后沿。 

1497
01:04:16,960 --> 01:04:20,809
If it fast forwards in DFS, so instead
如果它在DFS中快速转发，则改为

1498
01:04:20,809 --> 01:04:24,320
of going one level down, it does multiple levels down,
下降一个级别，它会下降多个级别， 

1499
01:04:24,320 --> 01:04:25,980
then it's a forward edge.
那是前锋。 

1500
01:04:25,980 --> 01:04:30,519
And otherwise, it's weird edge so it's a cross edge.
否则，它是奇怪的边缘，所以它是交叉边缘。 

1501
01:04:30,519 --> 01:04:31,523
One way to look at it.
一种查看方式。 

1502
01:04:31,523 --> 01:04:32,023
Yeah.
是的

1503
01:04:32,023 --> 01:04:33,606
AUDIENCE: Is this only true because we
观众：这是真的吗，因为我们

1504
01:04:33,606 --> 01:04:35,880
were going alphabetically?
按字母顺序走？ 

1505
01:04:35,880 --> 01:04:37,780
PROFESSOR: Yeah, this depends on the order
教授：是的，这取决于订单

1506
01:04:37,780 --> 01:04:40,230
in which the nodes are listed in the adjacency list.
其中节点在邻接表中列出。 

1507
01:04:40,429 --> 01:04:43,309
AUDIENCE: So it could've been pretty different
听众：事情可能大不一样了

1508
01:04:43,309 --> 01:04:46,190
if we went from A to E?
如果我们从A转到E？ 

1509
01:04:46,190 --> 01:04:47,800
PROFESSOR: Oh Yeah, yeah.
教授：是的，是的。 

1510
01:04:47,800 --> 01:04:48,724
Yep.
是的

1511
01:04:48,724 --> 01:04:50,481
AUDIENCE: I'm trying to solve this another way.
听众：我正在尝试另一种解决方法。 

1512
01:04:50,681 --> 01:04:54,179
The graph information--
图形信息- 

1513
01:04:54,179 --> 01:04:54,972
PROFESSOR: Yeah
教授：是的

1514
01:04:54,972 --> 01:04:57,750
AUDIENCE: --would you say that's moderate or an easy example?
听众：-您是说中度还是简单的例子？ 

1515
01:04:57,751 --> 01:05:00,530
The transformation.
转型。 

1516
01:05:00,530 --> 01:05:03,090
PROFESSOR: This is on the easy side.
教授：这很简单。 

1517
01:05:03,289 --> 01:05:05,949
So look at the problems that we had so far.
因此，请看我们到目前为止遇到的问题。 

1518
01:05:05,949 --> 01:05:08,159
There are more problems in this review packet.
此审核数据包中还有更多问题。 

1519
01:05:08,159 --> 01:05:11,639
There are like six, seven, eight problems.
大概有六个，七个，八个问题。 

1520
01:05:11,639 --> 01:05:14,309
It's going to be online.
它将在线上。 

1521
01:05:14,309 --> 01:05:16,059
It's the notes for this recitation.
这是本次朗读的笔记。 

1522
01:05:16,059 --> 01:05:17,099
Sorry, bad name.
对不起，名字不好。 

1523
01:05:17,099 --> 01:05:19,549
So the notes for this recitation.
因此，本次朗读的注意事项。 

1524
01:05:19,550 --> 01:05:21,190
This is on the easy side.
这是容易的一面。 

1525
01:05:21,190 --> 01:05:24,010
The StarCraft problem, last time is on the insanely difficult
 《星际争霸》问题，上一次异常困难

1526
01:05:24,010 --> 01:05:25,610
side, so that's not going to happen.
方面，所以这不会发生。 

1527
01:05:25,809 --> 01:05:27,909
AUDIENCE: I so don't even get that.
听众：我什至不明白这一点。 

1528
01:05:27,909 --> 01:05:32,909
PROFESSOR: That's on the hard side.
教授：那是很难的一面。 

