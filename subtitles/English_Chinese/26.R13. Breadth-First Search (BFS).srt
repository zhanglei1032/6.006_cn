1
00:00:00,000 --> 00:00:00,090



2
00:00:00,090 --> 00:00:01,800
The following content is provided
提供以下内容

3
00:00:01,800 --> 00:00:04,040
under a Creative Commons license.
根据知识共享许可。 

4
00:00:04,040 --> 00:00:06,879
Your support will help MIT OpenCourseWare continue
您的支持将帮助MIT OpenCourseWare继续

5
00:00:06,879 --> 00:00:10,740
to offer high quality educational resources for free.
免费提供高质量的教育资源。 

6
00:00:10,740 --> 00:00:13,359
To make a donation or view additional materials
捐款或查看其他材料

7
00:00:13,359 --> 00:00:17,259
from hundreds of MIT courses, visit MIT OpenCourseWare
从数百门麻省理工学院的课程中，访问MIT OpenCourseWare 

8
00:00:17,260 --> 00:00:17,885
at ocw.mit.edu.
在ocw.mit.edu。 

9
00:00:17,885 --> 00:00:21,759



10
00:00:21,958 --> 00:00:23,750
PROFESSOR: I want to talk about two things,
教授：我想谈两件事， 

11
00:00:23,750 --> 00:00:26,138
maybe, depending on the level of interest.
也许，取决于兴趣程度。 

12
00:00:26,138 --> 00:00:28,429
We can talk a little bit about PSET five and the things
我们可以谈谈PSET 5及其它

13
00:00:28,429 --> 00:00:32,829
that I think are weird in the coding part of PSET five.
我认为在PSET 5的编码部分中很奇怪。 

14
00:00:32,829 --> 00:00:35,801
By the way, how many people started PSET five?
顺便问一下，有多少人开始了PSET 5？ 

15
00:00:35,801 --> 00:00:37,366
[LAUGHTER]
 [笑声] 

16
00:00:37,366 --> 00:00:38,449
AUDIENCE: I downloaded it.
听众：我下载了它。 

17
00:00:38,450 --> 00:00:41,380
PROFESSOR: Hmm, maybe we are not going to talk about P set five.
教授：嗯，也许我们不打算讨论P集5。 

18
00:00:41,380 --> 00:00:43,576
You guys need to start early!
你们需要早点开始！ 

19
00:00:43,576 --> 00:00:44,829
AUDIENCE: I did.
听众：我做到了。 

20
00:00:44,829 --> 00:00:45,619
PROFESSOR: You did.
教授：是的。 

21
00:00:45,619 --> 00:00:46,460
Yeah.
是的

22
00:00:46,460 --> 00:00:49,020
I guess I can't punish you for everyone else.
我想我不能为别人惩罚你。 

23
00:00:49,020 --> 00:00:52,109
So P set five, and I can talk about graphs.
因此，P设置了五个，我可以谈谈图。 

24
00:00:52,109 --> 00:00:54,560
I can talk about whatever didn't make sense in class
我可以说什么在课堂上没有意义的事情

25
00:00:54,560 --> 00:00:59,029
and I can talk about background stuff for graphs.
我可以谈谈图形的背景知识。 

26
00:00:59,229 --> 00:01:00,399
So how do people feel?
那么人们感觉如何？ 

27
00:01:00,399 --> 00:01:04,519
Who wants talk about the PSET that we haven't read?
谁想谈论我们尚未阅读的PSET？ 

28
00:01:04,519 --> 00:01:06,869
[LAUGHTER]
 [笑声] 

29
00:01:06,870 --> 00:01:09,852
Who wants to talk about graphs?
谁想谈论图？ 

30
00:01:09,852 --> 00:01:12,816
AUDIENCE: It's really easy.
听众：真的很容易。 

31
00:01:12,816 --> 00:01:14,299
We took 604 two.
我们拿了604两。 

32
00:01:14,299 --> 00:01:19,429
PROFESSOR: Yeah, if you took 604 two, nothing here is new.
教授：是的，如果您拿了604两，那么这里没有什么新鲜的。 

33
00:01:19,430 --> 00:01:21,519
I mean nothing in the recitation is new.
我的意思是朗诵中没有什么是新的。 

34
00:01:21,719 --> 00:01:25,819
We're going to take it to new heights of graph knowledge,
我们将把它带到图形知识的新高度， 

35
00:01:25,819 --> 00:01:28,459
and you'll be able to do many more cool things
而且您将能够做更多更酷的事情

36
00:01:28,459 --> 00:01:30,689
that you're able to do before.
您以前能够做到的。 

37
00:01:30,689 --> 00:01:31,230
OK, so PSET.
好的，所以是PSET。 

38
00:01:31,230 --> 00:01:33,930



39
00:01:33,930 --> 00:01:37,870
For people who started early, what
对于早起的人

40
00:01:37,870 --> 00:01:41,390
was the gist of the coding assignments?
是编码任务的要点？ 

41
00:01:41,390 --> 00:01:44,409
AUDIENCE: So we have to speed up something.
听众：所以我们必须加快速度。 

42
00:01:44,409 --> 00:01:50,558
When I ran the tests-- do I say what I got as results?
当我运行测试时-我说我得到的结果是什么？ 

43
00:01:50,558 --> 00:01:53,099
PROFESSOR: The time isn't on the PSET so you can say what you
教授：时间不在PSET上，所以您可以说出您的意思

44
00:01:53,099 --> 00:01:53,625
got as --
作为- 

45
00:01:53,626 --> 00:01:53,771
AUDIENCE: Pardon?
听众：对不起？ 

46
00:01:53,971 --> 00:01:55,512
PROFESSOR: The time isn't on the PSET
教授：时间不在PSET上

47
00:01:55,513 --> 00:01:57,039
so you can say what you got as a time.
这样您就可以说出您的时间了。 

48
00:01:57,239 --> 00:02:01,806
AUDIENCE: OK, the slowest was like add for me.
听众：好的，最慢的就像给我加价。 

49
00:02:01,807 --> 00:02:04,140
PROFESSOR: You should look to see add is a valid answer.
教授：您应该看一下add是一个有效的答案。 

50
00:02:04,140 --> 00:02:06,378
Look at the questions and see if add is a valid answer.
查看问题，看看添加是否是有效答案。 

51
00:02:06,578 --> 00:02:07,119
AUDIENCE: OK.
听众：好的。 

52
00:02:07,120 --> 00:02:10,430



53
00:02:10,430 --> 00:02:12,719
PROFESSOR: It's not like what was lowest function, right?
教授：这不是最低功能，对吗？ 

54
00:02:12,919 --> 00:02:14,799
There's more text there.
那里还有更多文字。 

55
00:02:14,800 --> 00:02:16,330
You should read the rest of the text
您应该阅读其余的文字

56
00:02:16,330 --> 00:02:18,365
and see if add makes sense as a valid answer.
并查看添加是否有效。 

57
00:02:18,564 --> 00:02:19,189
AUDIENCE: Sure.
听众：好的。 

58
00:02:19,189 --> 00:02:21,296
OK.
好。 

59
00:02:21,296 --> 00:02:23,129
PROFESSOR: What you're doing-- big picture--
教授：您在做什么-大图景- 

60
00:02:23,129 --> 00:02:27,169
is you have some processor, that's not a real processor,
你有处理器吗，那不是真正的处理器， 

61
00:02:27,169 --> 00:02:31,829
and it can do arithmetic with bytes and 16-bit words.
它可以使用字节和16位字进行算术运算。 

62
00:02:31,830 --> 00:02:33,930
And we give you the basic operations
我们为您提供基本操作

63
00:02:34,129 --> 00:02:36,889
and then they give you a library for large number arithmetic
然后他们给你一个用于大量算术的库

64
00:02:36,889 --> 00:02:38,279
because, guess what?
因为，你猜怎么着？ 

65
00:02:38,280 --> 00:02:41,159
16 bytes addition, subtraction?
 16字节加，减？ 

66
00:02:41,159 --> 00:02:46,090
Not going to cut it for science applications
不会为科学应用削减它

67
00:02:46,090 --> 00:02:50,280
are for cryptography, what we want to play with.
用于密码学，我们想玩的东西。 

68
00:02:50,280 --> 00:02:54,276
What are the basic operations that that processor can do?
该处理器可以执行的基本操作是什么？ 

69
00:02:54,276 --> 00:02:55,650
Front of the PSET, so even if you
 PSET的前面，所以即使您

70
00:02:55,650 --> 00:02:56,840
didn't get to the coding assignment
没有去编码分配

71
00:02:56,840 --> 00:02:57,756
you can still tell me.
你仍然可以告诉我。 

72
00:02:57,756 --> 00:03:01,656
AUDIENCE: Divide, and zeros, I think.
听众：我认为除以零。 

73
00:03:01,656 --> 00:03:03,719
Zeros.
零

74
00:03:03,919 --> 00:03:07,979
PROFESSOR: Plus, minus, multiply, divide, and mod.
教授：加，减，乘，除和mod。 

75
00:03:07,979 --> 00:03:10,709
Let's start to these.
让我们开始这些。 

76
00:03:10,710 --> 00:03:12,689
So you have two primitives in that processor.
因此，该处理器中有两个原语。 

77
00:03:12,689 --> 00:03:20,099
You have have bytes, which are basically 8-bit digits.
您有字节，基本上是8位数字。 

78
00:03:20,099 --> 00:03:22,489
There's 200.
有200 

79
00:03:22,490 --> 00:03:27,439
The range is 0 to 256.
范围是0到256。 

80
00:03:27,639 --> 00:03:35,079
And the word is 16-bit, from 0 to the 16 minus 1.
字是16位，从0到16减1。 

81
00:03:35,080 --> 00:03:38,477
If you care to know this is 6, 5, 5, 3, 5.
如果您知道这是6、5、5、3、5。 

82
00:03:38,676 --> 00:03:41,659



83
00:03:41,659 --> 00:03:44,710
So, if you take two bytes and add them together what do
因此，如果您占用两个字节并将它们加在一起，该怎么办

84
00:03:44,710 --> 00:03:47,490
you get?
你得到？ 

85
00:03:47,490 --> 00:03:48,454
AUDIENCE: [INAUDIBLE].
听众：[听不清]。 

86
00:03:48,454 --> 00:03:53,274



87
00:03:53,274 --> 00:03:54,719
PROFESSOR: Not right.
教授：不对。 

88
00:03:54,719 --> 00:03:56,819
It's a trick question.
这是一个技巧问题。 

89
00:03:56,819 --> 00:03:57,549
You get word.
你听懂了。 

90
00:03:57,550 --> 00:04:00,250



91
00:04:00,449 --> 00:04:04,259
The processor cannot do simple math on bytes.
处理器无法对字节进行简单的数学运算。 

92
00:04:04,259 --> 00:04:08,750
It converts them up to words and all the math happens on words.
它将它们转换为单词，所有数学运算都在单词上进行。 

93
00:04:08,750 --> 00:04:15,650
Now if you guess two words, and add them up together
现在，如果您猜两个单词，并将它们加在一起

94
00:04:15,650 --> 00:04:17,716
what do you get?
你得到了什么？ 

95
00:04:17,916 --> 00:04:19,651
AUDIENCE: Two words?
听众：两个字？ 

96
00:04:19,651 --> 00:04:21,360
PROFESSOR: You do if we're not that nice.
教授：如果我们不那么好，您可以这样做。 

97
00:04:21,360 --> 00:04:24,870



98
00:04:24,870 --> 00:04:28,310
AUDIENCE: A world in carry bit?
听众：随身携带的世界吗？ 

99
00:04:28,310 --> 00:04:31,269
PROFESSOR: Sorry, you just get word.
教授：对不起，您只是一句话而已。 

100
00:04:31,269 --> 00:04:33,009
At least nobody said a byte.
至少没有人说一个字节。 

101
00:04:33,009 --> 00:04:36,579
I was like, please don't say byte, please don't say byte.
我当时想，请不要说字节，请不要说字节。 

102
00:04:36,579 --> 00:04:37,921
You said carry bit.
你说进位。 

103
00:04:37,922 --> 00:04:39,180
Why do we care about the carry bit?
为什么我们在乎进位？ 

104
00:04:39,379 --> 00:04:41,379
What is the problem if you do addition this way?
如果您以这种方式加法会出现什么问题？ 

105
00:04:41,379 --> 00:04:43,079
AUDIENCE: If you're going too high.
听众：如果你太高了。 

106
00:04:43,079 --> 00:04:47,974
If the highest bit is one on both of them.
如果两者最高。 

107
00:04:47,975 --> 00:04:49,845
Then it's like overflow, kind of.
然后就像溢出一样。 

108
00:04:49,845 --> 00:04:50,470
PROFESSOR: Yep.
教授：是的。 

109
00:04:50,470 --> 00:04:55,490
Suppose we're trying to add 2 to the 16 minus 1 plus 2
假设我们尝试将16加2减1加2 

110
00:04:55,689 --> 00:04:57,959
to the 16 minus 1.
到16减1。 

111
00:04:57,959 --> 00:05:00,000
By the way, does anyone remember hex notation?
顺便说一句，有人记得十六进制符号吗？ 

112
00:05:00,000 --> 00:05:02,180
Hexadecimal?
十六进制的？ 

113
00:05:02,180 --> 00:05:03,920
OK, people who started the PSET remember.
好的，启动PSET的人记得。 

114
00:05:03,920 --> 00:05:06,139
That's good.
那很好。 

115
00:05:06,339 --> 00:05:11,109
It will be easy to write things hex for the PSET.
为PSET编写十六进制的内容很容易。 

116
00:05:11,110 --> 00:05:17,346
If you try to add these numbers you're going to get 1, F, F, F,
如果您尝试将这些数字相加，则会得到1，F，F，F， 

117
00:05:17,346 --> 00:05:21,199
E. You can use the math here to see
 E.您可以在这里使用数学来查看

118
00:05:21,199 --> 00:05:23,539
that this is more than the words.
这不仅仅是言语。 

119
00:05:23,540 --> 00:05:27,209
So you would like to know that this thing overflows, right?
所以你想知道这东西溢出了吧？ 

120
00:05:27,408 --> 00:05:28,699
You like to know that there is.
您想知道那里。 

121
00:05:28,699 --> 00:05:30,229
Well we don't give you that.
好吧，我们不给你。 

122
00:05:30,230 --> 00:05:33,379



123
00:05:33,579 --> 00:05:35,859
All you get to this.
所有你得到的。 

124
00:05:35,860 --> 00:05:41,884
So addition happens, modulo 2 to the 16.
所以加法发生了，模2等于16。 

125
00:05:41,884 --> 00:05:44,509
If you want to be able to detect overflow what they have to do?
如果您希望能够检测到溢出，他们该怎么办？ 

126
00:05:44,509 --> 00:05:47,449



127
00:05:47,449 --> 00:05:51,170
AUDIENCE: Just tests those bits.
听众：只测试那些位。 

128
00:05:51,170 --> 00:05:53,790
PROFESSOR: That one way of doing it.
教授：这是一种方法。 

129
00:05:53,790 --> 00:05:57,569
It would take quite a few instructions, though.
但是，这将需要很多指令。 

130
00:05:57,769 --> 00:05:59,779
If you want to do overflow detection,
如果要进行溢出检测， 

131
00:05:59,779 --> 00:06:06,189
the easiest way I think of doing it this to use this form.
我想到的最简单的方法就是使用这种形式。 

132
00:06:06,189 --> 00:06:07,779
So suppose you have two bytes.
因此，假设您有两个字节。 

133
00:06:07,779 --> 00:06:10,519



134
00:06:10,519 --> 00:06:12,449
This is the maximum value in a byte, right?
这是一个字节的最大值，对吗？ 

135
00:06:12,449 --> 00:06:15,479
255, 2 to the 8 minus 1.
 255，2到8减1。 

136
00:06:15,480 --> 00:06:18,319
If you have 2 bytes and you add them all together
如果您有2个字节，然后将它们全部加在一起

137
00:06:18,519 --> 00:06:23,269
you're going to get 1, F, E. Right?
您将得到1，F，E。对吗？ 

138
00:06:23,269 --> 00:06:26,805
It's just like the case here, except you have a fewer F's.
就像这里的情况一样，只不过您的F较少。 

139
00:06:26,805 --> 00:06:32,889



140
00:06:32,889 --> 00:06:34,000
Where is the carry here?
提货在哪里？ 

141
00:06:34,000 --> 00:06:36,560



142
00:06:36,560 --> 00:06:38,259
AUDIENCE: Could be the 1, right?
听众：可以是1，对吗？ 

143
00:06:38,259 --> 00:06:40,170
PROFESSOR: Yep.
教授：是的。 

144
00:06:40,170 --> 00:06:45,379
This guy here is the carry and this guy's the low result.
这家伙是随身携带的，这家伙的成绩很低。 

145
00:06:45,379 --> 00:06:46,969
Does anyone know how these are called?
有人知道这些怎么称呼吗？ 

146
00:06:46,970 --> 00:06:49,415
If you have a word and you have two bytes, what
如果您有一个单词并且有两个字节，那

147
00:06:49,415 --> 00:06:51,915
is the first byte, what is the second bytes?
是第一个字节，第二个字节是什么？ 

148
00:06:51,915 --> 00:06:54,469
AUDIENCE: [INAUDIBLE].
听众：[听不清]。 

149
00:06:54,470 --> 00:06:57,110
PROFESSOR: Most significant byte,
教授：最高有效字节， 

150
00:06:57,310 --> 00:07:00,314
M, S, B, and least significant byte,
 M，S，B和最低有效字节， 

151
00:07:00,314 --> 00:07:03,860
L, S, B. If you want to figure out your carries,
 L，S，B。如果您想弄清楚自己的携带方式， 

152
00:07:03,860 --> 00:07:06,139
then you should do your math this way.
那么您应该以这种方式进行数学计算。 

153
00:07:06,139 --> 00:07:09,039
You're going to have byte 1 plus byte 2.
您将拥有字节1和字节2。 

154
00:07:09,040 --> 00:07:10,500
Add them together.
将它们加在一起。 

155
00:07:10,500 --> 00:07:13,824
And then you call L, S, B to get the byte result.
然后调用L，S，B来获取字节结果。 

156
00:07:13,824 --> 00:07:16,500



157
00:07:16,500 --> 00:07:21,660
And then you call M, S, B to get the carry.
然后您致电M，S，B进行进位。 

158
00:07:21,660 --> 00:07:26,120



159
00:07:26,120 --> 00:07:28,500
This is addition.
这是加法。 

160
00:07:28,500 --> 00:07:31,250
Everyone with me so far?
到目前为止和我在一起的每个人？ 

161
00:07:31,250 --> 00:07:36,115
By the way, are these numbers signed or unsigned?
顺便说一下，这些数字是带符号的还是无符号的？ 

162
00:07:36,115 --> 00:07:36,884
AUDIENCE: [INAUDIBLE].
听众：[听不清]。 

163
00:07:37,084 --> 00:07:40,817



164
00:07:40,817 --> 00:07:42,199
PROFESSOR: No negative numbers, right?
教授：没有负数，对吗？ 

165
00:07:42,399 --> 00:07:43,819
So no support for negative numbers.
因此不支持负数。 

166
00:07:43,819 --> 00:07:45,300
Everything is going to be positive.
一切将是积极的。 

167
00:07:45,300 --> 00:07:46,319
And we're going to build everything
我们将建立一切

168
00:07:46,319 --> 00:07:48,300
we need off of positive numbers because they're
我们需要正数，因为它们是

169
00:07:48,300 --> 00:07:50,069
easier to deal with.
更容易处理。 

170
00:07:50,069 --> 00:07:57,769
What if I have two words and I subtract them?
如果我有两个单词并减去它们怎么办？ 

171
00:07:57,769 --> 00:07:59,849
What do I get?
我能得到什么？ 

172
00:07:59,850 --> 00:08:01,326
AUDIENCE: Word.
听众：字。 

173
00:08:01,526 --> 00:08:02,110
PROFESSOR: OK.
教授：好的。 

174
00:08:02,110 --> 00:08:06,129



175
00:08:06,129 --> 00:08:11,839
What if I have 0 minus 1?
如果我有0减去1怎么办？ 

176
00:08:11,839 --> 00:08:13,844
What do I get?
我能得到什么？ 

177
00:08:13,845 --> 00:08:16,220
AUDIENCE: 0.
听众：0。 

178
00:08:16,220 --> 00:08:19,175
PROFESSOR: Not quite.
教授：不完全是。 

179
00:08:19,175 --> 00:08:21,115
AUDIENCE: If you're not using signs?
听众：如果您不使用标志？ 

180
00:08:21,115 --> 00:08:24,468
Do you get O, 1?
你得到O，1？ 

181
00:08:24,468 --> 00:08:25,384
PROFESSOR: O, 1's, OK.
教授：O，1，好的。 

182
00:08:25,384 --> 00:08:26,555
AUDIENCE: Ya.
听众：是的。 

183
00:08:26,555 --> 00:08:27,779
Wait--
等待 - 

184
00:08:27,779 --> 00:08:33,822
PROFESSOR: So, O 1's would be this, F, F, F, F.
教授：所以，O 1是这个F，F，F，F。 

185
00:08:33,822 --> 00:08:38,451
AUDIENCE: That's assuming if you signed then.
听众：这是假设您是否已签署。 

186
00:08:38,451 --> 00:08:40,879
It will overflow.
它将溢出。 

187
00:08:40,879 --> 00:08:42,340
That's a really big number then.
那真是一个很大的数字。 

188
00:08:42,340 --> 00:08:45,144
PROFESSOR: So fancy CS, 2's complement.
教授：非常好的CS，2的补码。 

189
00:08:45,144 --> 00:08:49,980



190
00:08:49,980 --> 00:08:54,245
For people who think in math mode, what is this?
对于以数学模式思考的人，这是什么？ 

191
00:08:54,245 --> 00:08:54,995
AUDIENCE: I think.
听众：我认为。 

192
00:08:54,995 --> 00:08:57,700



193
00:08:57,700 --> 00:09:02,730
PROFESSOR: It's minus 1 mod 2 to the 16.
教授：这是1模2减16模。 

194
00:09:02,730 --> 00:09:05,789
Remember, when we were doing modular arithmetic before,
请记住，当我们之前进行模块化算术时， 

195
00:09:05,789 --> 00:09:09,149
to figure out a number's multiplicative inverse?
找出数字的乘法逆数？ 

196
00:09:09,149 --> 00:09:12,197
And when we were doing rolling hashes?
当我们做滚动哈希时？ 

197
00:09:12,197 --> 00:09:13,529
We didn't want negative numbers.
我们不想要负数。 

198
00:09:13,529 --> 00:09:14,446
We made them positive.
我们使他们积极。 

199
00:09:14,446 --> 00:09:17,109



200
00:09:17,309 --> 00:09:21,259
So minus 1 lot to the 16 is 2 to the 16.
所以16减去1手就是2等于16。 

201
00:09:21,259 --> 00:09:23,860
Minus 1, and comes out to this value.
减1，得出该值。 

202
00:09:23,860 --> 00:09:26,517



203
00:09:26,517 --> 00:09:28,100
So you get minus 1, it's just that you
所以你得到负1，就是你

204
00:09:28,100 --> 00:09:29,154
have to know your basis.
必须知道你的依据。 

205
00:09:29,154 --> 00:09:34,169



206
00:09:34,169 --> 00:09:35,979
So we got the addition and subtraction.
这样我们得到了加法和减法。 

207
00:09:35,980 --> 00:09:38,114
Let's talk about multiplication.
让我们谈谈乘法。 

208
00:09:38,114 --> 00:09:39,329
What do you do for multiplication?
你做什么乘法？ 

209
00:09:39,529 --> 00:09:42,389
What can you multiply?
你可以乘以什么？ 

210
00:09:42,389 --> 00:09:43,819
Two bytes, very good.
两个字节，非常好。 

211
00:09:43,820 --> 00:09:44,445
Just two bytes.
只有两个字节。 

212
00:09:44,445 --> 00:09:48,949



213
00:09:49,149 --> 00:09:52,289
What do you get?
你得到了什么？ 

214
00:09:52,289 --> 00:09:52,819
A word.
一个字。 

215
00:09:52,820 --> 00:09:55,190
Thank you.
谢谢。 

216
00:09:55,190 --> 00:09:57,109
You multiply two bytes, you get a word.
您将两个字节相乘得到一个字。 

217
00:09:57,109 --> 00:09:57,949
What if there's overflow?
如果有溢出怎么办？ 

218
00:09:58,149 --> 00:10:09,569



219
00:10:09,570 --> 00:10:10,786
It's a trick question.
这是一个技巧问题。 

220
00:10:10,986 --> 00:10:12,419
AUDIENCE: There's no overflow.
听众：没有溢出。 

221
00:10:12,419 --> 00:10:13,879
PROFESSOR: There is no overflow.
教授：没有溢出。 

222
00:10:13,879 --> 00:10:18,500
So two bytes, 2 to the eighth minus 1 times 2
所以两个字节2到第八减1乘以2 

223
00:10:18,500 --> 00:10:22,299
to the eighth minus 1, is 2 to the 16 minus 2
到第八减1，是2到16减2 

224
00:10:22,299 --> 00:10:25,229
to the 8th minus 2 to the eighth plus 1.
到第八减2到第八加1。 

225
00:10:25,230 --> 00:10:27,740



226
00:10:27,740 --> 00:10:31,250
You can say this safely without doing the arithmetic, right?
您可以不用算术就可以安全地说出来，对吗？ 

227
00:10:31,250 --> 00:10:33,909



228
00:10:33,909 --> 00:10:36,469
This is how much you can hold, in other words.
换句话说，这就是您可以持有的数量。 

229
00:10:36,470 --> 00:10:40,835
This is how much you can holding in a byte.
这是您可以容纳一个字节的数量。 

230
00:10:40,835 --> 00:10:42,230
AUDIENCE: Why do you minus 1?
听众：为什么要减去1？ 

231
00:10:42,230 --> 00:10:43,259
PROFESSOR: Ya, minus 1.
教授：是的，负1。 

232
00:10:43,259 --> 00:10:45,769
There's a minus 1 here, and there's a minus 1 here,
这里是负1，这里是负1， 

233
00:10:45,769 --> 00:10:48,519
but I can't find it here, so roughly this.
但我在这里找不到它，大致如此。 

234
00:10:48,519 --> 00:10:49,995
But there is an overflow.
但是有一个溢出。 

235
00:10:49,995 --> 00:10:52,228
AUDIENCE: But where did you get the minus 1 from?
听众：但是，您从哪里得到负1？ 

236
00:10:52,229 --> 00:10:53,569
PROFESSOR: Where do you get the-- so,
教授：您从哪里得到的-所以， 

237
00:10:53,769 --> 00:10:56,730
this is how much you can hold in a byte.
这是一个字节可以容纳的数量。 

238
00:10:56,730 --> 00:10:58,740
Byte has 8 bits, right?
字节有8位，对吗？ 

239
00:10:58,740 --> 00:11:03,895
From 0 0 to F F. This is 2 to the eighth minus 1.
从0 0到FF。这是2到第八减1。 

240
00:11:03,895 --> 00:11:05,120
AUDIENCE: OK.
听众：好的。 

241
00:11:05,120 --> 00:11:06,500
PROFESSOR: OK, so multiplication?
教授：好的，乘法吗？ 

242
00:11:06,500 --> 00:11:07,399
There is an overflow.
有一个溢出。 

243
00:11:07,399 --> 00:11:08,691
I don't have to deal with that.
我不必处理。 

244
00:11:08,691 --> 00:11:10,820
You guys have to figure out how to deal with it.
你们必须弄清楚如何处理它。 

245
00:11:10,820 --> 00:11:11,879
How about division?
师呢？ 

246
00:11:11,879 --> 00:11:12,740
What can you divide?
你可以划分什么？ 

247
00:11:12,740 --> 00:11:15,488



248
00:11:15,488 --> 00:11:16,870
AUDIENCE: Some words?
听众：有些话吗？ 

249
00:11:16,870 --> 00:11:18,477
PROFESSOR: Almost.
教授：差不多了。 

250
00:11:18,477 --> 00:11:19,789
AUDIENCE: Words like--
听众：像- 

251
00:11:19,789 --> 00:11:25,059
PROFESSOR: A word divided by a byte.
教授：一个字除以一个字节。 

252
00:11:25,059 --> 00:11:28,429
What do you get out of it?
你从中得到什么？ 

253
00:11:28,429 --> 00:11:30,829
AUDIENCE: Words?
听众：话？ 

254
00:11:30,830 --> 00:11:32,210
PROFESSOR: That would be nice.
教授：那很好。 

255
00:11:32,210 --> 00:11:33,426
Nope.
不。 

256
00:11:33,426 --> 00:11:37,110
Sorry, you get a byte.
抱歉，您得到一个字节。 

257
00:11:37,110 --> 00:11:39,470
And if you do module, you also get a byte.
如果执行模块，则还会得到一个字节。 

258
00:11:39,470 --> 00:11:43,730



259
00:11:43,730 --> 00:11:45,490
What if there's overflow in the division?
如果部门有溢出怎么办？ 

260
00:11:45,490 --> 00:11:45,830
What happens?
怎么了？ 

261
00:11:46,030 --> 00:11:48,669



262
00:11:48,669 --> 00:11:51,173
What would you expect to happen?
您期望发生什么？ 

263
00:11:51,173 --> 00:11:55,158
AUDIENCE: We don't have any best flowing point numbers,
观众：我们没有最佳的流点数， 

264
00:11:55,158 --> 00:12:00,149
so, we shouldn't get overflow, right?
所以，我们不应该溢出，对不对？ 

265
00:12:00,149 --> 00:12:05,809
PROFESSOR: How about 2 to the 16 minus 1 divided by 1?
教授：2到16减1除以1怎么样？ 

266
00:12:05,809 --> 00:12:09,209



267
00:12:09,210 --> 00:12:10,120
So what do get?
那么得到什么呢？ 

268
00:12:10,120 --> 00:12:10,995
AUDIENCE: Same thing?
听众：同样吗？ 

269
00:12:10,995 --> 00:12:12,335
PROFESSOR: Will this fit in the byte?
教授：这适合字节吗？ 

270
00:12:12,535 --> 00:12:13,182
AUDIENCE: Yes?
听众：是吗？ 

271
00:12:13,182 --> 00:12:13,682
No.
没有。 

272
00:12:13,682 --> 00:12:14,544
[LAUGHTER]
 [笑声] 

273
00:12:14,544 --> 00:12:15,807
No.
没有。 

274
00:12:15,807 --> 00:12:18,907
Well, that time I don't get a word.
好吧，那一次我一言不发。 

275
00:12:18,907 --> 00:12:20,240
PROFESSOR: You don't get a word.
教授：您一言不发。 

276
00:12:20,240 --> 00:12:22,830
I promise you get a byte.
我保证你会得到一个字节。 

277
00:12:22,830 --> 00:12:26,094
What will that byte be?
该字节是什么？ 

278
00:12:26,294 --> 00:12:29,675
AUDIENCE: It's going to be modulo something.
听众：这将是模数。 

279
00:12:29,676 --> 00:12:30,642
Most significant--
最重要的 - 

280
00:12:30,642 --> 00:12:33,829



281
00:12:34,029 --> 00:12:37,689
PROFESSOR: That's reasonable, right?
教授：那是合理的，对吗？ 

282
00:12:37,690 --> 00:12:40,000
Modulo to 56 because that's what it can carry.
模数为56，因为它可以携带。 

283
00:12:40,000 --> 00:12:42,850



284
00:12:42,850 --> 00:12:44,344
What about modulo?
模数呢？ 

285
00:12:44,544 --> 00:12:46,169
What happens there if you get overflow?
如果您溢出该怎么办？ 

286
00:12:46,169 --> 00:12:54,961



287
00:12:54,961 --> 00:12:57,396
AUDIENCE: The same thing.
听众：同一件事。 

288
00:12:57,397 --> 00:13:01,293
It's just going to loop, right?
只是循环而已，对吗？ 

289
00:13:01,293 --> 00:13:04,115
0?
 0？ 

290
00:13:04,115 --> 00:13:05,490
PROFESSOR: So if you do a modulo,
教授：所以，如果您做模， 

291
00:13:05,490 --> 00:13:08,870
this is going to be, at most, 255 right?
最多是255个吧？ 

292
00:13:08,870 --> 00:13:12,340
If you do modulo 255, the remainder
如果对255做模，余数

293
00:13:12,340 --> 00:13:15,639
is going to be between 0 and 254.
将在0到254之间。 

294
00:13:15,639 --> 00:13:19,449
Will that ever overflow byte?
那会溢出字节吗？ 

295
00:13:19,450 --> 00:13:19,796
No overflow.
没有溢出。 

296
00:13:19,996 --> 00:13:21,079
No need to worry about it.
不用担心。 

297
00:13:21,080 --> 00:13:25,969



298
00:13:26,169 --> 00:13:27,829
Word addition can overflow.
单词加法会溢出。 

299
00:13:27,830 --> 00:13:29,730
Subtraction can overflow.
减法可能溢出。 

300
00:13:29,730 --> 00:13:31,230
Multiplication doesn't overflow.
乘法不会溢出。 

301
00:13:31,230 --> 00:13:32,980
Division overflows, modulo doesn't.
除法溢出，取模不会。 

302
00:13:32,980 --> 00:13:36,027



303
00:13:36,227 --> 00:13:40,909
AUDIENCE: What do you mean, like will it see the space confined?
听众：你是什么意思，就像它会看到空间受限吗？ 

304
00:13:40,909 --> 00:13:41,794
PROFESSOR: Yes.
教授：是的。 

305
00:13:41,794 --> 00:13:43,189
It sees the space of the result.
它看到结果的空间。 

306
00:13:43,190 --> 00:13:44,479
Because here, if you're adding two words,
因为在这里，如果您要添加两个词， 

307
00:13:44,679 --> 00:13:46,304
the result exceeds the space of a word.
结果超出了一个单词的空间。 

308
00:13:46,304 --> 00:13:49,151
Which is what you get.
你得到的是什么。 

309
00:13:49,152 --> 00:13:54,460
AUDIENCE: Is it just in all cases it's just [INAUDIBLE].
听众：是不是在所有情况下都是[听不清]。 

310
00:13:54,460 --> 00:13:56,450
PROFESSOR: Exactly.
教授：是的。 

311
00:13:56,450 --> 00:13:59,319
So the reason you have to deal with this weird system
所以您必须处理这个怪异系统的原因

312
00:13:59,519 --> 00:14:04,509
is this is, pretty much, how Intel does their arithmetic.
这几乎就是英特尔如何进行算术运算的。 

313
00:14:04,509 --> 00:14:07,769
If you look at old school, 16-bit Intel processors,
如果您看看老式的16位Intel处理器， 

314
00:14:07,769 --> 00:14:10,600
you have registers and you have exactly these operations.
您有寄存器，并且您具有这些操作。 

315
00:14:10,600 --> 00:14:14,250
For newer processors, there are 32 bits, but then it's just,
对于较新的处理器，只有32位，但是

316
00:14:14,250 --> 00:14:17,644
you write more F's on the board and you get the same thing.
你在板上写了更多的F，你会得到相同的结果。 

317
00:14:17,644 --> 00:14:20,929
AUDIENCE: Is it most significant bit, or most significant byte?
听众：是最高有效位还是最高有效字节？ 

318
00:14:20,929 --> 00:14:24,439
PROFESSOR: Most significant byte.
教授：最高有效字节。 

319
00:14:24,440 --> 00:14:26,819
On a real processor, you have registers
在真实的处理器上，您有寄存器

320
00:14:27,019 --> 00:14:28,519
that are the size of a word and then
那是一个字的大小，然后

321
00:14:28,519 --> 00:14:30,470
you can pull out the bytes in constant time.
您可以在固定时间内提取字节。 

322
00:14:30,470 --> 00:14:33,750



323
00:14:33,750 --> 00:14:34,909
What constant do we have?
我们有什么常数？ 

324
00:14:34,909 --> 00:14:37,379
These are the operations.
这些是操作。 

325
00:14:37,379 --> 00:14:38,470
What constants do we have?
我们有什么常数？ 

326
00:14:38,470 --> 00:14:43,690



327
00:14:43,690 --> 00:14:47,599
Only two constants, 0 and 1.
只有两个常数0和1。 

328
00:14:47,799 --> 00:14:51,261



329
00:14:51,261 --> 00:14:52,969
What if you want to get something bigger?
如果您想要更大的东西怎么办？ 

330
00:14:52,970 --> 00:14:53,859
What if you want to get 2?
如果您想得到2怎么办？ 

331
00:14:54,059 --> 00:14:56,799
How do you get 2?
你怎么得到2？ 

332
00:14:56,799 --> 00:14:57,769
AUDIENCE: Two 1's?
听众：两个1？ 

333
00:14:57,769 --> 00:14:58,855
1 plus 1?
 1加1？ 

334
00:14:58,855 --> 00:14:59,480
PROFESSOR: Yep.
教授：是的。 

335
00:14:59,480 --> 00:15:02,729



336
00:15:02,929 --> 00:15:06,299
What if you want to get this number?
如果您想获得这个号码怎么办？ 

337
00:15:06,299 --> 00:15:12,695



338
00:15:12,696 --> 00:15:14,663
AUDIENCE: Do that several times?
听众：做几次？ 

339
00:15:14,663 --> 00:15:16,473
[LAUGHTER]
 [笑声] 

340
00:15:16,474 --> 00:15:17,939
PROFESSOR: It's kind of painful to type,
教授：打字有点痛苦， 

341
00:15:18,139 --> 00:15:21,019
even if you copy paste.
即使您复制粘贴。 

342
00:15:21,019 --> 00:15:24,309
There's a method on Word called from-bytes.
 Word上有一种称为“从字节”的方法。 

343
00:15:24,309 --> 00:15:28,479



344
00:15:28,480 --> 00:15:32,469
And it takes an M, S, B and an L, S, B
它需要一个M，S，B和一个L，S，B 

345
00:15:32,669 --> 00:15:34,299
and it gives you a word.
它给你一个字。 

346
00:15:34,299 --> 00:15:35,349
So what would I give it?
那我该怎么办呢？ 

347
00:15:35,350 --> 00:15:37,897



348
00:15:38,097 --> 00:15:40,389
AUDIENCE: [INAUDIBLE].
听众：[听不清]。 

349
00:15:40,389 --> 00:15:42,725
PROFESSOR: Let's give it a 1 and let's give it a 0.
教授：我们给它一个1，然后给它一个0。 

350
00:15:42,725 --> 00:15:45,490



351
00:15:45,490 --> 00:15:52,100
So this will get 1, 0, 0 and then minus 1.
所以这将得到1，0，0然后减1。 

352
00:15:52,100 --> 00:15:58,855



353
00:15:58,855 --> 00:15:59,355
Yes?
是？ 

354
00:15:59,355 --> 00:16:03,539



355
00:16:03,539 --> 00:16:05,658
OK.
好。 

356
00:16:05,658 --> 00:16:07,200
Intel is pretty nice about constants,
英特尔对常量非常好， 

357
00:16:07,200 --> 00:16:08,449
but some other processors aren't.
但是其他一些处理器不是。 

358
00:16:08,649 --> 00:16:11,620
So I figured, why not let's get you acquainted
所以我想，为什么不让你结识

359
00:16:11,620 --> 00:16:13,846
to these kind of tricks, to too.
这些技巧，也是如此。 

360
00:16:13,846 --> 00:16:17,399
Let's make the PSETS more interesting.
让我们使PSET更有趣。 

361
00:16:17,399 --> 00:16:19,649
All right, so any questions on this fake processor
好吧，所以关于这个假处理器的任何问题

362
00:16:19,649 --> 00:16:22,040
that you have to code for?
你必须编码？ 

363
00:16:22,041 --> 00:16:26,561
AUDIENCE: Can you explain the last one again?
听众：你能再解释一遍吗？ 

364
00:16:26,761 --> 00:16:27,733
PROFESSOR: Here?
教授：这吗？ 

365
00:16:27,734 --> 00:16:29,690
AUDIENCE: Yeah, Word from-bytes.
听众：是的，字从字节开始。 

366
00:16:29,690 --> 00:16:32,109
PROFESSOR: So in Word from-bytes a word is 2 bytes.
教授：所以在Word中，从字节开始，一个单词是2个字节。 

367
00:16:32,309 --> 00:16:34,519
One next to the other.
一个接一个。 

368
00:16:34,519 --> 00:16:37,149
It gives you the first byte, and gives you the second byte.
它给您第一个字节，并给您第二个字节。 

369
00:16:37,149 --> 00:16:40,340
In this case, the first byte is 1.
在这种情况下，第一个字节为1。 

370
00:16:40,340 --> 00:16:42,190
The second byte is 0.
第二个字节为0。 

371
00:16:42,190 --> 00:16:42,690
Right?
对？ 

372
00:16:42,690 --> 00:16:43,449
So 2 bytes.
所以2个字节

373
00:16:43,649 --> 00:16:45,149
A 1 and a 0.
 A 1和0。 

374
00:16:45,149 --> 00:16:47,759
How do you write this in hex?
你怎么用十六进制写这个？ 

375
00:16:47,759 --> 00:16:49,529
1, 0, 0.
 1 0 0 

376
00:16:49,529 --> 00:16:52,059
One byte, second byte.
一个字节，第二个字节。 

377
00:16:52,059 --> 00:16:58,500
And then I subtract 1 and I get this.
然后我减去1，得到这个。 

378
00:16:58,500 --> 00:17:03,889



379
00:17:03,889 --> 00:17:06,088
While I erase the board, I want you guys
我擦除董事会时，我希望你们

380
00:17:06,088 --> 00:17:08,039
to think of graph questions because this
想图问题，因为这

381
00:17:08,039 --> 00:17:10,549
is the other topic we're looking at today.
是我们今天要讨论的另一个主题。 

382
00:17:10,549 --> 00:17:12,019
What was unclear about the lecture?
讲座尚不清楚吗？ 

383
00:17:12,019 --> 00:17:13,838
What is unclear about graphs in general?
一般来说，关于图有哪些不清楚的地方？ 

384
00:17:13,838 --> 00:17:15,789
Do guys remember the handshaking lemma?
你们还记得握手引理吗？ 

385
00:17:15,789 --> 00:17:16,559
What does it mean?
这是什么意思？ 

386
00:17:16,559 --> 00:17:17,809
How do you prove it?
你如何证明呢？ 

387
00:17:17,809 --> 00:17:20,740
Things of that sort.
那种事情。 

388
00:17:20,740 --> 00:17:23,287
What do you guys want to cover today?
你们今天想讲什么？ 

389
00:17:23,287 --> 00:17:25,923
AUDIENCE: Handshaking, that's the thing where
听众：握手，就是这样

390
00:17:25,923 --> 00:17:30,450
you have a bunch nodes and they're all connected,
你有一堆节点，它们都连接在一起， 

391
00:17:30,450 --> 00:17:36,008
like they're all in a closed graph, that the number of edges
就像它们都在一个封闭图中一样，边的数量

392
00:17:36,008 --> 00:17:40,269
is equal to twice the number of vertices?
等于顶点数量的两倍？ 

393
00:17:40,269 --> 00:17:41,865
PROFESSOR: OK.
教授：好的。 

394
00:17:41,865 --> 00:17:43,650
AUDIENCE: That's all it is, right?
听众：仅此而已，对吧？ 

395
00:17:43,650 --> 00:17:44,305
PROFESSOR: The number of vertices?
教授：顶点数？ 

396
00:17:44,305 --> 00:17:44,880
No.
没有。 

397
00:17:44,880 --> 00:17:46,296
AUDIENCE: The number of handshakes
听众：握手次数

398
00:17:46,296 --> 00:17:49,900
that occurred are twice the number of edges.
发生的次数是边缘数量的两倍。 

399
00:17:49,900 --> 00:17:53,410
You said the number of vertices, wait--
您说的是顶点数，等等- 

400
00:17:53,410 --> 00:17:56,189
PROFESSOR: No, vertices and edges are not related in here.
教授：不，此处的顶点和边不相关。 

401
00:17:56,189 --> 00:17:57,980
AUDIENCE: Yeah, think of a triangle, right?
听众：是的，想到一个三角形，对吗？ 

402
00:17:57,980 --> 00:18:00,329
That's three edges, three vertices.
那是三个边缘，三个顶点。 

403
00:18:00,329 --> 00:18:05,589
Which is like not two times, which is what you said.
这不是两次，而是您所说的。 

404
00:18:05,589 --> 00:18:08,300
It's the number of degrees is twice the number of edges.
它的度数是边数的两倍。 

405
00:18:08,300 --> 00:18:10,089
That's what I was thinking of then.
那就是我当时的想法。 

406
00:18:10,089 --> 00:18:12,619
PROFESSOR: All right, so let's start with simple stuff.
教授：好的，让我们从简单的内容开始。 

407
00:18:12,619 --> 00:18:15,207
What's a graph?
什么是图？ 

408
00:18:15,208 --> 00:18:16,670
AUDIENCE: Nodes and edges?
听众：节点和边缘？ 

409
00:18:16,670 --> 00:18:17,545
PROFESSOR: All right.
教授：好的。 

410
00:18:17,545 --> 00:18:18,900
Fancy word for nodes?
花哨的节点词？ 

411
00:18:18,900 --> 00:18:19,408
AUDIENCE: Vertex.
听众：顶点。 

412
00:18:19,608 --> 00:18:20,357
PROFESSOR: Vertex.
教授：顶点。 

413
00:18:20,357 --> 00:18:21,230
Vertices and edges.
顶点和边缘。 

414
00:18:21,230 --> 00:18:22,430
How do I draw vertices?
如何绘制顶点？ 

415
00:18:22,430 --> 00:18:23,400
How do I draw edges?
如何绘制边缘？ 

416
00:18:23,400 --> 00:18:24,680
AUDIENCE: Circles and lines.
听众：圆和直线。 

417
00:18:24,680 --> 00:18:26,516
PROFESSOR: Circles and lines.
教授：圆和直线。 

418
00:18:26,516 --> 00:18:27,773
AUDIENCE: 0's and 1's.
受众：0和1。 

419
00:18:27,973 --> 00:18:31,034
Possibly arrows.
可能是箭头。 

420
00:18:31,035 --> 00:18:32,160
PROFESSOR: Possibly arrows.
教授：可能是箭头。 

421
00:18:32,160 --> 00:18:32,920
I like that.
我喜欢。 

422
00:18:32,920 --> 00:18:34,385
You want to get fancy.
你想花哨。 

423
00:18:34,385 --> 00:18:36,696
[LAUGHTER}
 [笑声} 

424
00:18:36,696 --> 00:18:38,529
PROFESSOR: When do I draw an edge as a line?
教授：我何时画一条边线？ 

425
00:18:38,529 --> 00:18:40,817
When do I draw it as an arrow?
什么时候画成箭头？ 

426
00:18:40,817 --> 00:18:43,240
AUDIENCE: Directed under.
听众：指挥下。 

427
00:18:43,240 --> 00:18:44,531
PROFESSOR: Which one's which?
教授：哪个？ 

428
00:18:44,531 --> 00:18:46,008
AUDIENCE: Directed as an arrow.
听众：指向箭头。 

429
00:18:46,008 --> 00:18:46,991
Character number.
字符编号。 

430
00:18:46,991 --> 00:18:56,013



431
00:18:56,013 --> 00:18:56,679
PROFESSOR: Cool.
教授：太好了。 

432
00:18:56,680 --> 00:18:58,254
Let's draw this graph here.
让我们在这里画图。 

433
00:18:58,454 --> 00:19:05,129



434
00:19:05,130 --> 00:19:06,970
Yeah, looks like a pretty boring graph.
是的，看起来像一个无聊的图表。 

435
00:19:06,970 --> 00:19:11,569



436
00:19:11,569 --> 00:19:14,442
Is this graph connected or not?
此图是否已连接？ 

437
00:19:14,442 --> 00:19:16,960
AUDIENCE: Yes.
听众：是的。 

438
00:19:16,960 --> 00:19:19,903
PROFESSOR: What's a connected graph?
教授：什么是关联图？ 

439
00:19:19,903 --> 00:19:21,278
AUDIENCE: I think that we can get
听众：我认为我们可以得到

440
00:19:21,278 --> 00:19:23,880
to any other node following some path.
到某个路径之后的任何其他节点。 

441
00:19:23,880 --> 00:19:27,880
PROFESSOR: There's a path from any to any other node.
教授：从任何节点到任何其他节点都有一条路径。 

442
00:19:27,880 --> 00:19:31,369
How do I make this unconnected using
我如何使用

443
00:19:31,569 --> 00:19:32,829
the least amount of effort?
最少的努力？ 

444
00:19:32,829 --> 00:19:36,289



445
00:19:36,289 --> 00:19:38,629
It's a bit of a trick question.
这是一个技巧问题。 

446
00:19:38,630 --> 00:19:39,531
Any guess is fine.
任何猜测都可以。 

447
00:19:39,731 --> 00:19:41,339
AUDIENCE: What was the question again?
听众：再问什么？ 

448
00:19:41,339 --> 00:19:43,109
PROFESSOR: How do I make this unconnected
教授：我该如何断开连接

449
00:19:43,109 --> 00:19:47,083
using the least amount of effort on my behalf?
代表我用最少的精力？ 

450
00:19:47,084 --> 00:19:48,793
AUDIENCE: Just add a node?
听众：只是添加一个节点？ 

451
00:19:48,993 --> 00:19:50,409
PROFESSOR: I heard you move pages.
教授：我听说你在移动页面。 

452
00:19:50,410 --> 00:19:55,950
I don't like you racing because I don't like the-- So
我不喜欢你赛车，因为我不喜欢

453
00:19:55,950 --> 00:20:00,170
I like that answer out of the two I heard.
我喜欢听到的两个答案。 

454
00:20:00,170 --> 00:20:02,359
Now it's not a connected graph.
现在，它不是连接图。 

455
00:20:02,559 --> 00:20:04,309
How many connected component does it have?
它有多少个相连的组件？ 

456
00:20:04,309 --> 00:20:08,899



457
00:20:08,900 --> 00:20:09,630
Two and five.
二五

458
00:20:09,630 --> 00:20:11,309
AUDIENCE: Or one connected component,
听众：或一个连接的组件， 

459
00:20:11,509 --> 00:20:13,787
but there are two components?
但是有两个组成部分？ 

460
00:20:13,787 --> 00:20:15,419
PROFESSOR: OK, what's a connected component?
教授：好的，什么是连接的组件？ 

461
00:20:15,619 --> 00:20:23,339



462
00:20:23,339 --> 00:20:26,599
AUDIENCE: It's like in that part of the graph the neck follows
听众：就像在图的那部分

463
00:20:26,599 --> 00:20:33,034
the prognito beacon and puts them in two parts [INAUDIBLE]
 prognito信标并将其分为两部分[听不清] 

464
00:20:33,035 --> 00:20:35,509
two connected components--
两个连接的组件- 

465
00:20:35,509 --> 00:20:37,019
PROFESSOR: So, a connected component
教授：所以，一个连接的组件

466
00:20:37,019 --> 00:20:40,509
is a bunch of vertices such that you can get from one vertex
是一堆顶点，因此您可以从一个顶点获得

467
00:20:40,509 --> 00:20:43,220
to all the other vertices.
到所有其他顶点。 

468
00:20:43,220 --> 00:20:45,230
If the graph is undirected, that's
如果图形是无向的，那就是

469
00:20:45,230 --> 00:20:48,019
true for any vertex in the set.
对集合中的任何顶点为true。 

470
00:20:48,019 --> 00:20:50,589
We also want the sets to be maximal
我们还希望集合最大

471
00:20:50,589 --> 00:20:54,059
because, if we say this is a connected component,
因为，如果我们说这是一个连接的组件， 

472
00:20:54,059 --> 00:20:55,823
it's not very useful.
这不是很有用。 

473
00:20:55,824 --> 00:20:58,115
Noticing that this whole thing is a connected component
注意到这整个东西是一个连接的组件

474
00:20:58,115 --> 00:20:59,650
is useful.
是有用的。 

475
00:20:59,650 --> 00:21:00,649
So this is one component.
因此，这是一个组成部分。 

476
00:21:00,849 --> 00:21:03,059
This is the other component.
这是另一个组件。 

477
00:21:03,059 --> 00:21:05,950
Make sense?
说得通？ 

478
00:21:05,950 --> 00:21:08,309
So, we have the world.
因此，我们拥有世界。 

479
00:21:08,309 --> 00:21:10,190
We have cities.
我们有城市。 

480
00:21:10,190 --> 00:21:12,409
You can bike from a city to another city and that's it.
您可以从一个城市骑自行车到另一个城市，仅此而已。 

481
00:21:12,609 --> 00:21:15,139
No other a route of transportation.
没有其他运输路线。 

482
00:21:15,140 --> 00:21:16,390
How many connected components?
有多少个连接的组件？ 

483
00:21:16,390 --> 00:21:19,855



484
00:21:19,855 --> 00:21:20,826
AUDIENCE: Seven?
听众：七个？ 

485
00:21:20,826 --> 00:21:21,410
PROFESSOR: OK.
教授：好的。 

486
00:21:21,410 --> 00:21:24,099
Roughly seven.
大约七个。 

487
00:21:24,299 --> 00:21:24,799
Why?
为什么？ 

488
00:21:24,799 --> 00:21:28,149



489
00:21:28,150 --> 00:21:29,759
OK, so it only seven?
好吧，所以只有七个？ 

490
00:21:29,759 --> 00:21:30,967
AUDIENCE: Seven continents?
听众：七大洲？ 

491
00:21:30,967 --> 00:21:31,349
PROFESSOR: OK.
教授：好的。 

492
00:21:31,549 --> 00:21:36,319



493
00:21:36,319 --> 00:21:37,359
Let's say roughly seven.
大概是七个。 

494
00:21:37,359 --> 00:21:38,469
So this is what I wanted.
这就是我想要的。 

495
00:21:38,470 --> 00:21:40,507
I wanted some thinking.
我想想一想。 

496
00:21:40,507 --> 00:21:42,639
If you try to get from a continent to another continent,
如果您尝试从一个大陆到达另一个大陆， 

497
00:21:42,839 --> 00:21:45,764
presumably you'd go through some patch of sea.
大概你会经历一些海。 

498
00:21:45,765 --> 00:21:47,765
Otherwise, why are they calling them continents?
否则，他们为什么称它们为大洲？ 

499
00:21:47,765 --> 00:21:50,669



500
00:21:50,869 --> 00:21:53,009
Does anyone want to give out another answer?
有人想给出另一个答案吗？ 

501
00:21:53,009 --> 00:21:54,509
I asked this in the previous section
我在上一节中问过

502
00:21:54,509 --> 00:21:57,269
and some people there give me some very precise answers
有些人给我一些非常准确的答案

503
00:21:57,269 --> 00:21:58,635
that are not continents.
那不是大洲。 

504
00:21:58,635 --> 00:22:00,259
This is what I had in mind, by the way.
顺便说一下，这就是我的想法。 

505
00:22:00,259 --> 00:22:03,069



506
00:22:03,069 --> 00:22:06,950
As far as I'm concerned, this is a good answer.
就我而言，这是一个很好的答案。 

507
00:22:06,950 --> 00:22:09,889
Come on guys, world.
来吧，伙计们，世界。 

508
00:22:10,089 --> 00:22:18,769
Two things, islands and Europe and Asia are connected,
岛屿与欧洲和亚洲这两个方面相连， 

509
00:22:18,769 --> 00:22:20,470
so you can go from one to the other.
这样您就可以从一个转到另一个。 

510
00:22:20,470 --> 00:22:21,500
They're weird.
他们很奇怪。 

511
00:22:21,500 --> 00:22:23,059
Why are they separate continents?
他们为什么分开大洲？ 

512
00:22:23,059 --> 00:22:24,419
I have no idea.
我不知道。 

513
00:22:24,420 --> 00:22:26,091
The geography people might--
地理人士可能- 

514
00:22:26,291 --> 00:22:28,439
AUDIENCE: [INAUDIBLE].
听众：[听不清]。 

515
00:22:28,440 --> 00:22:28,947
PROFESSOR: Sorry?
教授：对不起？ 

516
00:22:29,147 --> 00:22:31,529
AUDIENCE: You roll mountains?
听众：你滚山吗？ 

517
00:22:31,529 --> 00:22:34,001
PROFESSOR: OK, so it would be a pain bike through them,
教授：好的，那将是一辆穿越他们的痛苦自行车， 

518
00:22:34,001 --> 00:22:35,374
but presumably you can.
但大概可以。 

519
00:22:35,374 --> 00:22:37,664
If you have a robot that doesn't get tired or something
如果您的机器人不疲劳或其他原因

520
00:22:37,664 --> 00:22:38,763
you can bike.
你可以骑自行车。 

521
00:22:38,763 --> 00:22:41,228
AUDIENCE: It doesn't mind falling off cliffs.
听众：不介意从悬崖上掉下来。 

522
00:22:41,229 --> 00:22:43,269
PROFESSOR: The answer, depending on my geography,
教授：答案取决于我的地理位置， 

523
00:22:43,269 --> 00:22:46,190
we know is somewhere between 7 and 10,000,
我们知道大约在7到10,000之间

524
00:22:46,190 --> 00:22:48,129
or whatever the number of islands is.
或任何岛屿数目。 

525
00:22:48,329 --> 00:22:51,480
There are a lot of tiny island somewhere, right?
那里有很多小岛，对不对？ 

526
00:22:51,480 --> 00:22:54,569
Anyways, between seven and a big number.
无论如何，介于七个和大量之间。 

527
00:22:54,569 --> 00:22:57,500
These are connected components in the world.
这些是世界上相互连接的组件。 

528
00:22:57,500 --> 00:22:58,920
What's the degree of A?
 A的度数是多少？ 

529
00:22:58,920 --> 00:23:01,920



530
00:23:01,920 --> 00:23:03,855
2.
 2。 

531
00:23:03,855 --> 00:23:07,644
What's the degree of the D?
 D的度数是多少？ 

532
00:23:07,644 --> 00:23:10,129
AUDIENCE: [INAUDIBLE].
听众：[听不清]。 

533
00:23:10,130 --> 00:23:11,250
PROFESSOR: Very good.
教授：非常好。 

534
00:23:11,250 --> 00:23:11,980
Let's make this.
让我们做这个。 

535
00:23:11,980 --> 00:23:15,659



536
00:23:15,859 --> 00:23:22,659
The degrees of F, G, H are 2, 2, 2.
 F，G，H的度数分别为2、2、2。 

537
00:23:22,660 --> 00:23:27,690
The degree of C is 2.
 C的度数是2。 

538
00:23:27,690 --> 00:23:29,369
The degree of B is?
 B度是多少？ 

539
00:23:29,569 --> 00:23:30,500
AUDIENCE: --2.
听众：--2。 

540
00:23:30,500 --> 00:23:31,390
PROFESSOR: Thank you.
教授：谢谢。 

541
00:23:31,390 --> 00:23:32,970
And the degree of E is?
 E的度数是多少？ 

542
00:23:32,970 --> 00:23:33,470
AUDIENCE: 2.
听众：2。 

543
00:23:33,470 --> 00:23:35,817



544
00:23:35,817 --> 00:23:38,150
PROFESSOR: If you add up all these numbers together what
教授：如果把所有这些数字加起来

545
00:23:38,150 --> 00:23:38,720
you get?
你得到？ 

546
00:23:38,720 --> 00:23:50,230



547
00:23:50,230 --> 00:23:52,180
18.
 18岁

548
00:23:52,180 --> 00:23:54,039
I can't do math, so I couldn't possibly
我不会做数学，所以我不可能

549
00:23:54,039 --> 00:23:56,309
have added all these numbers together, right?
把所有这些数字加在一起，对吗？ 

550
00:23:56,309 --> 00:23:57,339
I used something else.
我用了别的东西。 

551
00:23:57,339 --> 00:24:01,199



552
00:24:01,200 --> 00:24:04,900
How many edges do I have in the graph?
图中有多少条边？ 

553
00:24:04,900 --> 00:24:08,409
1, 2, 3, 4, 5, 6, 7, 8, 9.
 1、2、3、4、5、6、7、8、9 

554
00:24:08,609 --> 00:24:12,369



555
00:24:12,369 --> 00:24:14,997
Do you see your connection here?
你在这里看到你的联系吗？ 

556
00:24:14,998 --> 00:24:15,980
AUDIENCE: Yeah.
听众：是的。 

557
00:24:15,980 --> 00:24:17,829
PROFESSOR: This is the handshaking lemma.
教授：这是握手引理。 

558
00:24:17,829 --> 00:24:21,210
That's all there is to it.
这里的所有都是它的。 

559
00:24:21,210 --> 00:24:23,660
So if you look at the degrees of a node
所以，如果你看一个节点的度数

560
00:24:23,660 --> 00:24:26,230
each edge adds one to two degrees.
每个边缘加一到两个度。 

561
00:24:26,230 --> 00:24:28,750
For instance, this edge adds one to C's degree
例如，这条边向C的度数加1 

562
00:24:28,750 --> 00:24:32,844
and adds one to D's degree.
并在D的学位上加一。 

563
00:24:32,844 --> 00:24:34,759
If you're a math person and you write this up,
如果您是数学家，并且将其写下来， 

564
00:24:34,759 --> 00:24:37,650
you have to write sums.
你必须写总和。 

565
00:24:37,650 --> 00:24:41,379
You have big sums using intimidating notation,
您使用吓人的符号赚了很多钱， 

566
00:24:41,579 --> 00:24:42,929
so it's not as obvious.
所以不是很明显

567
00:24:42,930 --> 00:24:44,919
But this is really all there is to it.
但这实际上就是全部。 

568
00:24:45,119 --> 00:24:49,328
Each edge contributes one to two nodes degrees.
每个边贡献一到两个节点的度数。 

569
00:24:49,328 --> 00:24:50,869
If you add up all the degrees, you're
如果将所有学位加起来， 

570
00:24:50,869 --> 00:24:52,729
going to get to times the number of edges.
将要乘以边缘数。 

571
00:24:52,730 --> 00:24:55,789



572
00:24:55,789 --> 00:24:58,750
So far so good?
到现在为止还挺好？ 

573
00:24:58,750 --> 00:25:01,890
What if we have directed graphs?
如果我们有向图怎么办？ 

574
00:25:01,890 --> 00:25:03,369
What if I had this?
如果我有这个怎么办？ 

575
00:25:03,569 --> 00:25:16,579



576
00:25:16,579 --> 00:25:24,559
A, B, C, D, E, F. What is the degree of A?
 A，B，C，D，E，F。A的度数是多少？ 

577
00:25:24,559 --> 00:25:28,647



578
00:25:28,647 --> 00:25:30,754
AUDIENCE: 2?
听众：2？ 

579
00:25:30,755 --> 00:25:31,630
PROFESSOR: Not quite.
教授：不完全是。 

580
00:25:31,630 --> 00:25:32,480
Sorry, that was trick question.
抱歉，这是技巧问题。 

581
00:25:32,480 --> 00:25:33,789
A doesn't have a degree.
 A没有学位。 

582
00:25:33,789 --> 00:25:36,579



583
00:25:36,579 --> 00:25:39,089
If you have directed graphs, you don't have degrees.
如果有向图，则没有度数。 

584
00:25:39,089 --> 00:25:41,689
You have in degrees and out degrees.
您有度数和度数。 

585
00:25:41,690 --> 00:25:43,730
Now that I've said that you have no idea, right?
现在，我说过你不知道，对不对？ 

586
00:25:43,730 --> 00:25:46,440
What's the out degree of A?
 A的出局程度是多少？ 

587
00:25:46,440 --> 00:25:48,690
AUDIENCE: [INAUDIBLE].
听众：[听不清]。 

588
00:25:48,690 --> 00:25:54,299
PROFESSOR: Sometimes this is known as the degree of edges.
教授：有时这称为边缘度。 

589
00:25:54,299 --> 00:25:55,684
This is 2.
这是2 

590
00:25:55,684 --> 00:25:57,329
What's the in degree of A?
 A的度数是多少？ 

591
00:25:57,329 --> 00:26:00,505



592
00:26:00,506 --> 00:26:01,478
AUDIENCE: [INAUDIBLE].
听众：[听不清]。 

593
00:26:01,478 --> 00:26:03,919



594
00:26:04,119 --> 00:26:09,159
PROFESSOR: So A has two edges going out, 0 edges going in.
教授：所以A有两个边出，0个边入。 

595
00:26:09,160 --> 00:26:10,045
How about D?
 D呢？ 

596
00:26:10,045 --> 00:26:11,240
What's the out degree of D?
 D的输出度是多少？ 

597
00:26:11,240 --> 00:26:14,621



598
00:26:14,621 --> 00:26:15,389
AUDIENCE: [INAUDIBLE].
听众：[听不清]。 

599
00:26:15,589 --> 00:26:16,970
PROFESSOR: Come on guys.
教授：伙计们。 

600
00:26:16,970 --> 00:26:20,200
Don't scare me. (LAUGHS) What's the in degree of D?
别吓我（笑）D的度数是多少？ 

601
00:26:20,200 --> 00:26:21,630
AUDIENCE: 2?
听众：2？ 

602
00:26:21,630 --> 00:26:22,781
PROFESSOR: 2, very good.
教授：2，很好。 

603
00:26:22,981 --> 00:26:24,440
PROFESSOR: So what's the equivalent
教授：那等于什么

604
00:26:24,440 --> 00:26:26,899
of the handshaking lemma on oriented graphs?
图上握手引理的概念？ 

605
00:26:27,099 --> 00:26:29,919



606
00:26:29,920 --> 00:26:32,740
AUDIENCE: The sum of the in degrees and out degrees?
听众：进度和出度的总和？ 

607
00:26:32,740 --> 00:26:35,089
PROFESSOR: OK, what about them?
教授：好的，他们呢？ 

608
00:26:35,089 --> 00:26:39,109
AUDIENCE: They're equal to twice the number of vertices?
听众：它们等于顶点数量的两倍吗？ 

609
00:26:39,109 --> 00:26:42,240
PROFESSOR: Not quite.
教授：不完全是。 

610
00:26:42,240 --> 00:26:43,990
They're equal to?
他们等于？ 

611
00:26:43,990 --> 00:26:45,460
You had 80 percent of the answer.
您有80％的答案。 

612
00:26:45,460 --> 00:26:51,807
AUDIENCE: Oh. (LAUGHS)
听众：哦。 （笑声） 

613
00:26:51,807 --> 00:26:57,599
PROFESSOR: So the sum of the in degrees and the sum of the out
教授：所以度数的总和与度数的总和

614
00:26:57,599 --> 00:26:58,943
degrees.
度。 

615
00:26:58,943 --> 00:26:59,984
AUDIENCE: So add them up?
听众：那么加起来？ 

616
00:26:59,984 --> 00:27:03,813



617
00:27:03,814 --> 00:27:05,230
PROFESSOR: If you add them up, you
教授：如果将它们加起来， 

618
00:27:05,230 --> 00:27:07,529
will get two times the number of edges.
将获得两倍的边缘数量。 

619
00:27:07,529 --> 00:27:09,470
That is correct.
那是对的。 

620
00:27:09,470 --> 00:27:13,140
But, I want something more--
但是，我想要更多…… 

621
00:27:13,140 --> 00:27:14,480
AUDIENCE: They equal each other?
听众：他们彼此平等吗？ 

622
00:27:14,480 --> 00:27:15,105
PROFESSOR: Yep.
教授：是的。 

623
00:27:15,105 --> 00:27:17,750



624
00:27:17,750 --> 00:27:20,660
This is cooler, right?
这很酷吧？ 

625
00:27:20,660 --> 00:27:22,740
So why is that?
那为什么呢？ 

626
00:27:22,740 --> 00:27:24,299
Does anyone see why that's the case?
有人知道为什么会这样吗？ 

627
00:27:24,299 --> 00:27:26,940



628
00:27:26,940 --> 00:27:33,970
Each edge-- Come on, guys.
每个边缘-来吧，伙计们。 

629
00:27:33,970 --> 00:27:35,200
So what does each edge do?
那么每个边缘做什么？ 

630
00:27:35,200 --> 00:27:37,769
AUDIENCE: [INAUDIBLE].
听众：[听不清]。 

631
00:27:37,769 --> 00:27:39,519
PROFESSOR: So if I look at this edge here,
教授：所以，如果我在这里看这个优势， 

632
00:27:39,519 --> 00:27:44,839
this edge is going to contribute 1 to B's out degree,
这个边缘将为B的出场率贡献1， 

633
00:27:44,839 --> 00:27:48,259
and 1 to D's in degree.
程度为1到D。 

634
00:27:48,259 --> 00:27:50,680
Each edge contributes 1 to an out degree
每个边缘贡献1的程度

635
00:27:50,680 --> 00:27:52,759
and 1 to an in degree.
和1度。 

636
00:27:52,759 --> 00:27:56,039
That means that total sum of out degrees
这意味着出学位的总和

637
00:27:56,039 --> 00:27:59,049
equals the total sum of in degrees.
等于度的总和。 

638
00:27:59,049 --> 00:28:02,559
Both of them are E and they combined to E. Sorry,
他们两个都是E，他们合并为E。对不起， 

639
00:28:02,559 --> 00:28:05,783
eyed I don't know why that didn't click to me right away.
眼睛，我不知道为什么没有立刻点击我。 

640
00:28:05,784 --> 00:28:08,181
AUDIENCE: OK.
听众：好的。 

641
00:28:08,181 --> 00:28:09,680
PROFESSOR: The intuition behind this
教授：这背后的直觉

642
00:28:09,680 --> 00:28:12,682
is, that for every node, if you take an edge
是，对于每个节点，如果您占据优势

643
00:28:12,682 --> 00:28:14,140
you're going to get somewhere else.
您将到达其他地方。 

644
00:28:14,140 --> 00:28:16,980



645
00:28:16,980 --> 00:28:19,128
If the sum of the out degrees was bigger,
如果出学位的总和更大， 

646
00:28:19,128 --> 00:28:20,669
then you have a black hole somewhere.
那你在某个地方有一个黑洞

647
00:28:20,670 --> 00:28:22,490
If you go on an edge you don't come back.
如果你走在边缘，你就不会回来。 

648
00:28:22,490 --> 00:28:23,660
Same four in degrees.
同样的四度。 

649
00:28:23,660 --> 00:28:27,889



650
00:28:28,089 --> 00:28:29,879
OK, how do we represent graphs?
好，我们如何表示图？ 

651
00:28:29,880 --> 00:28:34,619



652
00:28:34,819 --> 00:28:37,125
AUDIENCE: I think we just did.
听众：我认为我们刚刚做到了。 

653
00:28:37,125 --> 00:28:38,750
PROFESSOR: Sure, if you're drawing them
教授：当然，如果您要绘制它们

654
00:28:38,750 --> 00:28:40,665
on the board that's what you do, but if you're
在董事会上，这就是您要做的，但是如果您是

655
00:28:40,665 --> 00:28:42,220
in Python what do you do?
在Python中做什么？ 

656
00:28:42,220 --> 00:28:43,745
AUDIENCE: You can have a link list.
听众：您可以有一个链接列表。 

657
00:28:43,945 --> 00:28:44,762
PROFESSOR: Of?
教授：是的？ 

658
00:28:44,762 --> 00:28:50,919
AUDIENCE: Of each node having its neighbors linked with.
听众：与每个邻居链接的节点。 

659
00:28:50,920 --> 00:28:52,849
PROFESSOR: OK, so I have one big link list?
教授：好的，所以我有一个很大的链接列表？ 

660
00:28:53,049 --> 00:28:55,960
Or how does this work?
或如何运作？ 

661
00:28:55,960 --> 00:28:58,519
AUDIENCE: You'd have a starting point of some sort.
听众：您会有某种起点。 

662
00:28:58,519 --> 00:29:00,250
A starting node.
起始节点。 

663
00:29:00,250 --> 00:29:04,513
Then from that node you can have its neighbors connected to it.
然后，可以从该节点连接其邻居。 

664
00:29:04,513 --> 00:29:07,719



665
00:29:07,720 --> 00:29:09,304
So it was a link list , I guess.
我想这是一个链接列表。 

666
00:29:09,304 --> 00:29:10,470
PROFESSOR: I wasn't precise.
教授：我并不精确。 

667
00:29:10,470 --> 00:29:12,200
That is not trivial to build.
构建起来并不容易。 

668
00:29:12,200 --> 00:29:15,700
By the time we build that we're done with this recitation.
到我们构建时，我们已经完成了这一背诵。 

669
00:29:15,700 --> 00:29:20,294
What do you get is the vertices and the edges.
您得到的是顶点和边缘。 

670
00:29:20,294 --> 00:29:22,960
We want an easier representation that just looks at the vertices
我们想要一个更简单的表示，只看顶点

671
00:29:22,960 --> 00:29:24,420
and build something, then looks at the edges
建造东西，然后看边缘

672
00:29:24,420 --> 00:29:25,295
and builds something.
并建立一些东西。 

673
00:29:25,295 --> 00:29:30,602



674
00:29:30,602 --> 00:29:32,486
AUDIENCE: You could have a table of values.
听众：您可以有一个值表。 

675
00:29:32,486 --> 00:29:36,498
Like, A has these neighbors-- a dictionary.
像，A有这些邻居-字典。 

676
00:29:36,498 --> 00:29:42,190



677
00:29:42,190 --> 00:29:43,559
PROFESSOR: Let's go for that.
教授：我们去吧。 

678
00:29:43,559 --> 00:29:45,480
So we have a dictionary.
因此，我们有一本字典。 

679
00:29:45,480 --> 00:29:48,779
For each vertex you have the list
对于每个顶点，您都有列表

680
00:29:48,779 --> 00:29:51,259
of vertices that are connected to it.
连接到它的顶点。 

681
00:29:51,259 --> 00:29:52,400
What's the list for A?
 A的清单是什么？ 

682
00:29:52,400 --> 00:29:55,730



683
00:29:55,730 --> 00:29:56,480
AUDIENCE: B and C?
听众：B和C？ 

684
00:29:56,480 --> 00:30:00,328



685
00:30:00,328 --> 00:30:01,869
PROFESSOR: OK, what's the list for B?
教授：好的，B的清单是什么？ 

686
00:30:01,869 --> 00:30:04,869



687
00:30:04,869 --> 00:30:18,794
AUDIENCE: A, D, and E.
听众：A，D和E。 

688
00:30:18,795 --> 00:30:19,670
PROFESSOR: All right.
教授：好的。 

689
00:30:19,670 --> 00:30:22,740
For Python this would be a dictionary, right?
对于Python，这将是字典，对吗？ 

690
00:30:22,740 --> 00:30:26,650
So how much total space does this take?
那么这需要多少总空间？ 

691
00:30:26,650 --> 00:30:28,477
AUDIENCE: The number of nodes?
听众：节点数？ 

692
00:30:28,477 --> 00:30:29,359
PROFESSOR: The number of--
教授：- 

693
00:30:29,559 --> 00:30:30,048
AUDIENCE: --nodes.
听众：--nodes。 

694
00:30:30,048 --> 00:30:32,482
Well, then there's also the space you made for the list,
好吧，那还有您为清单预留的空间， 

695
00:30:32,482 --> 00:30:32,982
though.
虽然。 

696
00:30:32,982 --> 00:30:36,730



697
00:30:36,730 --> 00:30:38,960
PROFESSOR: If these were actual slots in an array--
教授：如果这些是阵列中的实际插槽， 

698
00:30:38,960 --> 00:30:41,639
so this would be an array-- I would have the number of nodes.
所以这将是一个数组-我将拥有节点数。 

699
00:30:41,839 --> 00:30:44,339
You're giving away the answer to my next question.
您正在放弃我的下一个问题的答案。 

700
00:30:44,339 --> 00:30:45,759
So I have these slots here.
所以我在这里有这些插槽。 

701
00:30:45,759 --> 00:30:48,142



702
00:30:48,142 --> 00:30:48,899
This would be an array.
这将是一个数组。 

703
00:30:49,099 --> 00:30:51,476
It's order V just to store this.
 V只是为了存储它。 

704
00:30:51,477 --> 00:30:53,609
The thing in Python is that have these dictionaries that
 Python中的问题是具有这些字典

705
00:30:53,809 --> 00:30:57,849
are fancy hashes where they grow as you need them.
是花哨的哈希，它们会在您需要的地方增长。 

706
00:30:57,849 --> 00:30:59,879
For example, you have 10,000 vertices
例如，您有10,000个顶点

707
00:30:59,880 --> 00:31:01,700
but you don't have any edge.
但是你没有任何优势。 

708
00:31:01,700 --> 00:31:04,400
Your dictionary size is going to be order 1 because it only
您的字典大小将为1，因为它仅

709
00:31:04,400 --> 00:31:05,854
grows as you add edges to it.
随着您向其添加边缘而增加。 

710
00:31:05,854 --> 00:31:08,700



711
00:31:08,700 --> 00:31:11,220
So this is assuming that I don't store empty lists.
因此，这是假设我不存储空列表。 

712
00:31:11,220 --> 00:31:14,430
If I have a stray node here, if I
如果我在这里有一个杂散的节点

713
00:31:14,430 --> 00:31:20,119
have a node I-- say this is I-- if I don't store anything,
我有一个节点-说这是我-如果我什么都不存储， 

714
00:31:20,319 --> 00:31:21,599
I don't have to pay for it.
我不必为此付费。 

715
00:31:21,599 --> 00:31:25,019
If I store an empty list here, then I have to pay for it.
如果我在此处存储一个空列表，则必须付费。 

716
00:31:25,019 --> 00:31:29,079
There is an order V component that you mentioned.
您提到了V阶分量。 

717
00:31:29,079 --> 00:31:31,039
AUDIENCE: Let's say, if there's a graph there,
听众：假设有一张图表， 

718
00:31:31,039 --> 00:31:34,470
everything is not connected so there are a bunch of words
一切都没有连接，所以有一堆字

719
00:31:34,470 --> 00:31:35,450
instead.
代替。 

720
00:31:35,450 --> 00:31:38,362
Then in that case it would be order V, right?
那样的话就是五阶吧？ 

721
00:31:38,362 --> 00:31:40,119
PROFESSOR: It's order V if we store empty lists
教授：如果我们存储空列表，则为订单V 

722
00:31:40,319 --> 00:31:42,211
for the nodes that don't have edges.
对于没有边的节点。 

723
00:31:42,211 --> 00:31:43,115
AUDIENCE: Right.
听众：对。 

724
00:31:43,115 --> 00:31:45,329
And if none of the nodes have edges,
如果所有节点都没有边缘， 

725
00:31:45,329 --> 00:31:47,009
they're all unconnected--
他们都没有连接- 

726
00:31:47,009 --> 00:31:49,299
PROFESSOR: On the other hand, if I don't store anything
教授：另一方面，如果我什么都不存储

727
00:31:49,299 --> 00:31:51,383
for the nodes that don't have edges, it's order 1.
对于没有边的节点，顺序为1。 

728
00:31:51,383 --> 00:31:54,299



729
00:31:54,299 --> 00:31:59,240
AUDIENCE: If you get no edges do we do an empty list
观众：如果您没有优势，我们会做一个空清单

730
00:31:59,240 --> 00:32:01,480
or do we not store it?
还是我们不存储它？ 

731
00:32:01,480 --> 00:32:03,589
PROFESSOR: Depends on what you want.
教授：取决于您想要什么。 

732
00:32:03,589 --> 00:32:05,000
So if we store empty lists you're
因此，如果我们存储空列表， 

733
00:32:05,000 --> 00:32:06,559
going to have an order V cost here.
在这里要有一个订单V成本。 

734
00:32:06,559 --> 00:32:08,460
But your code is going to be simpler, presumably,
但是，您的代码可能会更简单， 

735
00:32:08,460 --> 00:32:10,092
because you don't have to check if something
因为您不必检查是否有东西

736
00:32:10,292 --> 00:32:12,429
is or isn't in the dictionary.
字典中是否存在。 

737
00:32:12,430 --> 00:32:14,039
How about this stuff?
那东西呢？ 

738
00:32:14,039 --> 00:32:18,163
What's the total size of this stuff here?
这个东西的总大小是多少？ 

739
00:32:18,163 --> 00:32:19,086
AUDIENCE: [INAUDIBLE].
听众：[听不清]。 

740
00:32:19,086 --> 00:32:21,547



741
00:32:21,547 --> 00:32:22,130
PROFESSOR: OK.
教授：好的。 

742
00:32:22,130 --> 00:32:28,700
Order E. How many elements do I have in here in total?
订单E。我总共有多少个元素？ 

743
00:32:28,700 --> 00:32:32,879



744
00:32:33,079 --> 00:32:35,939
In this thing here.
在这件事上。 

745
00:32:35,940 --> 00:32:41,008
So what's the sum of the length of the lists?
那么，列表长度的总和是多少？ 

746
00:32:41,008 --> 00:32:45,169
AUDIENCE: Average value of E times the number of vertices?
听众：E的平均值乘以顶点数？ 

747
00:32:45,369 --> 00:32:47,659
PROFESSOR: Let's go over something else.
教授：让我们再谈一谈。 

748
00:32:47,660 --> 00:32:48,950
AUDIENCE: The degree--
听众：学位- 

749
00:32:48,950 --> 00:32:49,825
PROFESSOR: All right.
教授：好的。 

750
00:32:49,825 --> 00:32:52,149
That's what I wanted to hear.
那就是我想听到的。 

751
00:32:52,349 --> 00:32:53,869
A lists its neighbors, right?
 A列出了邻居，对不对？ 

752
00:32:53,869 --> 00:32:56,519



753
00:32:56,519 --> 00:33:02,779
The number of neighbors that A has is the degree of A. B
 A拥有的邻居数是A的度数。 

754
00:33:02,779 --> 00:33:08,349
lists its neighbors, so this is the degree of B.
列出其邻居，所以这是B级。 

755
00:33:08,349 --> 00:33:13,549
If you sum up over all of them, what is the sum of all the
如果将它们全部加起来，那么所有

756
00:33:13,549 --> 00:33:15,750
agrees in the graph?
在图中同意吗？ 

757
00:33:15,750 --> 00:33:17,190
AUDIENCE: 2, E.
听众：2，E。 

758
00:33:17,190 --> 00:33:21,710
PROFESSOR: 2, E. We learned about this, right?
教授：2，E。我们了解到了，对吗？ 

759
00:33:21,710 --> 00:33:24,529
The handshaking lemma, 2, E. So what
握手引理2，E。那又怎样

760
00:33:24,529 --> 00:33:27,069
is the total cost for storing this data structure?
存储此数据结构的总成本是多少？ 

761
00:33:27,069 --> 00:33:32,781



762
00:33:32,781 --> 00:33:33,733
AUDIENCE: [INAUDIBLE].
听众：[听不清]。 

763
00:33:33,733 --> 00:33:36,589



764
00:33:36,589 --> 00:33:40,409
PROFESSOR: So V plus E, assuming empty lists.
教授：所以V加E，假设有空列表。 

765
00:33:40,410 --> 00:33:41,910
Let's look at another data structure
让我们看看另一个数据结构

766
00:33:41,910 --> 00:33:46,509
for storing things in a graph.
用于在图中存储事物。 

767
00:33:46,509 --> 00:33:50,779
So instead of using lists, let's use a matrix.
因此，我们不使用列表，而使用矩阵。 

768
00:33:50,779 --> 00:33:58,730
A, B, C, D, E on top, and A, B, C, D, E on the left.
顶部是A，B，C，D，E，左侧是A，B，C，D，E。 

769
00:33:58,730 --> 00:34:01,190
Let's pretend our graph is just that component over there.
让我们假装我们的图形就是那边的那个组件。 

770
00:34:01,190 --> 00:34:05,159
Otherwise, it just gets big and there's no extraneous site.
否则，它会变得很大，并且没有多余的站点。 

771
00:34:05,359 --> 00:34:09,253
Does anyone know how this is called?
有人知道这叫什么吗？ 

772
00:34:09,253 --> 00:34:10,670
If I put numbers here, does anyone
如果我把数字放在这里，有人吗

773
00:34:10,670 --> 00:34:12,920
know what this is called?
知道这叫什么吗？ 

774
00:34:12,920 --> 00:34:15,320
AUDIENCE: Is that a matrix?
听众：这是矩阵吗？ 

775
00:34:15,320 --> 00:34:17,931
PROFESSOR: There's a fancy name for it.
教授：有个花哨的名字。 

776
00:34:18,130 --> 00:34:18,963
It ends with matrix.
它以矩阵结尾。 

777
00:34:18,963 --> 00:34:21,529



778
00:34:21,530 --> 00:34:22,900
OK.
好。 

779
00:34:23,099 --> 00:34:25,789
I don't think we taught it to you, so don't worry.
我认为我们没有教给您，所以不用担心。 

780
00:34:25,789 --> 00:34:32,559
The fancy name is maybe it's misspelled, but something
花式的名称可能是拼写错误的，但有些东西

781
00:34:32,559 --> 00:34:35,820
that looks and sounds like this., adjacency matrix.
看起来和听起来像这样，邻接矩阵。 

782
00:34:35,820 --> 00:34:38,880



783
00:34:39,079 --> 00:34:39,579
Misspelled?
拼错了吗？ 

784
00:34:39,579 --> 00:34:42,594



785
00:34:42,594 --> 00:34:45,835
AUDIENCE: [INAUDIBLE].
听众：[听不清]。 

786
00:34:45,835 --> 00:34:48,559
PROFESSOR: I hope someone will help me.
教授：我希望有人能帮助我。 

787
00:34:48,559 --> 00:34:50,820
OK so if this is an adjacency matrix,
好的，如果这是一个邻接矩阵， 

788
00:34:50,820 --> 00:34:54,179
what should this element between B and A tell me?
 B和A之间的这个元素应该告诉我什么？ 

789
00:34:54,179 --> 00:34:58,230



790
00:34:58,230 --> 00:35:00,134
If it's an adjacency matrix, it better
如果是邻接矩阵，那就更好了

791
00:35:00,134 --> 00:35:01,300
tell me if they're adjacent.
告诉我他们是否相邻。 

792
00:35:01,300 --> 00:35:05,070
They're adjacent if they have an edge between them.
如果它们之间有边，它们就是相邻的。 

793
00:35:05,070 --> 00:35:08,527
For A and B, what does it happen to be?
对于A和B，这是怎么回事？ 

794
00:35:08,527 --> 00:35:09,110
AUDIENCE: One?
听众：一个？ 

795
00:35:09,110 --> 00:35:12,670



796
00:35:12,869 --> 00:35:13,480
PROFESSOR: OK.
教授：好的。 

797
00:35:13,480 --> 00:35:13,980
A and A?
 A和A？ 

798
00:35:13,980 --> 00:35:14,563
What do we do?
我们做什么？ 

799
00:35:14,563 --> 00:35:17,806



800
00:35:17,806 --> 00:35:18,880
AUDIENCE: What with 1?
听众：1代表什么？ 

801
00:35:18,880 --> 00:35:20,130
It's adjacent to itself.
它与自己相邻。 

802
00:35:20,130 --> 00:35:21,880
PROFESSOR: What's easier for the algorithm
教授：该算法更容易

803
00:35:21,880 --> 00:35:23,472
that you're trying to implement?
您正在尝试实施？ 

804
00:35:23,472 --> 00:35:24,380
AUDIENCE: 1?
听众：1？ 

805
00:35:24,380 --> 00:35:26,003
PROFESSOR: So it doesn't really matter.
教授：所以这并不重要。 

806
00:35:26,003 --> 00:35:28,139
We use 1's most of the time, but sometimes it's
我们大多数时候使用1，但有时

807
00:35:28,139 --> 00:35:30,982
easier to use a 0.
更容易使用0。 

808
00:35:30,983 --> 00:35:33,188
AUDIENCE: Then you can get to A from A, right?
听众：然后您可以从A到达A，对吗？ 

809
00:35:33,387 --> 00:35:34,349
PROFESSOR: Yeah.
教授：是的。 

810
00:35:34,349 --> 00:35:35,539
So that's why you'd use a 1.
这就是为什么要使用1。 

811
00:35:35,539 --> 00:35:37,414
Sometimes, though, you don't want to in code.
但是有时候，您不想编写代码。 

812
00:35:37,414 --> 00:35:40,759



813
00:35:40,760 --> 00:35:42,670
So someone dictate this to me.
所以有人命令我。 

814
00:35:42,869 --> 00:35:46,219
Or, everyone dictate this to me so I know it makes sense.
或者，每个人都对我说这句话，所以我知道这是有道理的。 

815
00:35:46,219 --> 00:35:48,725
A and C, is there an edge between them?
 A和C之间是否有优势？ 

816
00:35:48,726 --> 00:35:49,500
AUDIENCE: Yes.
听众：是的。 

817
00:35:49,699 --> 00:35:50,865
PROFESSOR: What do I write?
教授：我怎么写？ 

818
00:35:50,865 --> 00:35:51,588
AUDIENCE: 1.
听众：1。 

819
00:35:51,588 --> 00:35:52,380
PROFESSOR: A and D?
教授：A和D？ 

820
00:35:52,380 --> 00:35:56,440



821
00:35:56,440 --> 00:35:57,771
A and E?
 A和E？ 

822
00:35:57,771 --> 00:35:59,929
AUDIENCE: 0.
听众：0。 

823
00:35:59,929 --> 00:36:00,777
PROFESSOR: B, A?
教授：B，A？ 

824
00:36:00,777 --> 00:36:03,119
AUDIENCE: 1.
听众：1。 

825
00:36:03,119 --> 00:36:04,163
PROFESSOR: B, C?
教授：B，C？ 

826
00:36:04,164 --> 00:36:05,820
AUDIENCE: 0.
听众：0。 

827
00:36:06,019 --> 00:36:06,929
PROFESSOR: B, D?
教授：B，D？ 

828
00:36:06,929 --> 00:36:08,159
AUDIENCE: 1.
听众：1。 

829
00:36:08,159 --> 00:36:09,051
PROFESSOR: The E?
教授：E？ 

830
00:36:09,052 --> 00:36:10,440
AUDIENCE: 1.
听众：1。 

831
00:36:10,440 --> 00:36:11,599
PROFESSOR: OK.
教授：好的。 

832
00:36:11,599 --> 00:36:12,665
C, A?
 C，A？ 

833
00:36:12,666 --> 00:36:13,440
AUDIENCE: 1.
听众：1。 

834
00:36:13,639 --> 00:36:15,034
PROFESSOR: C, B?
教授：C，B？ 

835
00:36:15,034 --> 00:36:16,429
AUDIENCE: 2.
听众：2。 

836
00:36:16,429 --> 00:36:17,326
PROFESSOR: C, D?
教授：C，D？ 

837
00:36:17,326 --> 00:36:18,023
AUDIENCE: 1.
听众：1。 

838
00:36:18,023 --> 00:36:18,690
PROFESSOR: C, E?
教授：C，E？ 

839
00:36:18,690 --> 00:36:20,590
AUDIENCE: 0.
听众：0。 

840
00:36:20,590 --> 00:36:21,519
PROFESSOR: All right.
教授：好的。 

841
00:36:21,719 --> 00:36:23,289
Now I'm going to use the bits you
现在我要用你的零碎

842
00:36:23,289 --> 00:36:27,574
gave me to come to get this.
给我来拿这个。 

843
00:36:27,574 --> 00:36:29,539
Let's see if I can do it correctly.
让我们看看我是否可以正确地做到这一点。 

844
00:36:29,539 --> 00:36:31,121
And D?
和D？ 

845
00:36:31,121 --> 00:36:33,579
I'm not looking at the graph, by the way, I'm trusting you.
顺便说一句，我不是在看图表，而是在相信您。 

846
00:36:33,579 --> 00:36:35,203
So you better give me the right answer.
所以你最好给我正确的答案。 

847
00:36:35,204 --> 00:36:35,931
D?
 D吗

848
00:36:35,931 --> 00:36:36,429
AUDIENCE: 1.
听众：1。 

849
00:36:36,429 --> 00:36:41,759



850
00:36:41,760 --> 00:36:43,510
PROFESSOR: How many 1's do I have in this?
教授：我有几个1？ 

851
00:36:43,510 --> 00:36:50,072



852
00:36:50,271 --> 00:36:51,548
AUDIENCE: [INAUDIBLE].
听众：[听不清]。 

853
00:36:51,548 --> 00:36:53,340
PROFESSOR: To see if you guys are thinking.
教授：看看你们是否在想。 

854
00:36:53,340 --> 00:36:57,478



855
00:36:57,677 --> 00:36:59,123
AUDIENCE: 2, E? [INAUDIBLE].
听众：2，E？ [听不清]。 

856
00:36:59,123 --> 00:37:01,819



857
00:37:01,820 --> 00:37:05,507
PROFESSOR: Each edge contributes to two 1's, right?
教授：每个边都贡献两个1，对吗？ 

858
00:37:05,507 --> 00:37:07,090
And that accounts for most of the 1's.
这占了大多数的1。 

859
00:37:07,090 --> 00:37:09,824



860
00:37:10,023 --> 00:37:17,529
AUDIENCE: O plus V.
听众：O加V。 

861
00:37:17,530 --> 00:37:20,920
PROFESSOR: So this is how many 1's I have.
教授：这就是我有1个。 

862
00:37:20,920 --> 00:37:25,269
How many 0's do I have?
我有几个0？ 

863
00:37:25,269 --> 00:37:28,201
AUDIENCE: V squared minus 2, E plus V?
听众：V平方减去2，E加V？ 

864
00:37:28,201 --> 00:37:34,222



865
00:37:34,222 --> 00:37:35,480
PROFESSOR: This is a non-boring way
教授：这是一种无聊的方式

866
00:37:35,679 --> 00:37:38,288
of asking how many elements I have in this matrix.
问我在这个矩阵中有多少个元素。 

867
00:37:38,289 --> 00:37:39,380
This is what I was looking for.
这就是我想要的。 

868
00:37:39,579 --> 00:37:42,299



869
00:37:42,300 --> 00:37:47,070
So V columns, right?
那么V列吧？ 

870
00:37:47,070 --> 00:37:49,005
Zeros V squared's total elements.
零位V平方的总元素。 

871
00:37:49,005 --> 00:37:52,079



872
00:37:52,079 --> 00:37:54,869
How much memory do I need to store this?
我需要多少存储空间？ 

873
00:37:54,869 --> 00:37:55,746
AUDIENCE: V squared.
听众：V平方。 

874
00:37:55,746 --> 00:37:56,869
PROFESSOR: V squared. what?
教授：V平方。什么？ 

875
00:37:56,869 --> 00:38:00,019
If I want to store it as compactly as possible?
是否要尽可能紧凑地存储？ 

876
00:38:00,019 --> 00:38:01,860
I want to pack these as tight as I can.
我想尽可能地收紧它们。 

877
00:38:01,860 --> 00:38:04,650



878
00:38:04,650 --> 00:38:06,961
AUDIENCE: You mean you need the entire array arranged?
听众：您的意思是您需要排列整个阵列吗？ 

879
00:38:06,961 --> 00:38:08,420
PROFESSOR: Yes, so what do I store?
教授：是的，那我应该存储什么？ 

880
00:38:08,420 --> 00:38:09,512
V squared what?
 V平方什么？ 

881
00:38:09,512 --> 00:38:10,519
AUDIENCE: Oh, you mean units.
听众：哦，你的意思是单位。 

882
00:38:10,719 --> 00:38:11,385
PROFESSOR: Yeah.
教授：是的。 

883
00:38:11,385 --> 00:38:12,650
What's the unit?
什么单位

884
00:38:12,650 --> 00:38:13,610
AUDIENCE: 1 bit?
听众：1位？ 

885
00:38:13,610 --> 00:38:14,485
PROFESSOR: All right!
教授：好的！ 

886
00:38:14,485 --> 00:38:25,460
So V squared bits Whereas, this is V plus E words
因此，V个平方位是V加E字

887
00:38:25,460 --> 00:38:28,070
because you have to store pointers everywhere here.
因为您必须将指针存储在此处的所有位置。 

888
00:38:28,070 --> 00:38:30,440



889
00:38:30,639 --> 00:38:32,769
So sometimes if your graph is really dense
所以有时候如果你的图真的很密集

890
00:38:32,769 --> 00:38:34,670
you might prefer this representation.
您可能更喜欢这种表示形式。 

891
00:38:34,670 --> 00:38:38,670



892
00:38:38,670 --> 00:38:42,300
Let me see, how much do I have?
让我看看，我有多少？ 

893
00:38:42,300 --> 00:38:44,070
Oh, plenty of time.
哦，时间充裕。 

894
00:38:44,070 --> 00:38:47,840
Who remembers breadth-first search?
谁记得广度优先搜索？ 

895
00:38:47,840 --> 00:38:48,518
Yes?
是？ 

896
00:38:48,717 --> 00:38:51,007
AUDIENCE: Basically you just start at some node
听众：基本上，您只是从某个节点开始

897
00:38:51,007 --> 00:38:56,559
and you check all its neighbors, and check all those neighbors.
然后检查所有邻居，然后检查所有这些邻居。 

898
00:38:56,559 --> 00:38:57,514
PROFESSOR: All right.
教授：好的。 

899
00:38:57,514 --> 00:38:58,980
In breadth-first search we have a graph.
在广度优先搜索中，我们有一个图。 

900
00:38:59,179 --> 00:39:04,349



901
00:39:04,349 --> 00:39:06,799
What did I draw there?
我在那里画了什么？ 

902
00:39:06,800 --> 00:39:24,480
A. B, E. So suppose this is our graph.
 A. B，E.因此，假设这是我们的图形。 

903
00:39:24,480 --> 00:39:28,920
And I do a breadth-first search starting at A.
我从A开始进行广度优先的搜索。 

904
00:39:28,920 --> 00:39:29,909
How does that work?
这是如何运作的？ 

905
00:39:29,909 --> 00:39:32,469



906
00:39:32,469 --> 00:39:36,686
I started with the list of the nodes that I'm going to visit.
我从要访问的节点列表开始。 

907
00:39:36,686 --> 00:39:39,019
I initialization it with A because this is the only node
我用A初始化它，因为这是唯一的节点

908
00:39:39,019 --> 00:39:40,074
that I know about.
我知道的

909
00:39:40,074 --> 00:39:45,339



910
00:39:45,340 --> 00:39:47,900
What happens next?
接下来发生什么？ 

911
00:39:48,099 --> 00:39:49,884
AUDIENCE: It goes with B and C.
听众：与B和C并存。 

912
00:39:49,885 --> 00:39:50,760
PROFESSOR: All right.
教授：好的。 

913
00:39:50,760 --> 00:39:54,000
So I take out of the list the first thing that I can.
因此，我将第一件事从清单中删除。 

914
00:39:54,199 --> 00:39:55,899
This is my current node.
这是我当前的节点。 

915
00:39:55,900 --> 00:39:58,539
You said I visit B and C because they're the neighbors.
你说我拜访B和C是因为他们是邻居。 

916
00:39:58,539 --> 00:39:59,039
Right.
对。 

917
00:39:59,039 --> 00:40:02,230



918
00:40:02,230 --> 00:40:06,130
I took A out of the list.
我从列表中删除了A。 

919
00:40:06,130 --> 00:40:07,460
A was definitely visited.
肯定有人来过。 

920
00:40:07,460 --> 00:40:12,349
And I'm visiting B and C. What do I do when I visit them?
我正在访问B和C。访问B和C时该怎么办？ 

921
00:40:12,349 --> 00:40:13,811
AUDIENCE: Put them in the list.
听众：将它们放在列表中。 

922
00:40:13,811 --> 00:40:15,144
PROFESSOR: Put them in the list.
教授：将它们放在列表中。 

923
00:40:15,144 --> 00:40:18,630



924
00:40:18,630 --> 00:40:21,420
This means I discovered them and I'm going to visit the later.
这意味着我发现了它们，以后我将去参观。 

925
00:40:21,420 --> 00:40:23,590
So I discovered them and I know of their existence.
因此我发现了它们，并且知道了它们的存在。 

926
00:40:23,590 --> 00:40:26,525
What happens next?
接下来发生什么？ 

927
00:40:26,724 --> 00:40:29,319
AUDIENCE: Check if B is what you want.
听众：检查B是否是您想要的。 

928
00:40:29,320 --> 00:40:35,077
PROFESSOR: So B gets out of the list, and what do I do?
教授：所以B不在名单上，我该怎么办？ 

929
00:40:35,077 --> 00:40:36,949
AUDIENCE: Discover it's neighbors.
听众：发现它的邻居。 

930
00:40:36,949 --> 00:40:38,699
PROFESSOR: All right, so its neighborhoods
教授：好的，所以附近

931
00:40:38,699 --> 00:40:41,551
are A, B, and E. What Now?
是A，B和E。现在怎么办？ 

932
00:40:41,552 --> 00:40:42,925
AUDIENCE: If they haven't already
听众：如果他们还没有

933
00:40:42,925 --> 00:40:46,240
been on that list then add a [INAUDIBLE].
在该列表中，然后添加[音频不清晰]。 

934
00:40:46,240 --> 00:40:47,614
PROFESSOR: A was already visited.
教授：已经参观过。 

935
00:40:47,614 --> 00:40:48,844
D and E weren't.
 D和E不是。 

936
00:40:48,844 --> 00:40:52,409



937
00:40:52,409 --> 00:40:58,349
D and E, then what happens?
 D和E，然后会发生什么？ 

938
00:40:58,349 --> 00:41:01,943
AUDIENCE: Then you check C's neighbors.
听众：然后您检查C的邻居。 

939
00:41:01,943 --> 00:41:03,860
PROFESSOR: Any neighbor's that I haven't seen?
教授：我没见过邻居吗？ 

940
00:41:03,860 --> 00:41:05,320
Nope.
不。 

941
00:41:05,320 --> 00:41:06,347
Then?
然后？ 

942
00:41:06,547 --> 00:41:07,819
AUDIENCE: D?
听众：D？ 

943
00:41:07,820 --> 00:41:09,708
AUDIENCE: D and?
听众：D和？ 

944
00:41:09,708 --> 00:41:11,829
AUDIENCE: E.
听众：E. 

945
00:41:11,829 --> 00:41:12,170
PROFESSOR:OK.
教授：好的。 

946
00:41:12,369 --> 00:41:14,596
And then?
接着？ 

947
00:41:14,596 --> 00:41:16,137
PROFESSOR: I guess you could go to F,
教授：我想你可以去F 

948
00:41:16,137 --> 00:41:18,492
but it's not connected to anything.
但没有连接任何东西。 

949
00:41:18,492 --> 00:41:20,344
But how did you get A then, right?
但是你是怎么得到A的呢？ 

950
00:41:20,344 --> 00:41:21,760
PROFESSOR: So A is the first node.
教授：所以A是第一个节点。 

951
00:41:21,760 --> 00:41:23,300
I started with A because I said I'm
我从A开始，因为我说我

952
00:41:23,300 --> 00:41:26,000
doing a breadth-first search starting from A.
从A开始进行广度优先搜索。 

953
00:41:26,199 --> 00:41:29,489
So BFS starts from somewhere.
因此，BFS从某个地方开始。 

954
00:41:29,489 --> 00:41:32,109
A BFS has a source.
 BFS有一个源。 

955
00:41:32,110 --> 00:41:34,269
We'll see why that matters in a bit.
我们将稍等一下。 

956
00:41:34,269 --> 00:41:36,166
So you ever get to see F?
所以你曾经见过F吗？ 

957
00:41:36,166 --> 00:41:37,000
AUDIENCE: No.
听众：不。 

958
00:41:37,000 --> 00:41:37,666
PROFESSOR: Nope.
教授：不。 

959
00:41:37,666 --> 00:41:40,539



960
00:41:40,739 --> 00:41:43,169
So if I start at A what are the nodes that I visit
因此，如果我从A开始，我访问的节点是什么

961
00:41:43,170 --> 00:41:44,920
and what are the nodes that I don't visit?
我不访问哪些节点？ 

962
00:41:44,920 --> 00:41:47,608



963
00:41:47,608 --> 00:41:50,150
AUDIENCE: Well you visit all the ones in the connected graph.
听众：好吧，您访问了所连接图中的所有对象。 

964
00:41:50,150 --> 00:41:52,210
PROFESSOR: All right, in the connected component.
教授：好的，在连接的组件中。 

965
00:41:52,409 --> 00:41:54,784
So the whole graph can be connected or not connected.
因此，整个图可以连接或不连接。 

966
00:41:54,784 --> 00:41:57,949



967
00:41:57,949 --> 00:41:59,519
The nodes that I visit are the nodes
我访问的节点是节点

968
00:41:59,519 --> 00:42:02,190
in A's connected component because, by definition, those
在A的连接组件中，因为根据定义， 

969
00:42:02,190 --> 00:42:05,679
are the nodes that I can reach from A.
是我可以从A到达的节点。 

970
00:42:05,679 --> 00:42:07,230
If I have many kind of the components
如果我有很多种类的组件

971
00:42:07,230 --> 00:42:09,260
and I use BFS starting from one node,
我从一个节点开始使用BFS， 

972
00:42:09,260 --> 00:42:10,960
I might not visit the entire graph.
我可能不会访问整个图。 

973
00:42:11,159 --> 00:42:14,759



974
00:42:14,760 --> 00:42:17,260
How do I keep track of what node that I've discovered
我如何跟踪发现的节点

975
00:42:17,260 --> 00:42:18,094
and haven't discovered?
还没发现？ 

976
00:42:18,293 --> 00:42:20,460
What data structure do I use for these smiley faces?
这些笑脸应该使用什么数据结构？ 

977
00:42:20,460 --> 00:42:27,427



978
00:42:27,427 --> 00:42:29,339
AUDIENCE: [INAUDIBLE].
听众：[听不清]。 

979
00:42:29,340 --> 00:42:30,750
PROFESSOR:So for the smiley faces.
教授：所以笑脸。 

980
00:42:30,949 --> 00:42:33,375
For this thing I probably want a queue.
为此，我可能需要排队。 

981
00:42:33,376 --> 00:42:34,750
We'd teach you something simpler,
我们会教你一些简单的方法， 

982
00:42:34,750 --> 00:42:37,679
but most of the time when you write the code you
但是在大多数情况下，当您编写代码时， 

983
00:42:37,679 --> 00:42:39,619
actually use queue.
实际使用队列。 

984
00:42:39,619 --> 00:42:41,730
What do I want for the smiley faces?
我想要什么笑脸？ 

985
00:42:41,730 --> 00:42:45,005
When I pull a node out, say I pulled out B,
当我拉出节点时，说我拉出了B， 

986
00:42:45,005 --> 00:42:48,940
and I see A, D, E, I want to know that I visited A
我看到A，D，E，我想知道我去过A 

987
00:42:48,940 --> 00:42:51,289
and I didn't visit the D and E. You guys remember
我没有去D和E。你们还记得

988
00:42:51,489 --> 00:42:54,419
that we didn't visit D and E, right, by the time we got to 2?
在到达2时我们还没有访问D和E，对吗？ 

989
00:42:54,420 --> 00:42:55,190
OK.
好。 

990
00:42:55,190 --> 00:42:57,559
So I want to be able to check whether I visited a node
所以我想能够检查我是否访问过一个节点

991
00:42:57,559 --> 00:42:58,989
or not really fast.
或不是真的很快。 

992
00:42:58,989 --> 00:43:02,293
What data structure should I use for the smileys?
笑脸应该使用什么数据结构？ 

993
00:43:02,293 --> 00:43:03,481
AUDIENCE: A hash table.
受众：哈希表。 

994
00:43:03,481 --> 00:43:04,440
PROFESSOR: A has table.
教授：A有桌子。 

995
00:43:04,440 --> 00:43:04,938
Cool.
凉。 

996
00:43:04,938 --> 00:43:07,403
What's a hash table in Python?
什么是Python中的哈希表？ 

997
00:43:07,403 --> 00:43:08,706
AUDIENCE: A dictionary.
听众：字典。 

998
00:43:08,706 --> 00:43:09,706
PROFESSOR: A dictionary.
教授：字典。 

999
00:43:09,706 --> 00:43:12,629



1000
00:43:12,630 --> 00:43:15,940
All right, so this is going to be a seen, which
好吧，这将是一个可见的

1001
00:43:16,139 --> 00:43:22,059
is a dictionary, and it maps vertices to maybe true.
是一个字典，它将顶点映射为true。 

1002
00:43:22,059 --> 00:43:26,829



1003
00:43:26,829 --> 00:43:28,110
AUDIENCE: [INAUDIBLE].
听众：[听不清]。 

1004
00:43:28,110 --> 00:43:28,960
PROFESSOR:Yep.
教授：是的。 

1005
00:43:28,960 --> 00:43:30,157
Python has a set, right?
 Python有一套，对吧？ 

1006
00:43:30,157 --> 00:43:30,789
So you can use that.
因此您可以使用它。 

1007
00:43:30,989 --> 00:43:34,429



1008
00:43:34,429 --> 00:43:40,230
The smileys needs to be some sort of a dictionary.
笑脸必须是某种字典。 

1009
00:43:40,230 --> 00:43:43,510
So given that, and assuming that this
因此，假设

1010
00:43:43,510 --> 00:43:46,375
is a queue that we can extract and you
是我们可以提取的队列，您

1011
00:43:46,375 --> 00:43:48,505
can start from in constant time, what
可以从恒定的时间开始

1012
00:43:48,505 --> 00:43:49,629
is the running time of BFS?
是BFS的运行时间？ 

1013
00:43:49,630 --> 00:43:52,905



1014
00:43:52,905 --> 00:43:53,779
Let's make life easy.
让生活变得轻松。 

1015
00:43:53,780 --> 00:43:55,900
Let's assume the graph is connected and let's assume just
让我们假设图是连通的，让我们假设

1016
00:43:55,900 --> 00:43:56,460
doesn't exist.
不存在。 

1017
00:43:56,659 --> 00:44:00,199



1018
00:44:00,199 --> 00:44:01,514
BFS was the running time.
 BFS是运行时间。 

1019
00:44:01,514 --> 00:44:06,849



1020
00:44:06,849 --> 00:44:09,014
AUDIENCE: [INAUDIBLE] visiting.
听众：[听不清]来访。 

1021
00:44:09,014 --> 00:44:10,480
PROFESSOR: So you visit every node once,
教授：所以您一次访问每个节点， 

1022
00:44:10,679 --> 00:44:13,029
so it's at least V. That's a start.
所以至少是V。这是一个开始。 

1023
00:44:13,030 --> 00:44:15,574
Now what do you do when you visit the node?
现在，当您访问该节点时您会做什么？ 

1024
00:44:15,773 --> 00:44:17,690
AUDIENCE: Check out all the--
观众：查看所有- 

1025
00:44:17,690 --> 00:44:19,539
PROFESSOR: All the neighbors, right?
教授：所有邻居，对吗？ 

1026
00:44:19,739 --> 00:44:21,929
Given the node, you have to go to the data structure
给定节点，您必须转到数据结构

1027
00:44:21,929 --> 00:44:24,250
that you have that's either this or this,
你拥有的就是这个或这个， 

1028
00:44:24,250 --> 00:44:27,150
and you have to get a list of neighbors.
你必须得到邻居名单。 

1029
00:44:27,150 --> 00:44:29,500
If I have this data structure, how fast
如果我有这个数据结构，多快

1030
00:44:29,699 --> 00:44:31,929
do I get a list of neighbors for a node?
如何获取节点的邻居列表？ 

1031
00:44:31,929 --> 00:44:34,184
AUDIENCE: Order of the degree?
听众：学位的顺序？ 

1032
00:44:34,184 --> 00:44:34,809
PROFESSOR: Yep.
教授：是的。 

1033
00:44:34,809 --> 00:44:36,159
Order of the degree of the node.
节点度的顺序。 

1034
00:44:36,159 --> 00:44:36,809
That's good.
那很好。 

1035
00:44:36,809 --> 00:44:38,299
How about this data structure?
这个数据结构怎么样？ 

1036
00:44:38,300 --> 00:44:43,701



1037
00:44:43,701 --> 00:44:46,659
AUDIENCE: Same-- oh, no that's order of V.
听众：一样-哦，不，这是V的顺序。 

1038
00:44:46,659 --> 00:44:47,509
PROFESSOR: Yep.
教授：是的。 

1039
00:44:47,510 --> 00:44:49,900
So in this data structure, for example, C only
因此，在此数据结构中，例如，仅C 

1040
00:44:49,900 --> 00:44:55,019
has two edges coming out of it.
有两个边缘出来。 

1041
00:44:55,019 --> 00:44:57,539
But I have to go through the entire lining of the matrix
但是我必须遍历整个矩阵

1042
00:44:57,539 --> 00:45:01,130
to see where I have my 0's and where I have my 1's.
看看我的0在哪里，我的1在哪里。 

1043
00:45:01,130 --> 00:45:04,690
In order to list the neighbors, here is straight up order V,
为了列出邻居，这是直接向上的顺序V， 

1044
00:45:04,889 --> 00:45:11,420
whereas this is order of the degree of the node
而这是节点度数的顺序

1045
00:45:11,420 --> 00:45:15,019
that I'm looking for.
我在寻找。 

1046
00:45:15,019 --> 00:45:17,228
So for this, where it's nice and simple, order of V,
因此，在这很简单的地方，V的阶数

1047
00:45:17,228 --> 00:45:18,519
what is the total running time?
总运行时间是多少？ 

1048
00:45:18,519 --> 00:45:22,384



1049
00:45:22,384 --> 00:45:25,039
AUDIENCE: Wait, because it's B plus B. Oh no, it's
听众：等等，因为它是B加B。哦，不，这是

1050
00:45:25,039 --> 00:45:27,230
the same one.
同一个。 

1051
00:45:27,230 --> 00:45:28,860
PROFESSOR: So for each node I have to?
教授：那么对于每个节点我都必须？ 

1052
00:45:28,860 --> 00:45:29,507
AUDIENCE: V squared.
听众：V平方。 

1053
00:45:29,706 --> 00:45:30,289
PROFESSOR: OK.
教授：好的。 

1054
00:45:30,289 --> 00:45:33,679



1055
00:45:33,679 --> 00:45:36,949
So we're up to V squared already.
所以我们已经达到V平方了。 

1056
00:45:36,949 --> 00:45:38,194
What else do we need to do?
我们还需要做什么？ 

1057
00:45:38,195 --> 00:45:42,690



1058
00:45:42,889 --> 00:45:45,264
Anything that they need to do on a node is order of V,
他们在节点上需要做的任何事情都是V的阶数， 

1059
00:45:45,264 --> 00:45:47,389
so V squared is going to be the total running time.
因此V平方将是总运行时间。 

1060
00:45:47,389 --> 00:45:48,589
That's it.
而已。 

1061
00:45:48,590 --> 00:45:51,980
So if we use an adjacency matrix we
因此，如果我们使用邻接矩阵， 

1062
00:45:51,980 --> 00:45:56,340
get order of V squared as the total running time.
将V的阶次平方作为总运行时间。 

1063
00:45:56,340 --> 00:45:59,655
What about if we lists, what the running time?
如果我们列出该如何运行？ 

1064
00:45:59,655 --> 00:46:00,530
I'll give you a hint.
我会给你一个提示。 

1065
00:46:00,530 --> 00:46:02,940
You have to use amortized analysis.
您必须使用摊销分析。 

1066
00:46:03,139 --> 00:46:05,230
Shivers anyone?
怕谁？ 

1067
00:46:05,230 --> 00:46:07,574
[LAUGHTER]
 [笑声] 

1068
00:46:07,574 --> 00:46:08,789
We know it's order V because we're
我们知道它是V阶，因为

1069
00:46:08,989 --> 00:46:11,349
going to visit every node.
去拜访每个节点。 

1070
00:46:11,349 --> 00:46:14,139
And you guys didn't see what I was going to write here.
你们没看到我要在这里写的内容。 

1071
00:46:14,139 --> 00:46:15,161
[LAUGHTER]
 [笑声] 

1072
00:46:15,360 --> 00:46:15,859
OK.
好。 

1073
00:46:15,860 --> 00:46:18,269
So for every node I go through the neighbors
因此，对于每个节点，我都会穿越邻居

1074
00:46:18,269 --> 00:46:19,659
and I do something to them.
我为他们做点事。 

1075
00:46:19,659 --> 00:46:20,159
Right?
对？ 

1076
00:46:20,159 --> 00:46:22,489
I check if they're in seen, if not then I
我检查他们是否在看，如果没有，我

1077
00:46:22,489 --> 00:46:25,819
add them to the list.
将它们添加到列表中。 

1078
00:46:25,820 --> 00:46:29,614
So for every node the work is?
那么每个节点的工作是什么？ 

1079
00:46:29,813 --> 00:46:31,619
AUDIENCE: it's degrees.
听众：是度。 

1080
00:46:31,619 --> 00:46:32,940
PROFESSOR: Yep.
教授：是的。 

1081
00:46:32,940 --> 00:46:35,416
So if I look at all the nodes?
那么，如果我查看所有节点？ 

1082
00:46:35,416 --> 00:46:36,835
AUDIENCE: That's E.
听众：就是E。 

1083
00:46:37,034 --> 00:46:37,659
PROFESSOR: Yep.
教授：是的。 

1084
00:46:37,659 --> 00:46:41,009



1085
00:46:41,010 --> 00:46:42,980
For every node I have to look at its neighbors
对于每个节点，我必须查看其邻居

1086
00:46:43,179 --> 00:46:45,406
and I have to see which neighbors are in seen.
我必须看看有哪些邻居。 

1087
00:46:45,407 --> 00:46:46,789
For the neighbors that are not in seen
对于看不见的邻居

1088
00:46:46,989 --> 00:46:50,889
I have to add to my queue.
我必须添加到队列中。 

1089
00:46:50,889 --> 00:46:53,230
Checking if a neighbor is in seen or not is order 1.
检查邻居是否在视线中。 

1090
00:46:53,230 --> 00:46:55,619
Adding it to the queue is order 1.
将其添加到队列是订单1。 

1091
00:46:55,619 --> 00:46:57,429
So the total work for a node is order
因此，节点的总工作量是订单

1092
00:46:57,429 --> 00:47:04,389
of neighbors because of the adjacency list, not matrix.
因为邻接表而不是矩阵。 

1093
00:47:04,389 --> 00:47:06,589
If I look at the entire graph, here I
如果我看整个图，我在这里

1094
00:47:06,590 --> 00:47:08,641
can't do a local analysis like I did before.
不能像以前一样进行本地分析。 

1095
00:47:08,641 --> 00:47:11,014
If I look at the entire graph and I look at all the nodes
如果我看整个图，我看所有节点

1096
00:47:11,014 --> 00:47:14,739
slash vertices, then the total work
斜线顶点，然后是总功

1097
00:47:14,739 --> 00:47:17,489
is the sum of their degrees.
是他们度数的总和。 

1098
00:47:17,489 --> 00:47:18,669
For each node is degree.
对于每个节点都是度。 

1099
00:47:18,670 --> 00:47:19,920
For total work, sum of the degrees.
对于总功，度的和。 

1100
00:47:19,920 --> 00:47:21,503
And I have that nice handshaking lemma
我有一个很好的握手引理

1101
00:47:21,503 --> 00:47:24,550
that says that the sum of the degrees is 2,
那表示度数的总和是2 

1102
00:47:24,550 --> 00:47:27,610
E. So order E. So total running time?
 E.那么订购E.这样总的运行时间？ 

1103
00:47:27,610 --> 00:47:32,860
V plus E.
 V加E。 

1104
00:47:32,860 --> 00:47:37,030
OK, can I say that the running time is order E?
好，我可以说运行时间是E阶吗？ 

1105
00:47:37,030 --> 00:47:38,766
With no V's?
没有V吗？ 

1106
00:47:38,965 --> 00:47:41,007
AUDIENCE: No, because you have to look at every--
听众：不，因为您必须审视每个- 

1107
00:47:41,007 --> 00:47:44,934



1108
00:47:44,934 --> 00:47:46,382
PROFESSOR: Is it?
教授：是吗？ 

1109
00:47:46,382 --> 00:47:47,880
AUDIENCE: V greater than [INAUDIBLE]
听众：V大于[听不清] 

1110
00:47:47,880 --> 00:47:50,723
in case of not connected components?
如果未连接组件？ 

1111
00:47:50,724 --> 00:47:51,440
AUDIENCE: [INAUDIBLE].
听众：[听不清]。 

1112
00:47:51,639 --> 00:48:01,547



1113
00:48:01,547 --> 00:48:03,130
AUDIENCE: It's possible that you could
听众：您可能会

1114
00:48:03,130 --> 00:48:06,886
have more vertices than edges--
顶点比边多- 

1115
00:48:06,887 --> 00:48:07,269
PROFESSOR: OK.
教授：好的。 

1116
00:48:07,469 --> 00:48:10,919
So it's possible that I have more vertices than edges.
因此，我的顶点比边缘多。 

1117
00:48:10,920 --> 00:48:13,019
I agree with that, but I do anything to the vertices
我同意这一点，但是我对顶点做任何事情

1118
00:48:13,219 --> 00:48:14,079
that I haven't seen?
我没见过？ 

1119
00:48:14,079 --> 00:48:24,219



1120
00:48:24,219 --> 00:48:26,080
So this is subtle.
所以这很微妙。 

1121
00:48:26,081 --> 00:48:28,860
The difference between this and this
这个和这个之间的区别

1122
00:48:28,860 --> 00:48:31,769
is a matter of how you implement everything.
与如何实现所有事情有关。 

1123
00:48:31,769 --> 00:48:34,980
In CLRS they assume that the seen is an array.
在CLRS中，他们假定所见是数组。 

1124
00:48:34,980 --> 00:48:38,219
So all of their nodes have numbers from 1 to V.
因此，它们的所有节点都有从1到V的数字。 

1125
00:48:38,219 --> 00:48:40,739
So then they initialize an array, everything is false,
所以他们初始化了一个数组，一切都是假的， 

1126
00:48:40,739 --> 00:48:42,879
and then they set the true elements.
然后他们设置了真正的元素。 

1127
00:48:42,880 --> 00:48:44,255
In Python we can use a dictionary
在Python中，我们可以使用字典

1128
00:48:44,255 --> 00:48:47,010
and not initialize it with anything.
而不用任何东西初始化它。 

1129
00:48:47,010 --> 00:48:49,750
So if you do it that way in Python and code carefully,
因此，如果您使用Python进行这种操作并仔细编写代码， 

1130
00:48:49,750 --> 00:48:53,320
you can get to order E. The parts of the graph
您可以订购E。图表的各个部分

1131
00:48:53,320 --> 00:48:55,730
that you don't discover, you don't have to pay for them.
您不会发现的，您不必为它们付费。 

1132
00:48:55,929 --> 00:48:58,009
If you look at CLRS code, it is definitely
如果您查看CLRS代码，那肯定是

1133
00:48:58,010 --> 00:49:02,210
V plus E. The difference between this and this
 V加E。此与此之间的差异

1134
00:49:02,210 --> 00:49:04,849
depends on the code.
取决于代码。 

1135
00:49:04,849 --> 00:49:07,000
What's the point of BFS, by the way?
顺便说一下，BFS的意义是什么？ 

1136
00:49:07,000 --> 00:49:07,739
Why do we care?
我们为什么在乎？ 

1137
00:49:07,739 --> 00:49:08,849
What does it give us?
它给我们带来什么？ 

1138
00:49:08,849 --> 00:49:12,139



1139
00:49:12,139 --> 00:49:15,869
AUDIENCE: The shortest word path.
听众：最短的单词路径。 

1140
00:49:15,869 --> 00:49:19,105
PROFESSOR:The shortest path from point?
教授：到点的最短路径？ 

1141
00:49:19,105 --> 00:49:22,449
AUDIENCE: From your start to where you're going.
听众：从一开始到您要去的地方。 

1142
00:49:22,449 --> 00:49:26,649
PROFESSOR:So it gives you the shortest path from the node
教授：因此，它为您提供了距节点最短的路径

1143
00:49:26,650 --> 00:49:29,610
that I'm starting the BFS from.
我从这里开始BFS。 

1144
00:49:29,610 --> 00:49:32,590
So only from this node?
那么只能从这个节点开始吗？ 

1145
00:49:32,590 --> 00:49:34,630
If I start BFS at A it's going to give me
如果我从A开始BFS，它将给我

1146
00:49:34,630 --> 00:49:37,940
the length of the shortest path from A to which node?
从A到哪个节点的最短路径的长度？ 

1147
00:49:38,139 --> 00:49:41,429



1148
00:49:41,429 --> 00:49:44,208
AUDIENCE: [INAUDIBLE].
听众：[听不清]。 

1149
00:49:44,208 --> 00:49:45,250
PROFESSOR: All the nodes?
教授：所有节点？ 

1150
00:49:45,250 --> 00:49:45,994
AUDIENCE: Yeah.
听众：是的。 

1151
00:49:45,994 --> 00:49:47,369
PROFESSOR: All the nodes that are
教授：所有的节点

1152
00:49:47,369 --> 00:49:51,449
visited by BFS are reachable and we have a path from them.
 BFS所访问的地方都是可以到达的，我们有一条通往之路。 

1153
00:49:51,449 --> 00:49:53,859
How do you compute this distance?
您如何计算此距离？ 

1154
00:49:53,860 --> 00:49:57,003
Let's see, so what's the distance from A to A?
让我们看看，从A到A的距离是多少？ 

1155
00:49:57,003 --> 00:49:57,728
AUDIENCE: 0?
听众：0？ 

1156
00:49:57,728 --> 00:49:58,269
PROFESSOR: 0.
教授：0。 

1157
00:49:58,269 --> 00:50:00,860



1158
00:50:00,860 --> 00:50:03,750
When I start from A and I see that its neighbors are B and C,
当我从A开始时，我发现它的邻居是B和C， 

1159
00:50:03,750 --> 00:50:08,322
what's the distance from A to B and from A to C?
 A到B以及A到C的距离是多少？ 

1160
00:50:08,322 --> 00:50:09,239
AUDIENCE: [INAUDIBLE].
听众：[听不清]。 

1161
00:50:09,239 --> 00:50:11,737



1162
00:50:11,737 --> 00:50:12,320
PROFESSOR: OK.
教授：好的。 

1163
00:50:12,320 --> 00:50:16,750
Now I look at B. What's the distance between A and A?
现在我看一下B。A和A之间的距离是多少？ 

1164
00:50:16,949 --> 00:50:19,693
A is B's neighbor.
 A是B的邻居。 

1165
00:50:19,693 --> 00:50:20,853
AUDIENCE: With A and A?
听众：和A和A？ 

1166
00:50:20,853 --> 00:50:21,519
PROFESSOR: Yeah.
教授：是的。 

1167
00:50:21,519 --> 00:50:23,630
So I have three neighbors.
所以我有三个邻居。 

1168
00:50:23,630 --> 00:50:26,400
B has three neighbors, A, D, and E.
 B具有三个邻居A，D和E。 

1169
00:50:26,400 --> 00:50:35,309
So I care about the distances between A and A, D, E. Distance
所以我在乎A与A，D，E之间的距离。 

1170
00:50:35,309 --> 00:50:44,230
A, A, distance A, D, and distance A, E. This one is 0.
 A，A，距离A，D和距离A，E。这是0。 

1171
00:50:44,230 --> 00:50:48,619
How about the distances between A and D and A and E?
 A和D之间以及A和E之间的距离如何？ 

1172
00:50:48,619 --> 00:50:49,349
They're 2.
他们是2岁

1173
00:50:49,349 --> 00:50:52,929



1174
00:50:52,929 --> 00:50:55,375
So the way I would compute these distances
所以我计算这些距离的方式

1175
00:50:55,375 --> 00:50:57,909
is that I start with A being 0.
是从A为0开始的

1176
00:50:57,909 --> 00:50:59,829
The distance from A to A is 0.
 A到A的距离是0。 

1177
00:50:59,829 --> 00:51:03,119
And then when I look at a node, when I discover the neighbors,
然后当我看着一个节点，当我发现邻居时， 

1178
00:51:03,119 --> 00:51:05,519
all the neighbors that don't have smiley faces on them
所有没有笑脸的邻居

1179
00:51:05,519 --> 00:51:08,106
get the node's distance plus 1.
得到节点的距离加1。 

1180
00:51:08,106 --> 00:51:10,190
You can get to them by getting in the current node
您可以通过进入当前节点来找到他们

1181
00:51:10,190 --> 00:51:12,539
and then traversing an edge.
然后穿越边缘。 

1182
00:51:12,739 --> 00:51:15,149
When you do that it's important that you don't update
当您这样做时，请务必不要更新

1183
00:51:15,150 --> 00:51:17,340
the distances of the nodes that have smiley faces.
带有笑脸的节点的距离。 

1184
00:51:17,340 --> 00:51:19,840
If you do, you're going to say that the distance from A to A
如果这样做，您会说从A到A的距离

1185
00:51:19,840 --> 00:51:22,690
is 2 and all hell breaks lose from there.
是2，所有的地狱突破都会从那里消失。 

1186
00:51:22,889 --> 00:51:25,520



1187
00:51:25,521 --> 00:51:27,519
AUDIENCE: Wait, why would you say it would be 2?
听众：等等，你为什么要说是2？ 

1188
00:51:27,519 --> 00:51:30,820
PROFESSOR: If I forget the fact that it has a smiley face.
教授：如果我忘记了它有一张笑脸的事实。 

1189
00:51:30,820 --> 00:51:33,360
So if I go through all these neighbors
所以如果我穿过所有这些邻居

1190
00:51:33,360 --> 00:51:34,940
and I say the distance from A to B
我说从A到B的距离

1191
00:51:35,139 --> 00:51:39,179
is one then the distance from A to all of B's neighbors
是A到B的所有邻居的距离

1192
00:51:39,179 --> 00:51:41,329
has to be 2.
必须为2。 

1193
00:51:41,329 --> 00:51:43,003
That would be wrong.
那是错误的。 

1194
00:51:43,003 --> 00:51:44,420
AUDIENCE: Wait, from A to all of--
听众：等等，从A到所有

1195
00:51:44,420 --> 00:51:46,500
PROFESSOR: B's neighbors.
教授：B的邻居。 

1196
00:51:46,500 --> 00:51:48,750
AUDIENCE: From A to all of-- Oh, because A is one Of--
听众：从A到全部-哦，因为A是其中的一个- 

1197
00:51:48,750 --> 00:51:49,862
PROFESSOR: B's neighbors.
教授：B的邻居。 

1198
00:51:49,862 --> 00:51:51,039
AUDIENCE: Yeah OK.
听众：好的。 

1199
00:51:51,239 --> 00:51:53,909
PROFESSOR: The smileys tell me which
教授：笑脸告诉我

1200
00:51:53,909 --> 00:51:56,349
vertices I've already seen and I've already,
我已经看到并且已经出现过的顶点

1201
00:51:56,349 --> 00:51:58,449
presumably computed distances for them.
大概计算出它们的距离。 

1202
00:51:58,449 --> 00:52:01,960
We don't want to update those.
我们不想更新这些。 

1203
00:52:01,960 --> 00:52:04,230
OK this is BFS in essence.
好的，这本质上是BFS。 

1204
00:52:04,230 --> 00:52:05,960
One question.
一个问题。 

1205
00:52:05,960 --> 00:52:08,130
Between Facebook and Twitter, which one's directed
在Facebook和Twitter之间，由某人指挥

1206
00:52:08,130 --> 00:52:09,255
and which one's undirected?
以及哪个是非定向的？ 

1207
00:52:09,255 --> 00:52:12,670



1208
00:52:12,670 --> 00:52:15,019
AUDIENCE: Facebook is undirected.
听众：Facebook是无向的。 

1209
00:52:15,019 --> 00:52:15,920
PROFESSOR: OK.
教授：好的。 

1210
00:52:15,920 --> 00:52:23,769
Facebook is undirected.
 Facebook是无向的。 

1211
00:52:23,969 --> 00:52:27,661
Why is it undirected?
为什么是无向的？ 

1212
00:52:27,661 --> 00:52:28,689
AUDIENCE: [INAUDIBLE].
听众：[听不清]。 

1213
00:52:28,690 --> 00:52:29,606
AUDIENCE: [INAUDIBLE].
听众：[听不清]。 

1214
00:52:29,606 --> 00:52:33,717



1215
00:52:33,717 --> 00:52:36,050
AUDIENCE: When you follow someone they don't necessarily
听众：当您跟随某人时，他们不一定

1216
00:52:36,050 --> 00:52:37,177
follow you.
跟随你。 

1217
00:52:37,177 --> 00:52:37,760
PROFESSOR: OK.
教授：好的。 

1218
00:52:37,760 --> 00:52:38,643
So this is Twitter, right?
这就是Twitter，对不对？ 

1219
00:52:38,842 --> 00:52:42,629



1220
00:52:42,630 --> 00:52:49,230
Twitter, directed because of follows.
 Twitter，由于以下原因而被导演。 

1221
00:52:49,429 --> 00:52:50,980
Has anyone used Facebook recently?
最近有没有人使用Facebook？ 

1222
00:52:50,980 --> 00:52:53,460
Did you guys see there's a new option?
你们看到新的选择了吗？ 

1223
00:52:53,460 --> 00:52:56,440
AUDIENCE: The little scroll bar on the side?
听众：侧面的小滚动条？ 

1224
00:52:56,440 --> 00:52:57,500
PROFESSOR: Subscribers.
教授：订户。 

1225
00:52:57,699 --> 00:52:59,169
AUDIENCE: Oh, ya.
听众：哦，是的。 

1226
00:52:59,170 --> 00:53:01,454
PROFESSOR: OK, so how do subscribers work?
教授：好的，订户如何工作？ 

1227
00:53:01,454 --> 00:53:02,454
AUDIENCE: You subscribe.
听众：您订阅。 

1228
00:53:02,454 --> 00:53:04,394
It's like google plus.
就像谷歌加。 

1229
00:53:04,394 --> 00:53:05,336
[LAUGHTER]
 [笑声] 

1230
00:53:05,336 --> 00:53:05,920
PROFESSOR: OK.
教授：好的。 

1231
00:53:05,920 --> 00:53:07,019
Directed are undirected?
定向是非定向的吗？ 

1232
00:53:07,219 --> 00:53:10,230
If I subscribe to you do you have to subscribe to me?
如果我订阅了您，您是否必须订阅我？ 

1233
00:53:10,231 --> 00:53:10,822
AUDIENCE: Directed.
听众：导演。 

1234
00:53:11,021 --> 00:53:20,409



1235
00:53:20,409 --> 00:53:22,670
PROFESSOR: So which one is it?
教授：那是哪一个？ 

1236
00:53:22,670 --> 00:53:24,753
AUDIENCE: I guess Facebook is kind of directed now
观众：我想Facebook现在是导演

1237
00:53:24,753 --> 00:53:28,210
because you can unsubscribe from people.
因为您可以取消订阅人。 

1238
00:53:28,210 --> 00:53:30,409
PROFESSOR: Is it?
教授：是吗？ 

1239
00:53:30,409 --> 00:53:33,319
So Facebook has two graphs in it.
因此，Facebook中有两个图表。 

1240
00:53:33,320 --> 00:53:35,019
They happen to have the same vertices.
它们碰巧具有相同的顶点。 

1241
00:53:35,019 --> 00:53:37,739
The people are the vertices in both graphs.
人物是两个图中的顶点。 

1242
00:53:37,739 --> 00:53:43,349
But the friends relationship defines an undirected graph.
但是朋友关系定义了无向图。 

1243
00:53:43,349 --> 00:53:46,750
The subscribers relationship defines a directed graph.
订户关系定义了有向图。 

1244
00:53:46,750 --> 00:53:48,498
The graphs are completely different.
这些图完全不同。 

1245
00:53:48,498 --> 00:53:49,539
And there are two graphs.
并且有两个图。 

1246
00:53:49,539 --> 00:53:52,364
That's the right way to reason about them.
这是对它们进行推理的正确方法。 

1247
00:53:52,364 --> 00:53:53,780
that's why it was slightly tricky.
这就是为什么它有些棘手。 

1248
00:53:53,780 --> 00:53:56,840



1249
00:53:57,039 --> 00:54:00,179
Can someone think of a cool way to use BFS on Facebook?
有人可以想到在Facebook上使用BFS的好方法吗？ 

1250
00:54:00,179 --> 00:54:03,469



1251
00:54:03,469 --> 00:54:05,123
AUDIENCE: That's networks, right?
听众：那是网络，对吗？ 

1252
00:54:05,123 --> 00:54:07,289
Figuring out how many people are in the first degree
弄清楚有多少人在第一学位

1253
00:54:07,289 --> 00:54:09,259
or second degree.
或第二学位。 

1254
00:54:09,260 --> 00:54:10,632
MySpace was really into that.
 MySpace确实参与其中。 

1255
00:54:10,632 --> 00:54:12,340
PROFESSOR: Lincoln also does that, right?
教授：林肯也这样做，对吗？ 

1256
00:54:12,340 --> 00:54:13,721
How many people are your friends?
你的朋友有几个？ 

1257
00:54:13,721 --> 00:54:15,469
How many people are your friend's friends?
您朋友的朋友有多少人？ 

1258
00:54:15,469 --> 00:54:17,730
So and so forth.
等等。 

1259
00:54:17,730 --> 00:54:21,485
Now suppose you want to get to someone in Facebook
现在假设您想在Facebook上结识某人

1260
00:54:21,485 --> 00:54:22,859
and you don't know them directly.
而且您不直接认识他们。 

1261
00:54:22,860 --> 00:54:25,190
They're not your friends.
他们不是你的朋友。 

1262
00:54:25,190 --> 00:54:27,170
Presumably, you want to get to them
想必您想去找他们

1263
00:54:27,170 --> 00:54:29,039
through the minimum amount of effort.
通过最少的努力。 

1264
00:54:29,239 --> 00:54:32,609
So you want to see do you have a friend that knows them?
所以你想看看你有没有一个认识他们的朋友？ 

1265
00:54:32,610 --> 00:54:34,010
If not, do you have a friend that
如果没有，你有没有一个朋友

1266
00:54:34,010 --> 00:54:35,130
knows a friend that knows them?
认识一个认识他们的朋友吗？ 

1267
00:54:35,130 --> 00:54:36,590
Do you have a friend that knows a friend that
你有认识一个朋友的朋友吗

1268
00:54:36,590 --> 00:54:37,681
knows a friend that knows them?
认识一个认识他们的朋友吗？ 

1269
00:54:37,880 --> 00:54:38,779
So and so forth.
等等。 

1270
00:54:38,780 --> 00:54:40,757
So BFS will give you that minimum path.
因此，BFS将为您提供最小路径。 

1271
00:54:40,956 --> 00:54:43,710



1272
00:54:43,710 --> 00:54:44,209
OK.
好。 

1273
00:54:44,210 --> 00:54:45,943
do the graphs make sense?
这些图有意义吗？ 

1274
00:54:46,143 --> 00:54:47,559
So by the way, the BFS on Facebook
顺便说一下，Facebook上的BFS 

1275
00:54:47,559 --> 00:54:50,150
is just the beginning of a ton of cool things
只是很多有趣事物的开始

1276
00:54:50,150 --> 00:54:51,833
you can with graph algorithms.
您可以使用图算法。 

1277
00:54:51,833 --> 00:54:56,833



