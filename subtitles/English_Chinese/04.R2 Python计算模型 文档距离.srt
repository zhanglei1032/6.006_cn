1
00:00:00,000 --> 00:00:00,080



2
00:00:00,080 --> 00:00:01,770
The following content is provided
提供以下内容

3
00:00:01,770 --> 00:00:04,009
under a Creative Commons license.
根据知识共享许可。 

4
00:00:04,009 --> 00:00:06,859
Your support will help MIT OpenCourseWare continue
您的支持将帮助MIT OpenCourseWare继续

5
00:00:06,860 --> 00:00:10,720
to offer high quality educational resources for free.
免费提供高质量的教育资源。 

6
00:00:10,720 --> 00:00:13,339
To make a donation or view additional materials
捐款或查看其他材料

7
00:00:13,339 --> 00:00:17,207
from hundreds of MIT courses, visit MIT OpenCourseWare
从数百门麻省理工学院的课程中，访问MIT OpenCourseWare 

8
00:00:17,207 --> 00:00:17,832
at ocw.mit.edu.
在ocw.mit.edu。 

9
00:00:17,832 --> 00:00:20,548



10
00:00:20,748 --> 00:00:23,039
VICTOR COSTAN: So I'm excited about today's recitation,
维克多·科斯坦：我对今天的朗诵感到很兴奋， 

11
00:00:23,039 --> 00:00:25,559
because if I do this right and you guys get it,
因为如果我做对了，你们明白了， 

12
00:00:25,559 --> 00:00:28,750
then I can mess up every other recitation after it.
然后我就可以搞乱所有其他的背诵。 

13
00:00:28,750 --> 00:00:31,719
And you'll still get the gist of 6.006.
而且您仍然会得到6.006的要旨。 

14
00:00:31,719 --> 00:00:34,699
So all I have to do is get this working.
所以我要做的就是使它工作。 

15
00:00:34,700 --> 00:00:36,559
So most of the time in the real world
因此，在现实世界中，大部分时间

16
00:00:36,759 --> 00:00:39,579
you're probably not going to be coming up with new algorithms
您可能不会提出新算法

17
00:00:39,579 --> 00:00:42,079
to do something, but rather you'll have some code
去做点事，但是你会有一些代码

18
00:00:42,079 --> 00:00:43,960
and you want to make it faster.
而您想使其更快。 

19
00:00:43,960 --> 00:00:45,759
And the first step in making it faster
加快速度的第一步

20
00:00:45,759 --> 00:00:48,509
is you realize, how does it do right now?
您知道吗，现在如何执行？ 

21
00:00:48,509 --> 00:00:51,210
How does it run, which lines are slow, which lines are fast,
它是如何运行的，哪些行较慢，哪些行较快， 

22
00:00:51,210 --> 00:00:53,030
and where you can make improvements.
以及可以进行改进的地方。 

23
00:00:53,030 --> 00:00:56,189
So in lecture we talked about the Python Cost Model
因此，在讲座中，我们谈到了Python成本模型

24
00:00:56,189 --> 00:00:59,099
which is what you use to look at the code
这是您用来查看代码的内容

25
00:00:59,100 --> 00:01:01,590
and figure out how much time it takes to run.
并计算出需要多少时间。 

26
00:01:01,590 --> 00:01:04,069
And we talked about document distance,
我们谈到了文档距离， 

27
00:01:04,069 --> 00:01:05,530
which is a problem that we'll use
这是我们将要使用的问题

28
00:01:05,530 --> 00:01:08,180
to practice our analysis skills.
练习我们的分析技能。 

29
00:01:08,180 --> 00:01:09,659
And this entire recitation is all
这整个背诵就是全部

30
00:01:09,859 --> 00:01:12,609
about looking at versions of document distance
关于查看文档距离的版本

31
00:01:12,609 --> 00:01:14,810
and analyzing them.
并分析它们。 

32
00:01:14,810 --> 00:01:16,859
So that's what we'll do, look at Python code,
这就是我们要做的，看一下Python代码， 

33
00:01:16,859 --> 00:01:19,010
look at Python code, look at Python code.
看一下Python代码，看一下Python代码。 

34
00:01:19,010 --> 00:01:21,119
So you better have handouts, because I can't project.
所以你最好有讲义，因为我不能投影。 

35
00:01:21,319 --> 00:01:25,637
OK, how many people remember the document distance problem?
好，有多少人记得文档距离问题？ 

36
00:01:25,637 --> 00:01:27,344
You guys said you went to lecture, right?
你们说你去听课了吧？ 

37
00:01:27,344 --> 00:01:30,539



38
00:01:30,540 --> 00:01:33,269
OK, so very, very fast, document distance.
好的，非常非常快的文档距离。 

39
00:01:33,469 --> 00:01:34,650
I have two documents.
我有两个文件。 

40
00:01:34,650 --> 00:01:37,719



41
00:01:37,719 --> 00:01:41,780
The fox is in the hat.
狐狸在帽子里。 

42
00:01:41,780 --> 00:01:45,989



43
00:01:45,989 --> 00:01:49,929
And the fox is outside.
狐狸在外面。 

44
00:01:49,930 --> 00:01:54,250



45
00:01:54,250 --> 00:01:56,819
Document 1, document 2.
文件1，文件2。 

46
00:01:56,819 --> 00:01:58,579
What's the first thing I want to do?
我想做的第一件事是什么？ 

47
00:01:58,579 --> 00:02:01,939
So there are three operations that Eric mentioned in lecture.
因此，Eric在演讲中提到了三个操作。 

48
00:02:01,939 --> 00:02:07,409
Operation one, take each document,
操作一，取每个文件， 

49
00:02:07,409 --> 00:02:08,819
break it up into words.
把它分解成文字。 

50
00:02:08,819 --> 00:02:10,219
Right?
对？ 

51
00:02:10,219 --> 00:02:12,609
This is a string.
这是一个字符串。 

52
00:02:12,610 --> 00:02:15,439
When I read it, then it becomes word one, word two, word three,
当我阅读它时，它就变成了第一，第二，第三单词， 

53
00:02:15,639 --> 00:02:18,059
word four, so on and so forth.
第四个字，依此类推。 

54
00:02:18,060 --> 00:02:20,930
Operation two, build document vectors
操作二，建立文档向量

55
00:02:20,930 --> 00:02:22,840
out of the two documents.
在两个文件中。 

56
00:02:22,840 --> 00:02:25,789
So the documents are D1 and D2.
因此文档是D1和D2。 

57
00:02:25,789 --> 00:02:29,079



58
00:02:29,080 --> 00:02:30,750
A document vector is basically a list
文档向量基本上是一个列表

59
00:02:30,949 --> 00:02:35,669
of the words in the documents with a count of how many times
文档中单词的数量，计数多少次

60
00:02:35,669 --> 00:02:37,869
each word appears in the document.
每个单词都出现在文档中。 

61
00:02:37,870 --> 00:02:43,111
So let's build a document vector for document one.
因此，让我们为一个文档建立一个文档向量。 

62
00:02:43,111 --> 00:02:44,569
I'm not going to write it formally,
我不会正式写

63
00:02:44,569 --> 00:02:47,120
so can anyone tell me what it should look like,
所以谁能告诉我它的外观， 

64
00:02:47,120 --> 00:02:49,110
and I'll sort of write it down as a list.
我会把它写成一个列表。 

65
00:02:49,110 --> 00:02:52,780



66
00:02:52,780 --> 00:02:55,439
So for all the words here, I want to list the words
所以对于这里的所有单词，我想列出这些单词

67
00:02:55,439 --> 00:02:57,639
and how many times they show up.
以及他们出现了多少次。 

68
00:02:57,639 --> 00:03:01,375
Somebody, please.
拜托

69
00:03:01,376 --> 00:03:03,840
AUDIENCE: The is in there twice?
听众：里面有两次？ 

70
00:03:03,840 --> 00:03:04,969
VICTOR COSTAN: OK.
维克多·科斯坦：好的。 

71
00:03:04,969 --> 00:03:07,734
The, twice.
两次。 

72
00:03:07,735 --> 00:03:10,210
AUDIENCE: Fox, once.
听众：狐狸，一次。 

73
00:03:10,409 --> 00:03:11,710
VICTOR COSTAN: One.
维克多·科斯坦：一。 

74
00:03:11,710 --> 00:03:13,340
AUDIENCE: Is, once.
听众：是一次。 

75
00:03:13,340 --> 00:03:15,090
VICTOR COSTAN: Is, one.
维克多·科斯坦：是的。 

76
00:03:15,090 --> 00:03:16,969
AUDIENCE: [INAUDIBLE] in once.
听众：[听不清]。 

77
00:03:16,969 --> 00:03:18,199
VICTOR COSTAN: In, one.
维克多·科斯坦：在其中之一。 

78
00:03:18,199 --> 00:03:18,990
AUDIENCE: Hat once.
听众：戴一次帽子。 

79
00:03:18,991 --> 00:03:21,042



80
00:03:21,241 --> 00:03:22,199
VICTOR COSTAN: Awesome.
维克多·科斯坦：太棒了。 

81
00:03:22,199 --> 00:03:24,759
Thank you very much.
非常感谢你。 

82
00:03:24,759 --> 00:03:25,909
Second one.
第二个。 

83
00:03:25,909 --> 00:03:27,500
Another volunteer.
另一个志愿者

84
00:03:27,500 --> 00:03:28,270
Yes, go for it.
是的，去吧。 

85
00:03:28,270 --> 00:03:30,031
AUDIENCE: The, once.
听众：一次。 

86
00:03:30,230 --> 00:03:31,229
VICTOR COSTAN: The, one.
维克多·波士坦：一个。 

87
00:03:31,229 --> 00:03:32,739
AUDIENCE: Fox, once.
听众：狐狸，一次。 

88
00:03:32,740 --> 00:03:33,856
VICTOR COSTAN: Fox, one
维克多·科斯坦：福克斯，一位

89
00:03:33,856 --> 00:03:35,020
AUDIENCE: Is, one.
听众：是的。 

90
00:03:35,020 --> 00:03:36,707
VICTOR COSTAN: Is, one.
维克多·科斯坦：是的。 

91
00:03:36,707 --> 00:03:38,603
AUDIENCE: Outside, one.
听众：在外面，一个。 

92
00:03:38,604 --> 00:03:41,689
VICTOR COSTAN: Outside, one.
维克多·科斯坦：外面，一个。 

93
00:03:41,889 --> 00:03:44,849
OK, so this is a document vector.
好的，这是文档向量。 

94
00:03:44,849 --> 00:03:47,189
Notice two small details.
请注意两个小细节。 

95
00:03:47,189 --> 00:03:49,879
Here, they is capitalized, here it's not,
在这里，它们大写，在这里不是， 

96
00:03:49,879 --> 00:03:52,569
and yet I bundle them together.
但是我把它们捆在一起。 

97
00:03:52,569 --> 00:03:54,159
I know my grammar, so I put periods
我知道我的语法，所以我把句号

98
00:03:54,159 --> 00:03:56,024
at the end of the sentences, and yet they
在句子的结尾，但是他们

99
00:03:56,024 --> 00:03:57,189
don't show up anywhere here.
不要出现在这里的任何地方。 

100
00:03:57,189 --> 00:03:58,800
So we got rid of the punctuation,
所以我们摆脱了标点符号， 

101
00:03:58,800 --> 00:04:00,185
and we made all words lowercase.
然后我们将所有单词都改为小写。 

102
00:04:00,185 --> 00:04:02,475



103
00:04:02,475 --> 00:04:04,099
These are details, but they are details
这些是细节，但它们是细节

104
00:04:04,099 --> 00:04:05,807
that you'll see in the code, so if you're
您将在代码中看到，所以如果您

105
00:04:05,807 --> 00:04:07,849
wondering why, this is why.
想知道为什么，这就是为什么。 

106
00:04:07,849 --> 00:04:11,180
So step one, read the document, make it a list of words.
因此，第一步，阅读文档，将其制成单词列表。 

107
00:04:11,180 --> 00:04:13,250
Step two, compute the document vector.
第二步，计算文档向量。 

108
00:04:13,250 --> 00:04:15,939
Step three, take the two document vectors,
第三步，取两个文档向量， 

109
00:04:15,939 --> 00:04:17,610
and compute the angle.
并计算角度。 

110
00:04:17,610 --> 00:04:20,560
What is the angle of two document vectors?
两个文档向量的角度是多少？ 

111
00:04:20,560 --> 00:04:21,980
Big ugly math formula.
大丑陋的数学公式。 

112
00:04:21,980 --> 00:04:25,569
The only thing that's relevant is that it takes these vectors
唯一相关的是它采用了这些向量

113
00:04:25,569 --> 00:04:27,860
and computes an inner product.
并计算一个内积

114
00:04:27,860 --> 00:04:33,379
So if we look at the code for angle vector, or vector angle,
因此，如果我们看一下角度矢量或矢量角度的代码， 

115
00:04:33,579 --> 00:04:37,399
you'll see that because numerator denominator lines two
您会看到，因为分子分母排成两行

116
00:04:37,399 --> 00:04:40,449
and three, it calls inner product three times
第三，它调用内部产品三遍

117
00:04:40,449 --> 00:04:42,562
and then it does some math with it.
然后用它做一些数学运算。 

118
00:04:42,562 --> 00:04:43,569
We don't care about the math.
我们不在乎数学。 

119
00:04:43,769 --> 00:04:45,169
We assume the math is order one.
我们假设数学是一阶。 

120
00:04:45,170 --> 00:04:48,514
We only care about inner product.
我们只关心内部产品。 

121
00:04:48,514 --> 00:04:49,680
How does inner product work?
内部产品如何运作？ 

122
00:04:49,680 --> 00:04:52,209
Can anyone help me compute the inner product for these guys?
谁能帮我计算这些家伙的内积？ 

123
00:04:52,209 --> 00:04:56,959



124
00:04:56,959 --> 00:04:57,919
Yes?
是？ 

125
00:04:57,920 --> 00:04:58,920
AUDIENCE: It's like the dot product?
听众：就像点积？ 

126
00:04:58,920 --> 00:04:59,672
VICTOR COSTAN: OK.
维克多·科斯坦：好的。 

127
00:04:59,672 --> 00:05:03,245
AUDIENCE: So, if we take the vectors and you multiply them,
听众：所以，如果我们取向量，然后乘以它们， 

128
00:05:03,444 --> 00:05:05,870
like, you're adding to the components, right?
例如，您要添加组件，对吗？ 

129
00:05:05,870 --> 00:05:08,300
Because they're so thick--
因为它们太厚了- 

130
00:05:08,300 --> 00:05:10,482
VICTOR COSTAN: OK, this is too complicated, then.
维克多·科斯坦：好的，那太复杂了。 

131
00:05:10,482 --> 00:05:11,740
I'm seriously depressed, so give me
我很沮丧，所以给我

132
00:05:11,939 --> 00:05:15,600
some clear instructions step by step.
一些明确的说明会逐步进行。 

133
00:05:15,600 --> 00:05:17,120
AUDIENCE: Like, I know you divide
听众：就像，我知道你分开了

134
00:05:17,120 --> 00:05:18,860
by the length of each of the vectors--
通过每个向量的长度- 

135
00:05:18,860 --> 00:05:20,079
VICTOR COSTAN: Let's not worry about that.
维克多·科斯坦（VICTOR COSTAN）：不用担心。 

136
00:05:20,279 --> 00:05:22,419
I have these vectors, and I want an inner product.
我有这些向量，我想要一个内积。 

137
00:05:22,420 --> 00:05:25,454
I don't care about the angle, just the inner product.
我不在乎角度，只在乎内在的东西。 

138
00:05:25,454 --> 00:05:27,750
AUDIENCE: OK, well do 2 times 1 for the right.
听众：好的，做正确的2乘1。 

139
00:05:27,750 --> 00:05:28,500
VICTOR COSTAN: OK.
维克多·科斯坦：好的。 

140
00:05:28,500 --> 00:05:30,620
So I take the here, shows up twice.
所以我在这里，出现了两次。 

141
00:05:30,620 --> 00:05:32,689
I take the here, shows up once.
我在这里，出现一次。 

142
00:05:32,689 --> 00:05:33,969
2 times 1, right?
 1 2次吧？ 

143
00:05:33,970 --> 00:05:34,439
AUDIENCE: Mhm.
听众：嗯。 

144
00:05:34,639 --> 00:05:35,849
VICTOR COSTAN: OK.
维克多·科斯坦：好的。 

145
00:05:35,850 --> 00:05:36,557
And then?
接着？ 

146
00:05:36,757 --> 00:05:38,926
AUDIENCE: I would do the same for fox.
听众：我会为狐狸做同样的事情。 

147
00:05:38,927 --> 00:05:41,310
VICTOR COSTAN: OK, fox shows up here once, shows up here once,
维克多·科斯坦：好吧，狐狸出现在这里一次，出现在这里一次， 

148
00:05:41,509 --> 00:05:43,738
so what I do?
那我该怎么办？ 

149
00:05:43,738 --> 00:05:45,069
AUDIENCE: 1 times 1.
听众：1次1。 

150
00:05:45,069 --> 00:05:47,379
VICTOR COSTAN: OK.
维克多·科斯坦：好的。 

151
00:05:47,379 --> 00:05:49,240
AUDIENCE: And do the same for is.
听众：对is做同样的事情。 

152
00:05:49,240 --> 00:05:50,615
VICTOR COSTAN: OK.
维克多·科斯坦：好的。 

153
00:05:50,815 --> 00:05:53,399
AUDIENCE: And in should be 0.
听众：并且in应该为0。 

154
00:05:53,399 --> 00:05:54,149
VICTOR COSTAN: OK.
维克多·科斯坦：好的。 

155
00:05:54,149 --> 00:05:55,729
AUDIENCE: [INAUDIBLE] in.
观众：[听不清] in。 

156
00:05:55,730 --> 00:05:56,480
VICTOR COSTAN: OK.
维克多·科斯坦：好的。 

157
00:05:56,480 --> 00:05:58,819
AUDIENCE: And then outside would also be 0,
听众：那么外面也将是0， 

158
00:05:58,819 --> 00:06:00,750
and hat would also be 0.
帽子也将是0。 

159
00:06:00,750 --> 00:06:01,579
VICTOR COSTAN: OK.
维克多·科斯坦：好的。 

160
00:06:01,579 --> 00:06:04,019
So it turns out you don't have to go through both lists.
因此，事实证明您不必同时浏览两个列表。 

161
00:06:04,019 --> 00:06:06,329
It's sufficient to go through one of the vectors
通过其中一个向量就足够了

162
00:06:06,329 --> 00:06:08,335
and look up the words in the other vector.
并在另一个向量中查找单词。 

163
00:06:08,336 --> 00:06:10,509
Because if the words don't show up in any of the vectors,
因为如果单词没有出现在任何向量中， 

164
00:06:10,709 --> 00:06:12,669
their contribution is going to be 0.
他们的贡献将为0。 

165
00:06:12,670 --> 00:06:16,670
So my algorithm is go through each of the elements
所以我的算法是遍历每个元素

166
00:06:16,670 --> 00:06:20,009
here, look up each of the words there, look up at the word
在这里，查找那里的每个单词，在单词中查找

167
00:06:20,009 --> 00:06:20,779
here.
这里。 

168
00:06:20,779 --> 00:06:23,500
And if there's a word here and here,
如果这里和这里有一个字， 

169
00:06:23,500 --> 00:06:26,129
take out the number of times it shows up in each document,
拿走它出现在每个文档中的次数， 

170
00:06:26,129 --> 00:06:31,469
multiply them, and then add everything up.
将它们相乘，然后将所有内容相加。 

171
00:06:31,470 --> 00:06:33,240
So this is inner product.
因此，这是内部产品。 

172
00:06:33,439 --> 00:06:35,889
Everything else is good if you're writing a search engine
如果您正在编写搜索引擎，那么其他一切都很好

173
00:06:35,889 --> 00:06:38,019
or if you're using the scenario application,
或者如果您正在使用场景应用程序， 

174
00:06:38,019 --> 00:06:40,879
but we're not really concerned with it.
但我们并不真正关心它。 

175
00:06:40,879 --> 00:06:42,730
OK, so now we have the three steps,
好的，现在我们执行三个步骤， 

176
00:06:42,730 --> 00:06:45,629
read the document, break it up into words,
阅读文档，将其分解为文字， 

177
00:06:45,629 --> 00:06:47,990
compute document vectors, compute our inner product.
计算文档向量，计算我们的内积。 

178
00:06:47,990 --> 00:06:49,870
So this is what we want to do.
这就是我们要做的。 

179
00:06:49,870 --> 00:06:53,649
And document distance 1 does it in a painfully slow way,
而文档距离1却以缓慢的速度完成了任务， 

180
00:06:53,649 --> 00:06:57,009
and we're probably not going to cover everything in recitation.
而且我们可能不会涵盖朗诵中的所有内容。 

181
00:06:57,009 --> 00:06:59,459
But if you go all the way up to document distance 1,
但是如果您一直到文档距离， 

182
00:06:59,459 --> 00:07:00,609
that's really, really fast.
那真的非常非常快。 

183
00:07:00,610 --> 00:07:03,759
It's 1,000 times faster.
快了1000倍。 

184
00:07:03,959 --> 00:07:06,891
So this is our job for the day.
所以这是我们今天的工作。 

185
00:07:06,891 --> 00:07:07,850
Let's look at the code.
让我们看一下代码。 

186
00:07:07,850 --> 00:07:11,439
Did anyone look at the code beforehand?
有人事先看过代码吗？ 

187
00:07:11,439 --> 00:07:12,399
Nope.
不。 

188
00:07:12,399 --> 00:07:15,129
OK, so when I look at a big piece of code,
好的，所以当我看一大段代码时， 

189
00:07:15,129 --> 00:07:19,819
I like to look at it from top down.
我喜欢从上向下看。 

190
00:07:19,819 --> 00:07:22,079
So that means I start to the main function,
因此，这意味着我开始使用主要功能， 

191
00:07:22,079 --> 00:07:24,370
I see who is it calling, I see what everything
我看到它在叫谁，我看到了什么

192
00:07:24,370 --> 00:07:27,720
is trying to do, and then I go into the sub functions
正在尝试做，然后我进入子功能

193
00:07:27,720 --> 00:07:30,300
and recurves and basically do the same thing.
并进行反曲并基本上做同样的事情。 

194
00:07:30,300 --> 00:07:32,579
So I build a tree of who's calling what,
因此，我建立了一棵谁在说什么的树， 

195
00:07:32,579 --> 00:07:34,719
and that helps me figure out what's going on.
这可以帮助我弄清楚发生了什么。 

196
00:07:34,720 --> 00:07:37,024



197
00:07:37,223 --> 00:07:38,264
So let's start with main.
因此，让我们从main开始。 

198
00:07:38,264 --> 00:07:44,229



199
00:07:44,230 --> 00:07:45,939
And let's look at main.
让我们看一下main。 

200
00:07:46,139 --> 00:07:49,149
Lines 1 through 6 look at the arguments.
第1至6行着眼于参数。 

201
00:07:49,149 --> 00:07:51,039
We don't really care.
我们不在乎。 

202
00:07:51,040 --> 00:07:54,365
Line 7 and 8 call word frequencies for file.
第7行和第8行调用文件的单词频率。 

203
00:07:54,365 --> 00:08:01,519



204
00:08:01,519 --> 00:08:04,769
I am abbreviating liberally.
我是自由的缩写。 

205
00:08:04,769 --> 00:08:11,949
And then line 9 calls vector angle.
然后第9行调用矢量角度。 

206
00:08:11,949 --> 00:08:17,209
So line 7 and 8 read the two documents,
因此，第7和8行读取了两个文档， 

207
00:08:17,209 --> 00:08:20,489
do steps one and two, and then 9 does step three.
执行步骤一和第二，然后执行步骤9和第三。 

208
00:08:20,490 --> 00:08:31,009



209
00:08:31,009 --> 00:08:31,699
OK.
好。 

210
00:08:31,699 --> 00:08:33,220
Word frequencies for files.
文件的字频。 

211
00:08:33,220 --> 00:08:35,678
So the point of this is to read a file
所以这就是读取文件

212
00:08:35,678 --> 00:08:41,100
and to produce a word document vector out of it.
并从中产生一个word文档向量。 

213
00:08:41,100 --> 00:08:45,370
And it does it in three steps.
它分三步完成。 

214
00:08:45,370 --> 00:08:48,840
Reads the file, line two.
读取文件，第二行。 

215
00:08:48,840 --> 00:08:52,099
Breaks up the file into words, so operation one,
将文件分解成单词，因此操作一， 

216
00:08:52,299 --> 00:08:56,169
this is line 3, and then line 4, it takes up the list of words
这是第3行，然后是第4行，它占用了单词列表

217
00:08:56,169 --> 00:08:58,789
and computes a document vector out of it.
并据此计算出文档向量。 

218
00:08:58,789 --> 00:09:01,110
I don't care about reading files because I'll
我不在乎读取文件，因为我会

219
00:09:01,110 --> 00:09:03,419
assume this is somehow done for me.
假设这是为我做的。 

220
00:09:03,419 --> 00:09:05,289
We care about the algorithms.
我们关心算法。 

221
00:09:05,289 --> 00:09:07,049
So as far as I'm concerned, this function
就我而言，这个功能

222
00:09:07,049 --> 00:09:08,699
is calling get words from line list.
从行列表中调用获取单词。 

223
00:09:08,700 --> 00:09:11,609



224
00:09:11,809 --> 00:09:16,694
Get words from line list, and count frequency.
从行列表中获取单词，并计算频率。 

225
00:09:16,695 --> 00:09:26,100



226
00:09:26,100 --> 00:09:29,129
And if we skip all the way to vector angle--
如果我们一直跳到矢量角

227
00:09:29,129 --> 00:09:32,439
we already talked a little bit about how all it does
我们已经讨论了所有功能

228
00:09:32,440 --> 00:09:34,580
is it calls inner product three times
是三次调用内积吗

229
00:09:34,580 --> 00:09:37,009
and then in does some fancy math of it.
然后对它做一些花哨的数学运算。 

230
00:09:37,009 --> 00:09:44,509



231
00:09:44,509 --> 00:09:46,590
So this is how the code looks like big picture.
这就是代码看起来像大图片的样子。 

232
00:09:46,590 --> 00:09:56,370



233
00:09:56,370 --> 00:09:58,529
OK, so to figure out the running time for main,
好，所以要弄清楚main的运行时间， 

234
00:09:58,529 --> 00:10:00,779
we need to figure out the running time for these two
我们需要弄清楚这两个的运行时间

235
00:10:00,779 --> 00:10:03,313
functions and add them up, right?
功能并将它们加起来，对不对？ 

236
00:10:03,313 --> 00:10:04,980
To figure out the running time for this,
为了弄清楚它的运行时间， 

237
00:10:04,980 --> 00:10:06,354
we need to figure out the running
我们需要弄清楚跑步

238
00:10:06,354 --> 00:10:09,710
time for these functions and add them up, so on and so forth.
这些功能的时间，并将它们加起来，依此类推。 

239
00:10:09,710 --> 00:10:12,960
So as you go through each of the document distance versions,
因此，当您浏览每个文档距离版本时， 

240
00:10:12,960 --> 00:10:17,214
you want keep a scorecard of the implementation that shows you
您想要保留一个显示给您的实施计分卡

241
00:10:17,214 --> 00:10:18,429
what the running time is, and this
运行时间是多少

242
00:10:18,629 --> 00:10:20,772
helps you follow what was improved
帮助您遵循改进的地方

243
00:10:20,772 --> 00:10:21,730
in each implementation.
在每个实现中。 

244
00:10:21,730 --> 00:10:25,830



245
00:10:25,830 --> 00:10:29,229
So let's look at to get words from line lists.
因此，让我们看一下从行列表中获取单词。 

246
00:10:29,429 --> 00:10:31,939
What does it seem like its doing?
看起来好像在做什么？ 

247
00:10:31,940 --> 00:10:34,719
Without reading the get words from string,
不读字符串获取单词， 

248
00:10:34,919 --> 00:10:38,539
can anyone tell me what it seems like it's doing?
谁能告诉我这是怎么回事？ 

249
00:10:38,539 --> 00:10:40,514
If you just read lines 1 through 6.
如果您仅阅读第1至6行。 

250
00:10:40,514 --> 00:10:43,895



251
00:10:43,895 --> 00:10:46,949
AUDIENCE: [INAUDIBLE] through the list.
观众：[听不清]。 

252
00:10:46,950 --> 00:10:47,700
VICTOR COSTAN: OK.
维克多·科斯坦：好的。 

253
00:10:47,700 --> 00:10:49,940
So it's getting an input list.
因此，它正在获得一个输入列表。 

254
00:10:49,940 --> 00:10:52,199
And if you look at word frequencies for files
如果您查看文件的词频

255
00:10:52,399 --> 00:10:56,429
at line 2, it names a variable line list.
在第2行，它命名了一个可变行列表。 

256
00:10:56,429 --> 00:11:00,359
So it seems like what's happening is,
看来发生了什么事， 

257
00:11:00,360 --> 00:11:02,590
reads a file into a list of lines.
将文件读入行列表。 

258
00:11:02,590 --> 00:11:07,139
And then that list of lines goes to get words from line lists.
然后，该行列表从行列表中获取单词。 

259
00:11:07,139 --> 00:11:12,590
So this is L in get words from line lists.
因此，这是从行列表中获取单词的L。 

260
00:11:12,590 --> 00:11:15,820
So it takes a list of lines which is the entire document,
因此，它需要一个包含整个文档的行列表， 

261
00:11:15,820 --> 00:11:16,320
and then?
接着？ 

262
00:11:16,320 --> 00:11:20,699



263
00:11:20,899 --> 00:11:23,514
AUDIENCE: Basically it removes the new lines.
听众：基本上，它将删除新行。 

264
00:11:23,514 --> 00:11:30,177
It sticks it into one giant list rather than a list of lines,
它会将其粘贴到一个巨型列表中，而不是一行中， 

265
00:11:30,177 --> 00:11:31,591
is that right?
那正确吗？ 

266
00:11:31,591 --> 00:11:34,090
VICTOR COSTAN: Almost, so you seem to get words from string.
维克多·科斯坦（VICTOR COSTAN）：几乎，所以您似乎从字符串中得到了一些单词。 

267
00:11:34,090 --> 00:11:35,798
Maybe we need to go through the function,
也许我们需要遍历该功能， 

268
00:11:35,798 --> 00:11:40,179
but do see the get words from string function name?
但是否看到从字符串函数名称获取单词？ 

269
00:11:40,179 --> 00:11:42,329
So I will assume that it does something
所以我假设它会做某事

270
00:11:42,330 --> 00:11:44,509
with each of the words.
每个单词。 

271
00:11:44,509 --> 00:11:49,090
And if the overall goal is to get a list of words,
如果总体目标是获取单词列表， 

272
00:11:49,090 --> 00:11:52,200
then I would assume that what that does is it takes a line
那么我认为那是要花一行

273
00:11:52,200 --> 00:11:54,200
and it breaks it up into words.
并将其分解为文字。 

274
00:11:54,200 --> 00:11:55,950
Because this way, if you take up each line
因为这样，如果您占用每一行

275
00:11:55,950 --> 00:11:57,980
and break it up into words, then when
并分解成文字，然后当

276
00:11:57,980 --> 00:11:59,970
we put all the words together we get the words
我们把所有的词放在一起，我们得到的词

277
00:11:59,970 --> 00:12:01,052
that make up the document.
组成文档。 

278
00:12:01,052 --> 00:12:03,429



279
00:12:03,429 --> 00:12:04,209
Do people follow?
人们会跟随吗？ 

280
00:12:04,210 --> 00:12:04,870
Any questions?
任何问题？ 

281
00:12:04,870 --> 00:12:07,369
I like that people are nodding, by the way, keep doing that.
我喜欢人们在点头，顺便说一句。 

282
00:12:07,369 --> 00:12:09,253
That helps me go at the right speed.
那可以帮助我以正确的速度前进。 

283
00:12:09,453 --> 00:12:11,870
If you're not nodding, I'll keep explaining the same thing
如果您不点头，我将继续说明同一件事

284
00:12:11,870 --> 00:12:12,710
over and over again.
一遍又一遍地。 

285
00:12:12,710 --> 00:12:18,870



286
00:12:18,870 --> 00:12:20,279
OK, so get words from string.
 OK，所以从字符串中获取单词。 

287
00:12:20,279 --> 00:12:24,589
Get words from string takes up a single line, that's a string,
从字符串中获取单词只占一行，这是一个字符串， 

288
00:12:24,590 --> 00:12:26,859
and produces a list of words.
并产生一个单词列表。 

289
00:12:27,059 --> 00:12:29,919
And we saw in the example there that it
我们在示例中看到了

290
00:12:29,919 --> 00:12:33,229
has to take care of a few details such as making
必须照顾一些细节，例如制作

291
00:12:33,230 --> 00:12:35,519
all the letters lowercase and ignoring
所有字母都小写而忽略

292
00:12:35,519 --> 00:12:38,870
punctuation and skipping spaces.
标点符号和跳过空格。 

293
00:12:38,870 --> 00:12:42,210
So let's look at this code and figure out its running time.
因此，让我们看一下这段代码，弄清楚其运行时间。 

294
00:12:42,210 --> 00:12:43,829
And the way we're going to do that is we're
而我们要做的就是

295
00:12:44,029 --> 00:12:46,839
going to look at each line, and we're
看每一行，我们

296
00:12:46,840 --> 00:12:49,960
going to see what's the cost for that line
看看那条线的成本是多少

297
00:12:49,960 --> 00:12:51,531
and how many times does it run.
以及它运行了多少次。 

298
00:12:51,731 --> 00:12:53,189
And once we have those two numbers,
一旦有了这两个数字， 

299
00:12:53,190 --> 00:12:56,700
we multiply them together and we see how much time
我们将它们相乘，我们会看到多少时间

300
00:12:56,700 --> 00:13:01,069
does the program spend on that line in total.
程序总共在那条线上花费了多少。 

301
00:13:01,269 --> 00:13:04,029
So I'm going to write down line numbers here.
所以我要在这里写下行号。 

302
00:13:04,029 --> 00:13:09,110
9, 10, 11, 12, 13, 14, 15.
 9、10、11、12、13、14、15 

303
00:13:09,110 --> 00:13:10,118
All the way to 23.
一直到23。 

304
00:13:10,118 --> 00:13:17,979



305
00:13:18,179 --> 00:13:18,679
Too low.
太低。 

306
00:13:18,679 --> 00:13:26,929



307
00:13:26,929 --> 00:13:29,959
20, 21, 22, 23.
 20、21、22、23。 

308
00:13:29,960 --> 00:13:33,709



309
00:13:33,909 --> 00:13:35,669
OK, so let's start with something easy,
好，让我们从简单的事情开始， 

310
00:13:35,669 --> 00:13:40,649
lines 9 and 10 How many times are they run?
第9和10行它们运行多少次？ 

311
00:13:40,649 --> 00:13:41,730
AUDIENCE: Once.
听众：一次。 

312
00:13:41,730 --> 00:13:42,966
VICTOR COSTAN: OK.
维克多·科斯坦：好的。 

313
00:13:42,966 --> 00:13:47,739
AUDIENCE: [INAUDIBLE] Once in this method?
听众：[听不清]使用此方法一次？ 

314
00:13:47,739 --> 00:13:48,329
VICTOR COSTAN: Yep.
维克多·科斯坦：是的。 

315
00:13:48,529 --> 00:13:51,329
So I'm only looking at this method.
所以我只看这种方法。 

316
00:13:51,330 --> 00:13:57,500
So assuming that the method gets one line, and the line has,
因此，假设该方法获得一行，并且该行具有， 

317
00:13:57,500 --> 00:14:07,379
I don't know, say, one line in characters,
我不知道一行字符， 

318
00:14:07,379 --> 00:14:08,830
and we need another variable which
我们需要另一个变量

319
00:14:08,830 --> 00:14:11,139
we're going to figure out later.
我们待会儿找出来。 

320
00:14:11,139 --> 00:14:14,039
But for now, one line in characters.
但是现在，一行字符。 

321
00:14:14,039 --> 00:14:17,180
So how many times does line 9 run?
那么第9行运行了多少次？ 

322
00:14:17,181 --> 00:14:19,950
AUDIENCE: [INAUDIBLE]
观众：[听不清] 

323
00:14:19,950 --> 00:14:21,450
VICTOR COSTAN: OK.
维克多·科斯坦：好的。 

324
00:14:21,450 --> 00:14:23,459
Runs once.
运行一次。 

325
00:14:23,659 --> 00:14:25,528
How about line 10?
第10行怎么样？ 

326
00:14:25,528 --> 00:14:26,355
AUDIENCE: Once.
听众：一次。 

327
00:14:26,355 --> 00:14:26,980
AUDIENCE: Once.
听众：一次。 

328
00:14:26,980 --> 00:14:27,950
VICTOR COSTAN: OK.
维克多·科斯坦：好的。 

329
00:14:27,950 --> 00:14:29,240
What do they do?
他们在做什么？ 

330
00:14:29,240 --> 00:14:32,360
Create new lists and assign them to variables.
创建新列表并将其分配给变量。 

331
00:14:32,360 --> 00:14:35,120
What's the cause for that?
是什么原因造成的？ 

332
00:14:35,120 --> 00:14:36,461
AUDIENCE: Constant [INAUDIBLE]
听众：恒定[听不清] 

333
00:14:36,461 --> 00:14:38,419
VICTOR COSTAN: Constant, excellent.
 VICTOR COSTAN：持续不断，出色。 

334
00:14:38,419 --> 00:14:40,139
So I'll be skipping the order of so
所以我将跳过这样的顺序

335
00:14:40,139 --> 00:14:43,029
that I don't have to write it 23 times.
我不必写23次。 

336
00:14:43,029 --> 00:14:45,289
So 1, 1.
所以1、1 

337
00:14:45,289 --> 00:14:48,730
OK, line 11.
 OK，第11行。 

338
00:14:48,730 --> 00:14:51,600
It's iterates over all the characters in a line.
它遍历一行中的所有字符。 

339
00:14:51,600 --> 00:14:54,750
So how many times is it going to run?
那么它要运行多少次？ 

340
00:14:54,750 --> 00:14:56,250
AUDIENCE: Like, the line?
听众：喜欢吗？ 

341
00:14:56,250 --> 00:14:57,525
VICTOR COSTAN: OK, which is?
维克多·科斯坦：好的，那是什么？ 

342
00:14:57,525 --> 00:14:59,269
AUDIENCE: Line end characters.
听众：行尾字符。 

343
00:14:59,269 --> 00:15:01,509
VICTOR COSTAN: Awesome.
维克多·科斯坦：太棒了。 

344
00:15:01,509 --> 00:15:07,289
And just the fact of iterating takes constant time.
而实际上，迭代需要花费固定的时间。 

345
00:15:07,289 --> 00:15:09,219
I'm not sure we covered that.
我不确定我们是否涵盖了这一点。 

346
00:15:09,220 --> 00:15:14,519
So for each character, test if it's an alphanumeric character.
因此，对于每个字符，请测试它是否为字母数字字符。 

347
00:15:14,519 --> 00:15:17,429
Does anyone know what alphanumeric means?
有人知道字母数字是什么意思吗？ 

348
00:15:17,429 --> 00:15:19,049
AUDIENCE: It's a letter and a number.
听众：这是一个字母和一个数字。 

349
00:15:19,049 --> 00:15:21,299
VICTOR COSTAN: OK, so fancy word for letter or number,
维克多·科斯坦（VICTOR COSTAN）：好的，所以花哨的字母或数字， 

350
00:15:21,299 --> 00:15:23,969
A through Z, 0 through 9.
 A到Z，0到9。 

351
00:15:23,970 --> 00:15:25,719
So how much time does it take to test
所以测试需要多少时间

352
00:15:25,919 --> 00:15:29,199
if a character is alphanumeric?
如果字符是字母数字？ 

353
00:15:29,200 --> 00:15:30,401
Guesses?
猜猜

354
00:15:30,601 --> 00:15:31,939
AUDIENCE: Constant.
听众：不变。 

355
00:15:31,940 --> 00:15:34,099
VICTOR COSTAN: OK, so constant time.
 VICTOR COSTAN：好的，时间固定。 

356
00:15:34,299 --> 00:15:37,159
You compare it to the range A, Z and 0, 9.
您将其与范围A，Z和0、9进行比较。 

357
00:15:37,159 --> 00:15:39,108
How many times am I doing it?
我做了几次？ 

358
00:15:39,109 --> 00:15:39,984
AUDIENCE: [INAUDIBLE]
观众：[听不清] 

359
00:15:39,984 --> 00:15:42,022
AUDIENCE: [INAUDIBLE]
观众：[听不清] 

360
00:15:42,022 --> 00:15:43,480
VICTOR COSTAN: Thank you guys, this
 VICTOR COSTAN：谢谢你们，这

361
00:15:43,480 --> 00:15:45,649
is going much faster than the last recitation.
比上次朗诵要快得多。 

362
00:15:45,649 --> 00:15:48,799
You guys are active, I like it.
你们很活跃，我喜欢。 

363
00:15:48,799 --> 00:15:50,029
So, now for line 13.
因此，现在针对第13行。 

364
00:15:50,029 --> 00:15:52,549
That only gets executed when the character
只有当角色

365
00:15:52,549 --> 00:15:54,361
is an alphanumeric character.
是字母数字字符。 

366
00:15:54,361 --> 00:15:56,319
So we're going to have to make some assumptions
所以我们将不得不做一些假设

367
00:15:56,320 --> 00:15:57,329
about the document.
关于文件。 

368
00:15:57,529 --> 00:16:00,399
And to make my life easier, we're
为了让我的生活更轻松，我们

369
00:16:00,399 --> 00:16:02,379
going to make the following assumption.
将做出以下假设。 

370
00:16:02,379 --> 00:16:05,576
If this is a natural language like, say, English,
如果这是自然语言，例如英语， 

371
00:16:05,576 --> 00:16:07,450
words are going to be a constant size, right?
单词将是恒定大小，对吗？ 

372
00:16:07,450 --> 00:16:10,479
How many 500-character words do you see in English?
您用英语看到多少个500个字符的单词？ 

373
00:16:10,679 --> 00:16:14,909
So let's say 5 to 10 characters per word.
假设每个字5到10个字符。 

374
00:16:14,909 --> 00:16:17,169
And since the difference is so small,
由于差异是如此之小， 

375
00:16:17,169 --> 00:16:19,959
I'm going to say all the words have the same size
我要说所有的单词都一样大小

376
00:16:19,960 --> 00:16:21,839
W. And if you want to be more formal,
 W.如果您想更正式一点， 

377
00:16:22,039 --> 00:16:24,799
you can replace word length with average length,
您可以将字长替换为平均长度， 

378
00:16:24,799 --> 00:16:26,809
and the math works out.
数学就算出来了

379
00:16:26,809 --> 00:16:31,329
So each line has a number of words,
所以每一行都有很多字， 

380
00:16:31,330 --> 00:16:34,089
and the words are separated by exactly one space,
单词被一个空格隔开， 

381
00:16:34,289 --> 00:16:37,129
and the word has W characters.
这个词有W个字符。 

382
00:16:37,129 --> 00:16:40,942
So how many words do I have, by the way?
那么，我有几个字？ 

383
00:16:40,942 --> 00:16:44,330
AUDIENCE: N divided by W.
听众：N除以W。 

384
00:16:44,330 --> 00:16:45,639
VICTOR COSTAN: OK, good.
 VICTOR COSTAN：好的，很好。 

385
00:16:45,639 --> 00:16:47,740
Someone's paying close attention.
有人在密切注意。 

386
00:16:47,740 --> 00:16:50,960
N divided by W plus 1.
 N除以W加1。 

387
00:16:50,960 --> 00:16:53,820
And the reason that is, is a line
原因就是一条线

388
00:16:53,820 --> 00:16:56,340
would look like this, word, space, word, space, word,
看起来像是单词，空格，单词，空格，单词， 

389
00:16:56,340 --> 00:16:56,840
space.
空间。 

390
00:16:56,840 --> 00:16:59,850
So W, characters, one space, W, characters, one space, W,
所以W，字符，一个空格，W，字符，一个空格，W， 

391
00:16:59,850 --> 00:17:01,110
characters, one space.
字符，一个空格。 

392
00:17:01,110 --> 00:17:04,294
That's why you have W plus 1 there.
这就是为什么那里有W加1的原因。 

393
00:17:04,294 --> 00:17:05,960
When we look at asymptotics it turns out
当我们看渐近线时，事实证明

394
00:17:05,960 --> 00:17:08,910
that it doesn't really matter because W's a constant,
并不重要，因为W是一个常数， 

395
00:17:08,910 --> 00:17:13,599
W plus 1 is a constant, so order and words.
 W加1是一个常数，因此顺序和单词。 

396
00:17:13,799 --> 00:17:17,930
But for now, let's keep track of W's to seem a bit more formal.
但是现在，让我们跟踪W似乎更为正式。 

397
00:17:17,930 --> 00:17:19,680
So line 13.
因此，第13行。 

398
00:17:19,680 --> 00:17:21,180
How many times is it going to run?
它要运行多少次？ 

399
00:17:21,180 --> 00:17:29,374



400
00:17:29,374 --> 00:17:31,428
AUDIENCE: W times 10 over W plus one.
听众：W乘以10乘以W加1。 

401
00:17:31,628 --> 00:17:32,669
VICTOR COSTAN: Excellent.
 VICTOR COSTAN：太好了。 

402
00:17:32,670 --> 00:17:38,345



403
00:17:38,345 --> 00:17:39,220
Let me pull them out.
让我把它们拔出来。 

404
00:17:39,220 --> 00:17:43,880



405
00:17:43,880 --> 00:17:46,160
How much time does it take to run [INAUDIBLE].
运行[音频不清晰]需要多少时间。 

406
00:17:46,160 --> 00:17:49,872



407
00:17:49,872 --> 00:17:50,599
AUDIENCE: Constant?
听众：持续吗？ 

408
00:17:50,799 --> 00:17:52,340
VICTOR COSTAN: Constant time, append,
 VICTOR COSTAN：固定时间，追加， 

409
00:17:52,340 --> 00:17:54,239
covered in lecture, constant time.
讲课内容固定，时间固定。 

410
00:17:54,240 --> 00:17:57,680
So this is a bit tricky because if you have an array
所以这有点棘手，因为如果有数组

411
00:17:57,680 --> 00:18:00,680
implementation that's naive, it's not constant time.
天真的实现，不是固定的时间。 

412
00:18:00,680 --> 00:18:03,119
But Python does some magic called table doubling, which
但是Python做了一些魔术，称为表加倍， 

413
00:18:03,319 --> 00:18:05,189
we'll cover later in the course.
我们将在本课程的后面介绍。 

414
00:18:05,190 --> 00:18:11,470
And this is why you can say that append takes constant time.
这就是为什么您可以说append需要固定时间的原因。 

415
00:18:11,470 --> 00:18:12,230
OK.
好。 

416
00:18:12,230 --> 00:18:16,559
Else, so if the character is not alphanumeric,
否则，如果字符不是字母数字， 

417
00:18:16,559 --> 00:18:20,049
than what's going on here?
比这里发生了什么？ 

418
00:18:20,049 --> 00:18:23,427
Can anyone see what's happening there?
谁能看到那里发生了什么？ 

419
00:18:23,428 --> 00:18:26,410
AUDIENCE: If its like, [INAUDIBLE].
听众：如果喜欢，[听不清]。 

420
00:18:26,410 --> 00:18:29,278
VICTOR COSTAN: OK, so let's say if it's a space.
维克多·科斯坦（VICTOR COSTAN）：好的，让我们说说它是否是一个空间。 

421
00:18:29,278 --> 00:18:30,153
AUDIENCE: [INAUDIBLE]
观众：[听不清] 

422
00:18:30,153 --> 00:18:33,450



423
00:18:33,450 --> 00:18:35,419
VICTOR COSTAN: Yeah, this the harder part.
维克多·科斯坦：是的，这是最困难的部分。 

424
00:18:35,619 --> 00:18:37,489
I think you need to run this on an example
我认为您需要在一个例子上运行

425
00:18:37,490 --> 00:18:39,950
to figure out what's going on.
弄清楚发生了什么。 

426
00:18:39,950 --> 00:18:42,309
I have to run it on an example in my head.
我必须在脑海中举一个例子。 

427
00:18:42,309 --> 00:18:46,609
So let's take this small example here, the fox is outside.
因此，让我们在这里举一个小例子，狐狸在外面。 

428
00:18:46,609 --> 00:18:48,609
And this is a single line, right?
这是一行，对吗？ 

429
00:18:48,609 --> 00:18:49,389
Nice and handy.
很好，很方便。 

430
00:18:49,390 --> 00:18:52,180
So this can be the input for get words from string.
因此，这可以作为从字符串获取单词的输入。 

431
00:18:52,180 --> 00:18:53,889
And let's see what happens.
让我们看看会发生什么。 

432
00:18:54,089 --> 00:19:01,599
So first I start with word list which is empty list, character,
所以首先我从单词列表开始，它是空列表，字符， 

433
00:19:01,599 --> 00:19:08,709
lists, empty list.
列表，空列表。 

434
00:19:08,710 --> 00:19:11,329
Take the first character, it's alphanumeric,
以第一个字符为字母数字， 

435
00:19:11,329 --> 00:19:14,769
gets appended here, the second character, alphanumeric,
在此附加第二个字符字母数字， 

436
00:19:14,769 --> 00:19:17,139
appended here, third character, alphanumeric,
在此附加第三个字符，字母数字， 

437
00:19:17,140 --> 00:19:19,009
gets appended here.
被附加在这里。 

438
00:19:19,009 --> 00:19:20,980
Fourth character, not alphanumeric,
第四个字符，不是字母数字， 

439
00:19:20,980 --> 00:19:25,910
so I get to run lines 15 through 18.
所以我要运行第15至18行

440
00:19:25,910 --> 00:19:26,920
OK, I did the easy part.
好吧，我做了简单的部分。 

441
00:19:26,920 --> 00:19:28,700
Someone walk me through the hard part.
有人带领我度过了艰难的时刻。 

442
00:19:28,700 --> 00:19:33,399
What happens in lines 15 through 18?
第15至18行会发生什么？ 

443
00:19:33,599 --> 00:19:34,857
Yes.
是。 

444
00:19:34,857 --> 00:19:38,316
AUDIENCE: First, it takes that list and joins it
听众：首先，它接受该列表并将其加入

445
00:19:38,316 --> 00:19:40,789
into a string. [INAUDIBLE]
变成一个字符串。 [听不清] 

446
00:19:40,789 --> 00:19:43,549
VICTOR COSTAN: OK, so this is a list of characters.
 VICTOR COSTAN：好的，这是一个字符列表。 

447
00:19:43,549 --> 00:19:47,839
And join takes the list and makes a string out of it.
而join则获取列表并从中生成一个字符串。 

448
00:19:47,839 --> 00:19:50,839
So I'll have the string the.
这样我就得到了字符串。 

449
00:19:50,839 --> 00:19:53,389
OK, excellent.
好，很好

450
00:19:53,390 --> 00:19:55,369
AUDIENCE: And it converts it all to lower case.
听众：并将其全部转换为小写。 

451
00:19:55,569 --> 00:19:56,319
VICTOR COSTAN: OK.
维克多·科斯坦：好的。 

452
00:19:56,319 --> 00:20:00,207



453
00:20:00,208 --> 00:20:03,419
AUDIENCE: End up [INAUDIBLE] that to the word list.
听众：在单词列表中最后[听不清]。 

454
00:20:03,619 --> 00:20:05,619
VICTOR COSTAN: The world list is up here, right?
维克多·科斯坦（VICTOR COSTAN）：世界名单就在这里，对吧？ 

455
00:20:05,619 --> 00:20:10,412
So this is going to have the.
所以这将有。 

456
00:20:10,413 --> 00:20:13,836
AUDIENCE: And then it clears the character list, [INAUDIBLE].
听众：然后清除字符列表，[听不清]。 

457
00:20:13,836 --> 00:20:18,855



458
00:20:18,855 --> 00:20:19,605
VICTOR COSTAN: OK.
维克多·科斯坦：好的。 

459
00:20:19,605 --> 00:20:23,670



460
00:20:23,670 --> 00:20:31,680
So now as I go through the next word, I have F-O-X.
所以现在当我讲下一个单词时，我有FOX。 

461
00:20:31,680 --> 00:20:34,000
Then this becomes the word, and it gets added here.
然后，该词成为单词，并在此处添加。 

462
00:20:34,000 --> 00:20:40,680



463
00:20:40,680 --> 00:20:42,470
So on and so forth for everything.
对所有事物等等。 

464
00:20:42,470 --> 00:20:46,839
Do people see how this method works now?
人们现在看到这种方法如何工作了吗？ 

465
00:20:46,839 --> 00:20:50,359
I'm not getting that many nods, so questions.
我没有得到那么多的点头，所以提问。 

466
00:20:50,359 --> 00:20:52,439
If I don't get nods, I'll stop and you guys
如果我不点头，我会停下来，你们

467
00:20:52,440 --> 00:20:54,529
have to ask what you're confused about.
不得不问你对什么感到困惑。 

468
00:20:54,529 --> 00:20:57,230
AUDIENCE: I think it's a little tricky because instead
听众：我认为这有点棘手，因为

469
00:20:57,230 --> 00:21:00,051
of saying if it's not an alphanumeric character,
说如果它不是字母数字字符， 

470
00:21:00,051 --> 00:21:02,737
it's just like well, if the length of the list
如果列表的长度也一样

471
00:21:02,738 --> 00:21:04,591
is greater than 0, which threw me off initially,
大于0，最初让我失望

472
00:21:04,791 --> 00:21:07,609
but then I realized it was just, like, omission.
但后来我意识到这只是遗漏。 

473
00:21:07,609 --> 00:21:09,359
VICTOR COSTAN: OK, so why does it do this?
 VICTOR COSTAN：好的，那为什么要这样做呢？ 

474
00:21:09,359 --> 00:21:12,315
What is the point of the length of the character list?
字符列表长度的意义是什么？ 

475
00:21:12,316 --> 00:21:15,399
AUDIENCE: So that there are two spaces.
听众：所以有两个空格。 

476
00:21:15,599 --> 00:21:18,079
VICTOR COSTAN: Excellent.
 VICTOR COSTAN：太好了。 

477
00:21:18,079 --> 00:21:23,269
So here I was nice and I had one space, one space, one space.
所以在这里我很高兴，我只有一个空间，一个空间，一个空间。 

478
00:21:23,269 --> 00:21:26,410
But if I'm sloppy when I'm typing and I have two spaces
但是如果我打字时马马虎虎，我有两个空格

479
00:21:26,410 --> 00:21:31,950
here, then suppose this is space, space-- kind a small,
在这里，然后假设这是空间，空间-有点小， 

480
00:21:31,950 --> 00:21:33,059
but pretend.
但是假装

481
00:21:33,059 --> 00:21:34,549
Go with me here.
和我一起去

482
00:21:34,549 --> 00:21:37,019
So we got here.
所以我们到了。 

483
00:21:37,019 --> 00:21:38,470
We got the fox is.
我们得到了狐狸。 

484
00:21:38,470 --> 00:21:41,720



485
00:21:41,720 --> 00:21:45,419
And then this list is empty because line 18 just
然后此列表为空，因为第18行只是

486
00:21:45,619 --> 00:21:48,179
made it empty.
将其清空。 

487
00:21:48,180 --> 00:21:50,519
If I run the code the lines 15 through 18,
如果我在第15至18行运行代码， 

488
00:21:50,519 --> 00:21:53,930
it's going to add an empty word up here.
它会在这里添加一个空词。 

489
00:21:53,930 --> 00:21:57,279
And empty words aren't very useful.
空词不是很有用。 

490
00:21:57,279 --> 00:21:59,359
You'll see how many times the documents have
您会看到文件有多少次

491
00:21:59,359 --> 00:22:01,660
too many spaces in them, so that doesn't really help.
它们中有太多的空间，所以这实际上没有帮助。 

492
00:22:01,661 --> 00:22:03,411
AUDIENCE: I mean, isn't that not an issue,
听众：我的意思是，这不是问题， 

493
00:22:03,411 --> 00:22:07,470
because you call if C is L1 before you actually
因为您在实际使用之前先呼叫C是否为L1 

494
00:22:07,470 --> 00:22:09,149
get to that.
做到这一点。 

495
00:22:09,349 --> 00:22:12,399
So you'd run through it again, but you would still
所以你会再次经历它，但是你仍然会

496
00:22:12,400 --> 00:22:14,950
just skip over that.
跳过那件事。 

497
00:22:14,950 --> 00:22:18,029
That would fail, I mean it would not
那会失败，我的意思是不会

498
00:22:18,029 --> 00:22:19,279
do anything for that equation.
为该方程式做任何事情。 

499
00:22:19,279 --> 00:22:21,349
VICTOR COSTAN: So first space.
维克多·科斯坦：那么第一个空间。 

500
00:22:21,349 --> 00:22:22,750
C as L now fails.
 C作为L现在失败。 

501
00:22:22,750 --> 00:22:24,717
I run lines 15 through 18.
我运行第15至18行。 

502
00:22:24,717 --> 00:22:25,099
AUDIENCE: Yep.
听众：是的。 

503
00:22:25,299 --> 00:22:26,174
VICTOR COSTAN: Right?
维克多·科斯坦：对吗？ 

504
00:22:26,174 --> 00:22:27,169
I have is here.
我在这里。 

505
00:22:27,170 --> 00:22:29,095
This becomes empty.
这变成空的。 

506
00:22:29,095 --> 00:22:29,970
AUDIENCE: Yep.
听众：是的。 

507
00:22:29,970 --> 00:22:33,557
AUDIENCE: Second space, C as L now fails again.
听众：第二空间，C为L现在再次失败。 

508
00:22:33,557 --> 00:22:34,140
AUDIENCE: Yep.
听众：是的。 

509
00:22:34,140 --> 00:22:36,470
VICTOR COSTAN: And if I wouldn't have the length check,
维克多·科斯坦：如果我没有长度检查， 

510
00:22:36,470 --> 00:22:40,079
it would run lines 15 through 18 again.
它将再次运行15至18行。 

511
00:22:40,079 --> 00:22:40,961
AUDIENCE: Oh, OK.
听众：哦，好。 

512
00:22:40,961 --> 00:22:43,910
[INAUDIBLE]
 [听不清] 

513
00:22:43,910 --> 00:22:46,950
VICTOR COSTAN: OK, so this is what it's trying to prevent.
 VICTOR COSTAN：好的，这就是它要防止的事情。 

514
00:22:46,950 --> 00:22:49,284
So you can see that this code looks complicated, right?
这样您就可以看到该代码看起来很复杂，对吧？ 

515
00:22:49,284 --> 00:22:51,450
It's trying to do a lot of things, it's complicated,
它正在尝试做很多事情，非常复杂， 

516
00:22:51,450 --> 00:22:53,809
it's hard to analyze.
很难分析。 

517
00:22:53,809 --> 00:22:55,099
Oh, well, let's go with it.
哦，好吧，让我们一起去吧。 

518
00:22:55,099 --> 00:22:59,589
Let's try to finish it up quickly.
让我们尝试快速完成它。 

519
00:22:59,589 --> 00:23:02,569
So now that we know what it does, let's
现在我们知道了它的作用，让我们

520
00:23:02,569 --> 00:23:04,960
try to figure out how many times each line runs
尝试找出每行运行多少次

521
00:23:04,960 --> 00:23:06,650
and what's the cost?
费用是多少？ 

522
00:23:06,650 --> 00:23:07,980
Yes.
是。 

523
00:23:07,980 --> 00:23:12,829
AUDIENCE: So I think the total cost is N times 1
观众：所以我认为总费用是N乘以1 

524
00:23:12,829 --> 00:23:17,034
minus W over W plus 1.
减去W减去W加1。 

525
00:23:17,035 --> 00:23:18,042
VICTOR COSTAN: Wait, so here?
维克多·科斯坦：等一下，在这里吗？ 

526
00:23:18,242 --> 00:23:19,169
AUDIENCE: Yeah.
听众：是的。 

527
00:23:19,170 --> 00:23:24,830
VICTOR COSTAN: OK, so you're saying N times 1 minus.
 VICTOR COSTAN：好的，你是说N乘以1减。 

528
00:23:25,030 --> 00:23:25,530
OK.
好。 

529
00:23:25,530 --> 00:23:28,809



530
00:23:28,809 --> 00:23:31,789
Why do you say that?
为什么这么说

531
00:23:31,789 --> 00:23:33,182
I like it, but why?
我喜欢，但是为什么呢？ 

532
00:23:33,182 --> 00:23:36,017
OK, it's because it's everything that is in the character,
好吧，这是因为角色中的一切， 

533
00:23:36,017 --> 00:23:38,471
and the line above it was characters--
上面的线是字符

534
00:23:38,471 --> 00:23:39,220
VICTOR COSTAN: OK.
维克多·科斯坦：好的。 

535
00:23:39,220 --> 00:23:40,220
AUDIENCE: --all alphanumeric, [INAUDIBLE]
听众：-所有字母数字，[听不清] 

536
00:23:40,220 --> 00:23:41,970
VICTOR COSTAN: So basically spaces, right?
 VICTOR COSTAN：基本上是空格，对吗？ 

537
00:23:41,970 --> 00:23:44,160
If we have word, space, word, space, word, space,
如果我们有单词，空格，单词，空格，单词，空格， 

538
00:23:44,160 --> 00:23:46,400
this happens for all the spaces.
所有的空间都会发生这种情况。 

539
00:23:46,400 --> 00:23:47,500
Cool.
凉。 

540
00:23:47,500 --> 00:23:48,967
So this is good.
所以这很好。 

541
00:23:48,967 --> 00:23:50,224
I'm going to make it a bit simpler.
我将使其变得更简单。 

542
00:23:50,424 --> 00:23:54,119



543
00:23:54,119 --> 00:23:56,974
Same thing, it's just that it's slightly less intimidating.
同样的事情，只是它的威胁少了一点。 

544
00:23:56,974 --> 00:23:59,039
AUDIENCE: Oh, yeah.
听众：哦，是的。 

545
00:23:59,039 --> 00:24:00,649
VICTOR COSTAN: Cool, thank you.
维克多·科斯坦：太好了，谢谢。 

546
00:24:00,650 --> 00:24:03,000
Very brave, come up first.
非常勇敢，先出来。 

547
00:24:03,000 --> 00:24:05,049
What's the running time for line 14?
 14号线的运行时间是多少？ 

548
00:24:05,049 --> 00:24:06,994
So, cost for running it once.
因此，运行一次的成本。 

549
00:24:06,994 --> 00:24:10,319



550
00:24:10,319 --> 00:24:12,109
AUDIENCE: Constant.
听众：不变。 

551
00:24:12,109 --> 00:24:12,609
Excellent.
优秀的。 

552
00:24:12,609 --> 00:24:14,849
VICTOR COSTAN: I like you guys.
维克多·科斯坦：我喜欢你们。 

553
00:24:14,849 --> 00:24:15,779
Nice.
真好

554
00:24:15,779 --> 00:24:19,019
Line 15, how much time does it to take
第15行，需要多少时间

555
00:24:19,019 --> 00:24:21,879
to take characters and put them into a list?
接受角色并将其放入列表？ 

556
00:24:21,880 --> 00:24:23,909
AUDIENCE: N?
听众：不？ 

557
00:24:24,109 --> 00:24:24,859
VICTOR COSTAN: N--
维克多·科斯坦（VICTOR COSTAN）：N-- 

558
00:24:24,859 --> 00:24:25,119
AUDIENCE: [INAUDIBLE]
观众：[听不清] 

559
00:24:25,119 --> 00:24:27,339
VICTOR COSTAN: --where N is the size of the list, right?
维克多·科斯坦（VICTOR COSTAN）：-其中N是列表的大小，对吗？ 

560
00:24:27,339 --> 00:24:27,799
AUDIENCE: Yeah.
听众：是的。 

561
00:24:27,799 --> 00:24:28,549
VICTOR COSTAN: OK.
维克多·科斯坦：好的。 

562
00:24:28,549 --> 00:24:30,813
So what's the size of the list now?
那么，列表的大小是多少？ 

563
00:24:30,814 --> 00:24:33,153
AUDIENCE: [INAUDIBLE]
观众：[听不清] 

564
00:24:33,153 --> 00:24:34,089
AUDIENCE: [INAUDIBLE]
观众：[听不清] 

565
00:24:34,089 --> 00:24:36,429
VICTOR COSTAN: Yep.
维克多·科斯坦：是的。 

566
00:24:36,430 --> 00:24:39,342
OK, so when you're using more than one letter,
好，所以当您使用多个字母时， 

567
00:24:39,342 --> 00:24:41,349
the problem is you have to pay attention to which one
问题是你要注意哪一个

568
00:24:41,549 --> 00:24:42,090
you're using.
您正在使用。 

569
00:24:42,090 --> 00:24:44,079
Because when we teach algorithms,
因为当我们教算法时

570
00:24:44,079 --> 00:24:46,909
we say oh, this is N, this is N squared, so on and so forth.
我们说哦，这是N，这是N的平方，依此类推。 

571
00:24:46,910 --> 00:24:49,009
You have to replace it to the right letter.
您必须将其替换为正确的字母。 

572
00:24:49,009 --> 00:24:51,414
And I get confused about this all the time, so--
我一直对此感到困惑，所以- 

573
00:24:51,414 --> 00:24:51,809
AUDIENCE: [INAUDIBLE]
观众：[听不清] 

574
00:24:51,809 --> 00:24:52,629
VICTOR COSTAN: --a serious problem.
维克多·科斯坦：-一个严重的问题。 

575
00:24:52,630 --> 00:24:53,614
AUDIENCE: --columns?
听众：-栏？ 

576
00:24:53,614 --> 00:24:56,079
What are the two columns?
两列是什么？ 

577
00:24:56,079 --> 00:24:59,269
VICTOR COSTAN: So this is the cost of running a line once,
维克多·科斯坦：这就是一次生产线的成本， 

578
00:24:59,269 --> 00:25:01,296
and this is how many times it's run.
这是运行了多少次。 

579
00:25:01,296 --> 00:25:02,130
AUDIENCE: Oh, OK.
听众：哦，好。 

580
00:25:02,130 --> 00:25:02,930
VICTOR COSTAN: Thanks for the question.
维克多·科斯坦：谢谢你的提问。 

581
00:25:02,930 --> 00:25:04,259
I should have said that in the beginning.
我应该在一开始就这么说。 

582
00:25:04,259 --> 00:25:04,759
Thank you.
谢谢。 

583
00:25:04,759 --> 00:25:07,480



584
00:25:07,480 --> 00:25:09,230
OK, let's make this a little bit faster
好吧，让我们更快一点

585
00:25:09,230 --> 00:25:12,490
and notice that lines 15 through 18
并注意第15至18行

586
00:25:12,490 --> 00:25:14,788
all run the same number of times, right?
都运行相同的次数，对不对？ 

587
00:25:14,788 --> 00:25:16,579
They're in the if, and there's nothing else
他们在如果，没有其他

588
00:25:16,579 --> 00:25:19,669
that's changes the control flow there.
那改变了那里的控制流程。 

589
00:25:19,670 --> 00:25:28,119
So lines 15 through 18 are O and divided by W plus 1.
因此，第15至18行是O，然后除以W加1。 

590
00:25:28,319 --> 00:25:29,740
All right, line 16.
好的，第16行。 

591
00:25:29,740 --> 00:25:30,930
Take a word.
一句话

592
00:25:30,930 --> 00:25:33,399
So take a string and make another string
因此，取一个字符串并制作另一个字符串

593
00:25:33,599 --> 00:25:37,069
where each character is the lowercase version.
其中每个字符均为小写版本。 

594
00:25:37,069 --> 00:25:38,359
AUDIENCE: [INAUDIBLE]
观众：[听不清] 

595
00:25:38,359 --> 00:25:39,609
VICTOR COSTAN: OK, cool.
 VICTOR COSTAN：好的，很酷。 

596
00:25:39,609 --> 00:25:41,642
Why W, intuitively?
为什么是W，直觉上呢？ 

597
00:25:41,643 --> 00:25:44,884
AUDIENCE: Because [INAUDIBLE] has to check to make sure
听众：因为[听不清]必须检查以确保

598
00:25:44,884 --> 00:25:46,929
[INAUDIBLE]
 [听不清] 

599
00:25:46,929 --> 00:25:47,720
VICTOR COSTAN: Yep.
维克多·科斯坦：是的。 

600
00:25:47,720 --> 00:25:48,750
AUDIENCE: [INAUDIBLE]
观众：[听不清] 

601
00:25:48,750 --> 00:25:50,999
VICTOR COSTAN: Yeah, so if you have a 10,000 character
维克多·科斯坦：是的，如果您的字符是10,000， 

602
00:25:50,999 --> 00:25:53,190
string you, have to go through 10,000 characters.
字符串，您必须输入10,000个字符。 

603
00:25:53,190 --> 00:25:55,210
Very good.
很好。 

604
00:25:55,210 --> 00:25:58,031
Append 917.
追加917。 

605
00:25:58,031 --> 00:26:00,511
AUDIENCE: [INAUDIBLE]
观众：[听不清] 

606
00:26:00,511 --> 00:26:02,000
VICTOR COSTAN: Sweet.
维克多·科斯坦：甜。 

607
00:26:02,000 --> 00:26:06,565
And line 18, we said the character list of length list.
在第18行，我们说了长度列表的字符列表。 

608
00:26:06,565 --> 00:26:07,530
AUDIENCE: [INAUDIBLE]
观众：[听不清] 

609
00:26:07,530 --> 00:26:13,169
VICTOR COSTAN: [INAUDIBLE] OK, how many times
 VICTOR COSTAN：[听不清]好，几次

610
00:26:13,170 --> 00:26:18,505
do lines 19 through 23 run?
第19至23行运行吗？ 

611
00:26:18,505 --> 00:26:19,400
AUDIENCE: Once.
听众：一次。 

612
00:26:19,400 --> 00:26:20,407
VICTOR COSTAN: At most, once.
维克多·科斯坦：最多一次。 

613
00:26:20,607 --> 00:26:24,539



614
00:26:24,539 --> 00:26:26,726
AUDIENCE: [INAUDIBLE]
观众：[听不清] 

615
00:26:26,727 --> 00:26:29,109
VICTOR COSTAN: Can anyone figure out what's the point of them?
维克多·科斯坦：有谁知道他们的意思？ 

616
00:26:29,309 --> 00:26:33,098



617
00:26:33,098 --> 00:26:36,648
AUDIENCE: Catch any trailing [INAUDIBLE]
听众：赶上任何尾随的[听不清] 

618
00:26:36,648 --> 00:26:37,481
VICTOR COSTAN: Good.
维克多·科斯坦：好。 

619
00:26:37,481 --> 00:26:40,403
If you ended on the last letter of a word,
如果您以单词的最后一个字母结尾， 

620
00:26:40,403 --> 00:26:42,359
you want to make sure you catch that word.
您想确保您抓住了这个词。 

621
00:26:42,359 --> 00:26:42,869
VICTOR COSTAN: All right.
维克多·科斯坦：好的。 

622
00:26:42,869 --> 00:26:43,819
AUDIENCE: [INAUDIBLE]
观众：[听不清] 

623
00:26:43,819 --> 00:26:44,860
VICTOR COSTAN: Very good.
 VICTOR COSTAN：很好。 

624
00:26:44,861 --> 00:26:45,829
So I find it here.
所以我在这里找到它。 

625
00:26:46,029 --> 00:26:48,980
Then after I'm done with the loop at line 19
然后在完成第19行的循环之后

626
00:26:48,980 --> 00:26:52,894
what the word list would have, the fox is.
单词表应该是什么，狐狸就是。 

627
00:26:52,894 --> 00:26:54,269
And then the character list would
然后字符列表将

628
00:26:54,269 --> 00:26:56,150
have the characters for outside.
有外面的字符。 

629
00:26:56,150 --> 00:26:58,970
If I return the word list, woops, I just missed a word.
如果我返回单词列表，哇，我只是错过了一个单词。 

630
00:26:58,970 --> 00:27:07,430
So lines 20 through 22 are a copy of lines 15 through 17,
因此，第20至22行是第15至17行的副本

631
00:27:07,430 --> 00:27:10,909
and they take care of the last word.
他们会处理最后一句话。 

632
00:27:11,109 --> 00:27:14,719
So line 19 is an if, and it takes the length of a list
所以第19行是if，它占用列表的长度

633
00:27:14,720 --> 00:27:16,250
and compares it to the number.
并将其与数字进行比较。 

634
00:27:16,250 --> 00:27:19,344
What's the cost of that?
费用是多少？ 

635
00:27:19,344 --> 00:27:20,200
AUDIENCE: Constant.
听众：不变。 

636
00:27:20,200 --> 00:27:21,730
VICTOR COSTAN: OK, very good.
 VICTOR COSTAN：好的，很好。 

637
00:27:21,730 --> 00:27:24,980
Checking list length in Python is constant time.
在Python中检查列表长度是固定时间。 

638
00:27:24,980 --> 00:27:27,339
We did that in lecture.
我们在演讲中做到了。 

639
00:27:27,339 --> 00:27:29,490
How about lines 20 through 22?
第20到22行如何？ 

640
00:27:29,490 --> 00:27:32,261



641
00:27:32,261 --> 00:27:33,720
I just gave it away, guys, come on.
伙计们，我只是把它给送了，来吧。 

642
00:27:33,720 --> 00:27:34,529
Someone--
有人- 

643
00:27:34,529 --> 00:27:36,379
AUDIENCE: The same as 15 through 17.
听众：与15到17相同。 

644
00:27:36,380 --> 00:27:38,890
VICTOR COSTAN: OK, same as 15 through 17.
维克多·波士坦：好的，和15到17一样。 

645
00:27:38,890 --> 00:27:41,460
W, W, 1.
 W，W，1。 

646
00:27:41,460 --> 00:27:46,480
Line 23, return constant time.
第23行，返回恒定时间。 

647
00:27:46,480 --> 00:27:50,480
OK, so now we know how much it takes to run a line once,
好，现在我们知道一次运行一条线需要多少钱， 

648
00:27:50,480 --> 00:27:52,640
how many times each line runs.
每行运行多少次。 

649
00:27:52,640 --> 00:27:55,159
So we're going to do a dot product of these guys.
因此，我们将为这些家伙做一个点积。 

650
00:27:55,359 --> 00:27:57,919
See, dot products are useful.
看，点积是有用的。 

651
00:27:57,920 --> 00:28:00,519
And if we do a dot product of these guys,
如果我们做这些家伙的点积， 

652
00:28:00,519 --> 00:28:03,180
we're going to get the total running time for the function.
我们将获得该函数的总运行时间。 

653
00:28:03,180 --> 00:28:05,105
So let's compute the partial terms.
因此，让我们计算局部项。 

654
00:28:05,105 --> 00:28:06,349
AUDIENCE: [INAUDIBLE]
观众：[听不清] 

655
00:28:06,349 --> 00:28:07,309
VICTOR COSTAN: I'm not going to write them down.
维克多·科斯坦：我不会写下来。 

656
00:28:07,309 --> 00:28:09,730
Let's just go through them and figure out what they are.
让我们通过它们来弄清楚它们是什么。 

657
00:28:09,730 --> 00:28:13,493
So you guys say them.
你们这么说。 

658
00:28:13,493 --> 00:28:17,963
AUDIENCE: 1, 1, N, N, weird equation--
观众：1、1，N，N，怪异的方程式

659
00:28:17,963 --> 00:28:19,379
VICTOR COSTAN: OK, weird equation,
 VICTOR COSTAN：好的，怪异的方程式， 

660
00:28:19,380 --> 00:28:20,976
what was the important part?
重要的部分是什么？ 

661
00:28:21,176 --> 00:28:22,009
[INTERPOSING VOICES]
 [插入语音] 

662
00:28:22,009 --> 00:28:23,549
VICTOR COSTAN: Yeah, the important part.
维克多·科斯坦：是的，很重要。 

663
00:28:23,549 --> 00:28:24,840
The important part is N, right?
重要的是N，对不对？ 

664
00:28:24,840 --> 00:28:27,783
This is some constant times N, so N.
这是N的常数倍，所以N。 

665
00:28:27,784 --> 00:28:35,670
AUDIENCE: N, N, N, N, N, N, 1, 1.
观众：N，N，N，N，N，N，1、1。 

666
00:28:35,670 --> 00:28:37,205
VICTOR COSTAN: Pay attention.
维克多·科斯坦：注意。 

667
00:28:37,405 --> 00:28:39,279
AUDIENCE: 1, N.
听众：1，N。 

668
00:28:39,279 --> 00:28:41,099
VICTOR COSTAN: Pay attention.
维克多·科斯坦：注意。 

669
00:28:41,099 --> 00:28:42,494
It's not N, it's not 1.
不是N，不是1。 

670
00:28:42,494 --> 00:28:43,369
AUDIENCE: [INAUDIBLE]
观众：[听不清] 

671
00:28:43,369 --> 00:28:45,129
VICTOR COSTAN: OK, actually is 1 I guess,
 VICTOR COSTAN：好的，实际上我是1 

672
00:28:45,130 --> 00:28:46,740
if you think that W is a constant.
如果您认为W是一个常数。 

673
00:28:46,740 --> 00:28:47,364
Sorry.
抱歉。 

674
00:28:47,364 --> 00:28:48,529
AUDIENCE: You're testing us.
听众：您正在测试我们。 

675
00:28:48,529 --> 00:28:49,799
VICTOR COSTAN: OK.
维克多·科斯坦：好的。 

676
00:28:49,799 --> 00:28:52,330
1, 1.
 1、1 

677
00:28:52,330 --> 00:28:54,579
VICTOR COSTAN: So I heard two numbers, N and 1, right?
维克多·科斯坦（VICTOR COSTAN）：我听到了两个数字N和1，对吗？ 

678
00:28:54,579 --> 00:28:59,769
So this is 0 of N plus 1, which is order N,
所以这是N加1的0，即N阶， 

679
00:28:59,769 --> 00:29:04,369
because as N goes to infinity, 1 becomes really tiny.
因为当N达到无穷大时，1变得很小。 

680
00:29:04,369 --> 00:29:07,659
OK, so this is how you analyze a function.
好的，这就是分析函数的方式。 

681
00:29:07,660 --> 00:29:10,700
Big functions are horribly painful to analyze because you
大功能很难分析，因为您

682
00:29:10,700 --> 00:29:14,759
have to look at each line and do this kind of reasoning.
必须查看每一行并进行这种推理。 

683
00:29:14,759 --> 00:29:16,640
And it's not even a top level function here,
而且这里甚至不是顶级功能， 

684
00:29:16,640 --> 00:29:19,139
so I don't even get to write anything here yet.
所以我什至没有写任何东西在这里。 

685
00:29:19,339 --> 00:29:22,490
So get words from string takes order and time
因此从字符串中获取单词需要顺序和时间

686
00:29:22,490 --> 00:29:24,980
where N is the length of a line.
其中N是线的长度。 

687
00:29:24,980 --> 00:29:28,099
Let's look at get words from line list.
让我们看看从行列表中获取单词。 

688
00:29:28,099 --> 00:29:29,288
AUDIENCE: I have a question.
听众：我有一个问题。 

689
00:29:29,288 --> 00:29:30,079
VICTOR COSTAN: Yes.
维克多·科斯坦：是的。 

690
00:29:30,079 --> 00:29:33,544
AUDIENCE: So [INAUDIBLE] is W characters long?
听众：那么[听不清] W个字符长吗？ 

691
00:29:33,545 --> 00:29:37,699
Like, does it matter if the [INAUDIBLE]
就像，[音频不清晰]是否重要

692
00:29:37,699 --> 00:29:38,990
VICTOR COSTAN: Does it matter--
 COSTAN COSTAN：这有关系吗？ 

693
00:29:38,990 --> 00:29:41,470
AUDIENCE: [INAUDIBLE] make that assumption of that?
听众：[听不清]做出那个假设？ 

694
00:29:41,470 --> 00:29:45,759
VICTOR COSTAN: So that I can reason for lines 15 and 16.
维克托·科斯坦（VICTOR COSTAN）：这样我就可以推断出第15和16行。 

695
00:29:45,759 --> 00:29:49,640
I can reason through them easily if I have a content length.
如果我有内容长度，我可以轻松地通过它们进行推理。 

696
00:29:49,640 --> 00:29:52,410
It turns out that if you have an average length,
事实证明，如果您有一个平均长度， 

697
00:29:52,410 --> 00:29:54,379
the results are going to be the same.
结果将是相同的。 

698
00:29:54,579 --> 00:30:03,109
Like overall, if you look at the running time as a sum of what's
与整体情况一样，如果您将运行时间作为总和

699
00:30:03,109 --> 00:30:05,729
the running time for converting all the words to lowercase
将所有单词转换为小写的运行时间

700
00:30:05,730 --> 00:30:07,490
and then appending them to the list.
然后将它们附加到列表中。 

701
00:30:07,490 --> 00:30:10,140
The sum of those is still going to be n N,
这些总和仍然是n N， 

702
00:30:10,140 --> 00:30:12,230
but that takes a bit more time to reason through
但这需要花费更多时间进行推理

703
00:30:12,230 --> 00:30:13,200
so I took a shortcut.
所以我走了一条捷径。 

704
00:30:13,200 --> 00:30:17,201



705
00:30:17,201 --> 00:30:19,789
Are you a math major, by the way?
你是数学专业吗？ 

706
00:30:19,789 --> 00:30:21,789
You're very rigorous.
你很严谨

707
00:30:21,789 --> 00:30:22,450
OK.
好。 

708
00:30:22,450 --> 00:30:24,549
So this is good, it's always good to try
所以这很好，尝试总是好的

709
00:30:24,549 --> 00:30:26,149
to keep this in the back of your head
把它放在你的脑后

710
00:30:26,150 --> 00:30:31,259
to make sure you don't fall for a trap.
确保您不会陷入陷阱。 

711
00:30:31,259 --> 00:30:33,789
So get words from string order N,
因此，从字符串顺序N中获取单词， 

712
00:30:33,789 --> 00:30:36,149
and we're trying to figure out get words from line list.
并且我们正在尝试从行列表中找出答案。 

713
00:30:36,150 --> 00:30:38,889
Any more questions before I do that?
在此之前还有其他问题吗？ 

714
00:30:39,089 --> 00:30:42,529
Or does anyone want to tell me I'm wrong?
还是有人要告诉我我错了？ 

715
00:30:42,529 --> 00:30:44,609
OK, good.
好好

716
00:30:44,609 --> 00:30:47,319
So get words from line list.
因此，从行列表中获取单词。 

717
00:30:47,319 --> 00:30:50,889
Lines 2 through 6.
第2至6行。 

718
00:30:50,890 --> 00:30:52,899
2 3, 4, 5, 6.
 2 3、4、5、6 

719
00:30:53,099 --> 00:30:55,689



720
00:30:55,690 --> 00:30:58,034
Line 2.
第2行。 

721
00:30:58,034 --> 00:30:59,659
AUDIENCE: 1.
听众：1。 

722
00:30:59,859 --> 00:31:02,850
VICTOR COSTAN: OK, cost 1, how many times does it run?
维克多·科斯坦（VICTOR COSTAN）：好的，费用1，它运行了多少次？ 

723
00:31:02,851 --> 00:31:03,476
AUDIENCE: Once.
听众：一次。 

724
00:31:03,476 --> 00:31:05,089
VICTOR COSTAN: Cool.
维克多·科斯坦：太好了。 

725
00:31:05,289 --> 00:31:07,990
Line 3.
第3行。 

726
00:31:07,990 --> 00:31:09,170
We need a new number, right?
我们需要一个新号码，对不对？ 

727
00:31:09,170 --> 00:31:12,000
We need the number of lines in a document.
我们需要文档中的行数。 

728
00:31:12,000 --> 00:31:13,825
Let's say we have Z lines.
假设我们有Z条线。 

729
00:31:13,825 --> 00:31:19,009



730
00:31:19,009 --> 00:31:25,710
So line 3 runs Z times, and 4 and 5 are in a loop
所以第3行运行Z次，而第4行和第5行循环

731
00:31:25,710 --> 00:31:30,692
so they also run Z times What's the cost for line 4?
因此他们也要运行Z次4号线的成本是多少？ 

732
00:31:30,692 --> 00:31:33,323



733
00:31:33,523 --> 00:31:34,203
AUDIENCE: 1.
听众：1。 

734
00:31:34,203 --> 00:31:35,244
VICTOR COSTAN: Excellent.
 VICTOR COSTAN：太好了。 

735
00:31:35,244 --> 00:31:38,869



736
00:31:38,869 --> 00:31:41,933
What's the cost for line 3?
第3行的费用是多少？ 

737
00:31:41,933 --> 00:31:42,789
AUDIENCE: 1.
听众：1。 

738
00:31:42,789 --> 00:31:44,950
VICTOR COSTAN: 1.
维克多·科斯坦：1。 

739
00:31:44,950 --> 00:31:46,389
And what is the cost for line 5?
第5行的费用是多少？ 

740
00:31:46,589 --> 00:31:54,397



741
00:31:54,397 --> 00:31:55,879
AUDIENCE: Looks constant.
听众：看起来很稳定。 

742
00:31:55,880 --> 00:31:58,125
VICTOR COSTAN: Looks constant, OK.
 VICTOR COSTAN：看起来很稳定，好的。 

743
00:31:58,125 --> 00:31:59,000
AUDIENCE: [INAUDIBLE]
观众：[听不清] 

744
00:31:59,000 --> 00:32:03,029
VICTOR COSTAN: Does anyone else think it looks constant?
维克多·科斯坦：其他人认为它看起来很稳定吗？ 

745
00:32:03,029 --> 00:32:04,617
Yeah.
是的

746
00:32:04,617 --> 00:32:06,099
AUDIENCE: It's a trap.
听众：这是一个陷阱。 

747
00:32:06,099 --> 00:32:07,449
VICTOR COSTAN: It's a trap.
维克多·科斯坦：这是一个陷阱。 

748
00:32:07,450 --> 00:32:08,948
It's a trap.
这是一个陷阱。 

749
00:32:08,948 --> 00:32:10,109
[INTERPOSING VOICES]
 [插入语音] 

750
00:32:10,309 --> 00:32:11,809
AUDIENCE: --length of the two lists.
听众：-两个列表的长度。 

751
00:32:11,809 --> 00:32:12,649
VICTOR COSTAN: OK.
维克多·科斯坦：好的。 

752
00:32:12,650 --> 00:32:14,880
Good.
好。 

753
00:32:14,880 --> 00:32:16,879
You paid attention in lecture, right?
你在讲课上注意了吧？ 

754
00:32:17,079 --> 00:32:17,990
AUDIENCE: I try.
听众：我尝试。 

755
00:32:17,990 --> 00:32:19,809
VICTOR COSTAN: Nice.
维克多·科斯坦：好的。 

756
00:32:19,809 --> 00:32:25,829
OK, so we have plus as an operator,
好，所以我们有加号作为运算符， 

757
00:32:25,829 --> 00:32:29,279
and suppose we work with two lists.
并假设我们使用两个列表。 

758
00:32:29,279 --> 00:32:34,410
The first list is 1, 2, 3, all the way through 1,000.
第一个列表是1，2，3，一直到1,000。 

759
00:32:34,410 --> 00:32:39,380
And the second list is 1, 2, 3.
第二个列表是1、2、3。 

760
00:32:39,380 --> 00:32:41,809
So when you code plus to combine them,
因此，当您编写代码并进行合并时， 

761
00:32:42,009 --> 00:32:46,170
if you say something like C equals A plus B,
如果您说C等于A加B， 

762
00:32:46,170 --> 00:32:49,160
you would expect that-- if this is A, by the way
您会期望-如果这是A，那么

763
00:32:49,160 --> 00:32:53,380
and this is B-- you would expect that after you call this A is
这是B-您希望在调用此A后

764
00:32:53,380 --> 00:32:55,919
still this, B is still this, and C
仍然是这个，B仍然是这个，C 

765
00:32:56,119 --> 00:32:58,739
is a list that contains everything.
是包含所有内容的列表。 

766
00:32:58,740 --> 00:33:04,069
So because of that, what plus has to do is make a new list,
因此，正因为如此，所以要做一个新列表， 

767
00:33:04,069 --> 00:33:07,349
append all the elements here, append all the elements here.
在此处附加所有元素，在此处附加所有元素。 

768
00:33:07,349 --> 00:33:10,629
So the cost of this if this list is 1,000 and this list is 3
因此，如果此列表为1,000，而此列表为3，则此成本

769
00:33:10,630 --> 00:33:11,940
is 1,003.
是1,003。 

770
00:33:11,940 --> 00:33:17,139
Or if you have two lists of length, L1 and L2
或者，如果您有两个长度列表，L1和L2 

771
00:33:17,339 --> 00:33:22,579
the cost is order of L1 plus L2.
成本是L1加L2的阶数。 

772
00:33:22,579 --> 00:33:24,919
Now there's another Python method called extend,
现在有另一个Python方法叫做extend， 

773
00:33:24,920 --> 00:33:28,432
which does what I think you would expect plus
我想你会期待什么

774
00:33:28,432 --> 00:33:29,640
to do in terms of efficiency.
在效率方面要做。 

775
00:33:29,640 --> 00:33:32,819



776
00:33:33,019 --> 00:33:36,670
So what extend does is you call it a 1 or A on one list,
因此，扩展功能是在一个列表中将其称为1或A， 

777
00:33:36,670 --> 00:33:38,409
give it the other list, and it's going
给它另一个清单，它会

778
00:33:38,609 --> 00:33:40,259
to take each element in the second list
采取第二个列表中的每个元素

779
00:33:40,259 --> 00:33:43,019
and append it to the first list.
并将其附加到第一个列表。 

780
00:33:43,019 --> 00:33:47,049
So for each element here, it calls append on this list.
因此，对于这里的每个元素，它都会在此列表上调用append。 

781
00:33:47,049 --> 00:33:48,745
So what's the running time for extend?
那么延长运行时间是多少？ 

782
00:33:48,746 --> 00:33:49,621
AUDIENCE: [INAUDIBLE]
观众：[听不清] 

783
00:33:49,621 --> 00:33:52,920



784
00:33:52,920 --> 00:33:55,226
VICTOR COSTAN: OK, there are too many directions and--
 COSTAN COSTAN：好的，方向太多了，而且- 

785
00:33:55,226 --> 00:33:56,200
AUDIENCE: Length of the second list.
听众：第二个列表的长度。 

786
00:33:56,200 --> 00:33:58,365
VICTOR COSTAN: Length of the second list, excellent.
 VICTOR COSTAN：第二名的长度，非常好。 

787
00:33:58,365 --> 00:34:03,210
So two lists, L1, L2, order of L2.
因此，有两个列表L1，L2和L2的顺序。 

788
00:34:03,210 --> 00:34:05,159
So it doesn't matter this is 1,000 elements
所以这没有关系1,000个元素

789
00:34:05,359 --> 00:34:08,130
are a million elements, appending three elements is
是一百万个元素，附加三个元素是

790
00:34:08,130 --> 00:34:11,739
going to take time proportional to three.
将花费与三成比例的时间。 

791
00:34:11,739 --> 00:34:14,860
OK now, let's see what's going on here.
现在，让我们看看这里发生了什么。 

792
00:34:14,860 --> 00:34:19,099
So we have Z lines and characters in a line.
因此，我们在一行中有Z行和字符。 

793
00:34:19,099 --> 00:34:22,519



794
00:34:22,519 --> 00:34:24,730
I think I want a nicer constant.
我想我想要一个更好的常数。 

795
00:34:24,730 --> 00:34:28,068



796
00:34:28,068 --> 00:34:29,360
No, let's go with this for now.
不，现在让我们开始吧。 

797
00:34:29,360 --> 00:34:32,039



798
00:34:32,239 --> 00:34:34,649
AUDIENCE: [INAUDIBLE] lines.
听众：[听不清]行。 

799
00:34:34,650 --> 00:34:38,019
VICTOR COSTAN: So this is the length of a word.
维克多·科斯坦：这就是一个字的长度。 

800
00:34:38,019 --> 00:34:40,019
Let's see, how many words will I have in a line?
让我们看看，一行中有多少个单词？ 

801
00:34:40,019 --> 00:34:47,530
Let's say I have K words in a line, which is N divided by W.
假设我一行中有K个单词，即N除以W。 

802
00:34:47,530 --> 00:34:49,989
So I know that to get words from string
所以我知道从字符串中获取单词

803
00:34:49,989 --> 00:34:55,219
returns a list of size K. So if that is the case, then
返回大小为K的列表。如果是这种情况，则

804
00:34:55,219 --> 00:34:59,820
the first time line 5 runs, word list is empty.
第一次运行第5行时，单词列表为空。 

805
00:34:59,820 --> 00:35:01,380
And it's going to get K elements.
它将获得K个元素。 

806
00:35:01,579 --> 00:35:05,309
The second time it runs, word list has K elements
第二次运行时，单词列表包含K个元素

807
00:35:05,309 --> 00:35:06,529
and gets K more.
得到K多

808
00:35:06,530 --> 00:35:09,590
Third time, it has 2K elements, it gets K more.
第三次，它具有2K个元素，又增加了K个。 

809
00:35:09,590 --> 00:35:12,420
So the running time for this looks like this.
因此，其运行时间如下所示。 

810
00:35:12,420 --> 00:35:19,150
K plus 2K plus 3K plus 4K all the way
 K加2K加3K加4K 

811
00:35:19,150 --> 00:35:23,010
until when I'm at the last line, if I have Z lines.
直到我在最后一行，如果我有Z行。 

812
00:35:23,010 --> 00:35:27,519
I had Z minus 1 times K elements in the list,
在列表中，我的Z减去K的1倍， 

813
00:35:27,719 --> 00:35:30,000
because I have Z minus 1 lines and I put all the words
因为我有Z减去1行，所以我把所有单词

814
00:35:30,000 --> 00:35:35,079
in the list, and I'm adding K more words.
在列表中，我要再添加K个单词。 

815
00:35:35,079 --> 00:35:43,759
So total, Z times K running time.
因此，总计为Z乘以K运行时间。 

816
00:35:43,760 --> 00:35:46,010
So this is the total running time for this guy.
这就是这个人的总跑步时间。 

817
00:35:46,010 --> 00:35:50,510
And this is not constant, so it's complicated.
而且这不是恒定的，因此很复杂。 

818
00:35:50,510 --> 00:35:52,710
What is the sum come down to, asymptotically?
逐步得出的总和是多少？ 

819
00:35:52,909 --> 00:36:00,210



820
00:36:00,210 --> 00:36:04,789
AUDIENCE: Z plus 1K times Z over 2.
观众：Z加1K乘以Z乘以2。 

821
00:36:04,989 --> 00:36:05,739
VICTOR COSTAN: Ok.
维克多·科斯坦：好的。 

822
00:36:05,739 --> 00:36:17,000
Z plus 1K, ZK over 2.
 Z加1K，ZK超过2。 

823
00:36:17,000 --> 00:36:19,769
Slow because I care about asymptotics,
慢点，因为我关心渐近线， 

824
00:36:19,769 --> 00:36:31,179
this is order of Z squared times K, right?
这是Z平方乘以K的顺序，对吗？ 

825
00:36:31,179 --> 00:36:33,819
So now any one more natural number to work with
因此，现在可以使用任何自然数

826
00:36:33,820 --> 00:36:36,500
would be the number of words in a document.
将是文档中的单词数。 

827
00:36:36,500 --> 00:36:38,940
And the number of words in a document
以及文件中的字数

828
00:36:38,940 --> 00:36:50,150
is W, which is Z times K. So Z is W divided by K.
是W，是Z乘以K。因此Z是W除以K。 

829
00:36:50,150 --> 00:36:53,730
And if I substitute this, I get that this
如果我替代这个，我会得到这个

830
00:36:53,929 --> 00:37:05,169
is equal to 0 of W squared over K. Now in a reasonable document
等于W乘以K的0的平方。现在在一个合理的文档中

831
00:37:05,170 --> 00:37:08,840
that I see, there tends to be a limited number of words
我看到的是，字数往往有限

832
00:37:08,840 --> 00:37:12,860
per line because the document has to fit on a page.
每行，因为文档必须适合页面。 

833
00:37:12,860 --> 00:37:15,579
So K's pretty much a constant.
因此，K几乎是一个常数。 

834
00:37:15,579 --> 00:37:18,819
So this comes down to order of W squared.
因此，这归结为W平方的阶数。 

835
00:37:18,820 --> 00:37:21,789



836
00:37:21,789 --> 00:37:27,829
So if I go down here and look at get word from line list,
所以，如果我走到这里，看看从行列表中获取单词， 

837
00:37:27,829 --> 00:37:31,679
this is W squared, where W is how many words I
这是W的平方，其中W是我有多少个单词

838
00:37:31,679 --> 00:37:32,269
have in a document.
在文件中。 

839
00:37:32,469 --> 00:37:35,129



840
00:37:35,130 --> 00:37:38,829
How many of you guys are still with me?
你们中还有几个人呢？ 

841
00:37:38,829 --> 00:37:39,769
Half.
半。 

842
00:37:39,769 --> 00:37:41,400
OK.
好。 

843
00:37:41,400 --> 00:37:43,460
Does anyone else want to ask questions,
还有其他人想问问题吗？ 

844
00:37:43,460 --> 00:37:46,360
so that you can get back on track?
这样您才能回到正轨？ 

845
00:37:46,360 --> 00:37:48,423
Yes, no?
是不是

846
00:37:48,423 --> 00:37:49,873
AUDIENCE: It makes sense so far.
听众：到目前为止，这是有道理的。 

847
00:37:49,873 --> 00:37:50,914
VICTOR COSTAN: Thank you.
维克多·科斯坦：谢谢。 

848
00:37:50,914 --> 00:37:52,255
AUDIENCE: I think I didn't understand
听众：我想我听不懂

849
00:37:52,454 --> 00:37:55,201
the part of [INAUDIBLE]
 [听不清]的部分

850
00:37:55,201 --> 00:37:55,949
VICTOR COSTAN: OK.
维克多·科斯坦：好的。 

851
00:37:55,949 --> 00:37:58,059
Thank you.
谢谢。 

852
00:37:58,059 --> 00:38:02,279
So let's see what's going on lines 2 through 5.
因此，让我们看看第二行到第五行的情况。 

853
00:38:02,280 --> 00:38:09,360
So I have a word list, which at the beginning is empty.
所以我有一个单词列表，一开始是空的。 

854
00:38:09,360 --> 00:38:12,440
Then in line 4, words in line gets K words.
然后在第4行中，行中的单词得到K个单词。 

855
00:38:12,639 --> 00:38:15,299



856
00:38:15,300 --> 00:38:21,840
And those K words in line five are added to word list.
并将第五行中的K个单词添加到单词列表中。 

857
00:38:21,840 --> 00:38:25,420
So after that, word list has K words.
因此，此后，单词列表包含K个单词。 

858
00:38:25,420 --> 00:38:26,880
Then I run through the loop again.
然后我再次遍历循环。 

859
00:38:26,880 --> 00:38:29,880
Get the words from string gives me K new words.
从字符串中获取单词给我K个新单词。 

860
00:38:29,880 --> 00:38:33,769
They get added to the list, which now has 2K words.
他们被添加到列表中，该列表现在有2K个单词。 

861
00:38:33,769 --> 00:38:35,469
Next time I get K more words, they
下次我再收到K个字时，他们

862
00:38:35,469 --> 00:38:39,889
get that added to the list, which has 3K.
将其添加到具有3K的列表中。 

863
00:38:39,889 --> 00:38:41,529
So on and so forth until the end.
依此类推，直到最后。 

864
00:38:41,530 --> 00:38:44,380
I have ugly numbers.
我有丑陋的数字。 

865
00:38:44,380 --> 00:38:50,820
Z minus 1 times K words and I add the last K words.
 Z减去K字乘以1，然后加上最后K个字。 

866
00:38:50,820 --> 00:38:53,570



867
00:38:53,570 --> 00:38:56,480
I'm getting confused here.
我在这里很困惑。 

868
00:38:56,480 --> 00:38:59,690
And I get Z times K words.
我得到Z乘以K字。 

869
00:38:59,690 --> 00:39:02,840
So the word list is eventually going to have Z times K words,
因此，单词列表最终将具有Z乘以K个单词， 

870
00:39:02,840 --> 00:39:04,710
and it gets them K at a time.
然后一次得到他们K 

871
00:39:04,710 --> 00:39:08,449
The thing that does this addition is the plus operator.
进行加法的是加号运算符。 

872
00:39:08,449 --> 00:39:10,369
And the running time for the plus operator
而plus运算符的运行时间

873
00:39:10,369 --> 00:39:14,099
is the size of the two lists, so it's this plus this.
是两个列表的大小，所以是这个加上这个。 

874
00:39:14,099 --> 00:39:17,440
So that's why the running time is first K, then 2K, then 3K,
这就是为什么运行时间首先是K，然后是2K，然后是3K， 

875
00:39:17,440 --> 00:39:23,387
then-- make sense now?
那么-现在有意义吗？ 

876
00:39:23,387 --> 00:39:23,769
AUDIENCE: Yes.
听众：是的。 

877
00:39:23,969 --> 00:39:26,289
VICTOR COSTAN: OK.
维克多·科斯坦：好的。 

878
00:39:26,289 --> 00:39:30,619
So this is a subtle bug because if you change plus to extend,
因此，这是一个细微的错误，因为如果您更改加号来扩展， 

879
00:39:30,619 --> 00:39:33,049
you get [? bug ?] disk two, which runs a lot faster.
你得到 [？ bug？]磁盘二，运行速度快得多。 

880
00:39:33,050 --> 00:39:37,065



881
00:39:37,264 --> 00:39:37,764
OK.
好。 

882
00:39:37,764 --> 00:39:42,269



883
00:39:42,269 --> 00:39:45,789
So for everything else, we want to be
所以对于其他一切，我们都希望成为

884
00:39:45,789 --> 00:39:47,329
able to do this sort of analysis,
能够进行这种分析， 

885
00:39:47,329 --> 00:39:49,027
but we want to do it faster.
但是我们想更快地做。 

886
00:39:49,027 --> 00:39:51,110
So you guys should look through [? bug list ?] one
因此，你们应该仔细检查[？错误列表？ 

887
00:39:51,110 --> 00:39:55,110
through eight and do the same analysis for all the functions.
到八个，并对所有功能进行相同的分析。 

888
00:39:55,110 --> 00:39:58,760
And we're going to post recitation notes where
我们将在后面发布朗诵笔记

889
00:39:58,760 --> 00:40:01,130
we tell you this is the function that changed,
我们告诉你这是改变的功能， 

890
00:40:01,130 --> 00:40:02,442
and this is the total running time.
这是总的运行时间。 

891
00:40:02,641 --> 00:40:04,099
And you should go through the lines
你应该仔细检查

892
00:40:04,099 --> 00:40:07,610
and convince yourself that this is the right running time.
让自己相信这是正确的运行时间。 

893
00:40:07,610 --> 00:40:10,289
And you should do that until it becomes second nature,
而且，您应该这样做直到它成为第二天性， 

894
00:40:10,289 --> 00:40:12,001
because when you're writing Python code,
因为当您编写Python代码时， 

895
00:40:12,001 --> 00:40:13,460
you want to have this in your head.
你想把这个放在脑子里。 

896
00:40:13,460 --> 00:40:14,880
You don't want to have to write it down,
您不想写下来， 

897
00:40:14,880 --> 00:40:17,250
because if you have to write it down, you're going to be lazy
因为如果您必须将其写下来，您将变得懒惰

898
00:40:17,449 --> 00:40:19,157
and you're not going to do it, and you're
而你不会这样做，而你

899
00:40:19,157 --> 00:40:20,849
going to use plus instead of extend,
将使用加号而不是扩展号， 

900
00:40:20,849 --> 00:40:23,279
and your code is going to be horribly slow.
而且您的代码将非常缓慢。 

901
00:40:23,280 --> 00:40:25,114
So practice until this gets in your head,
所以练习，直到你意识到

902
00:40:25,114 --> 00:40:27,530
and then you'll be able to see the running time for things
然后您将可以看到事物的运行时间

903
00:40:27,530 --> 00:40:28,155
really quickly.
真的很快。 

904
00:40:28,155 --> 00:40:31,070



905
00:40:31,070 --> 00:40:35,820
OK, do we have time for once more let me see.
好吧，我们是否有时间再让我看看。 

906
00:40:35,820 --> 00:40:36,920
OK.
好。 

907
00:40:37,119 --> 00:40:39,309
Let's look at the running time for inner products,
让我们看一下内部产品的运行时间， 

908
00:40:39,309 --> 00:40:40,779
because this is nice and easy.
因为这很容易。 

909
00:40:40,780 --> 00:40:44,500



910
00:40:44,699 --> 00:40:53,029
2, 3, 4, 5, 6, 7.
 2、3、4、5、6、7 

911
00:40:53,030 --> 00:40:57,900
2 is 1, 1, very nice and easy.
 2是1、1，非常好而且很容易。 

912
00:40:57,900 --> 00:41:05,000
3 looks at the first document list and iterates through it.
 3查看第一个文档列表并对其进行迭代。 

913
00:41:05,199 --> 00:41:09,429
Iteration is constant time, but if the first document vector
迭代是恒定时间，但是如果第一个文档向量

914
00:41:09,429 --> 00:41:15,099
has L1 elements, it's going to run L1 times.
具有L1个元素，它将运行L1次。 

915
00:41:15,099 --> 00:41:18,269
How about line 4, words 2 count 2 in L2.
第4行的单词2在L2中计数为2。 

916
00:41:18,269 --> 00:41:26,329
This is iteration again, so it's constant time to run it once,
这又是迭代，因此它是运行一次的恒定时间， 

917
00:41:26,329 --> 00:41:28,145
but how many times will it run?
但是它将运行多少次？ 

918
00:41:28,146 --> 00:41:30,130
AUDIENCE: L2 times L1 times.
听众：L2倍L1倍。 

919
00:41:30,130 --> 00:41:33,420
VICTOR COSTAN: L2 times the 1, excellent.
 VICTOR COSTAN：L2的1倍，出色。 

920
00:41:33,420 --> 00:41:35,440
So these two loops are nested inside each other
因此，这两个循环相互嵌套

921
00:41:35,440 --> 00:41:39,170
so that means that lines 4 through 6
因此，这意味着第4至6行

922
00:41:39,170 --> 00:41:44,059
are going to run once every time line 3 iterates.
每次第3行重复执行一次。 

923
00:41:44,059 --> 00:41:45,590
So sorry, actually line 4 is going
很抱歉，实际上第4行

924
00:41:45,590 --> 00:41:49,110
to run once every time line 3 iterates.
每次第3行迭代一次运行一次。 

925
00:41:49,110 --> 00:41:53,130
And then everything inside the second 4
然后第二个4里面的所有东西

926
00:41:53,130 --> 00:41:56,980
is going to run L1 times L2 times.
将要运行L1次L2次

927
00:41:56,980 --> 00:42:02,704
So lines 5 and 6 are also going to run L1, L2 times.
因此，第5和第6行也将运行L1，L2次。 

928
00:42:02,704 --> 00:42:06,429
L1, L2, L1, L2.
 L1，L2，L1，L2。 

929
00:42:06,429 --> 00:42:11,715
How much time does it take to do that if check there?
如果在那里检查需要多少时间？ 

930
00:42:11,715 --> 00:42:13,039
AUDIENCE: [INAUDIBLE]
观众：[听不清] 

931
00:42:13,039 --> 00:42:15,039
VICTOR COSTAN: Why does it take a constant time?
 VICTOR COSTAN：为什么要花固定的时间？ 

932
00:42:15,039 --> 00:42:19,304



933
00:42:19,304 --> 00:42:21,144
AUDIENCE: I was going to say, it wasn't constant,
听众：我要说的是，这不是一成不变的， 

934
00:42:21,344 --> 00:42:25,679
so you don't have to pair each character with no word.
因此，您无需将每个字符都与单词配对。 

935
00:42:25,679 --> 00:42:26,679
VICTOR COSTAN: OK, good.
 VICTOR COSTAN：好的，很好。 

936
00:42:26,679 --> 00:42:28,359
So we have two words, and equal, equal
所以我们有两个字，相等，相等

937
00:42:28,360 --> 00:42:31,230
tells me are the words equal or not, right?
告诉我这两个词是否相等，对吗？ 

938
00:42:31,429 --> 00:42:35,449
So the way you do that, is you have words like the and fox.
因此，执行此操作的方式是使用诸如and Fox之类的词。 

939
00:42:35,449 --> 00:42:37,269
You go through each character, and you
您经历了每个角色，然后

940
00:42:37,269 --> 00:42:40,639
stop whenever you see different characters.
当您看到其他字符时停止播放。 

941
00:42:40,639 --> 00:42:46,440
But if you have something like, if you have a fake word
但是如果你有类似的话，如果你有假字

942
00:42:46,440 --> 00:42:50,704
F-O-I and fox, then go through the first character,
 FOI和Fox，然后经过第一个字符， 

943
00:42:50,704 --> 00:42:53,170
they're equal, second character, they're equal, third character,
他们是相等的，第二个字符，他们是相等的，第三个字符， 

944
00:42:53,369 --> 00:42:54,619
they're different.
他们是不同的。 

945
00:42:54,619 --> 00:42:57,389
So if you have length W words that
因此，如果您有W个字长

946
00:42:57,389 --> 00:42:59,219
are different only in the last character,
仅在最后一个字符上有所不同， 

947
00:42:59,219 --> 00:43:02,659
this is going to be order W, right?
这将是订单W，对不对？ 

948
00:43:02,659 --> 00:43:04,210
So the real--
所以真正的- 

949
00:43:04,210 --> 00:43:05,619
AUDIENCE: [INAUDIBLE]
观众：[听不清] 

950
00:43:05,619 --> 00:43:08,750
VICTOR COSTAN: --yep, equals, equals 4 strings not constant.
 VICTOR COSTAN：--yep，等于，等于4个不恒定的字符串。 

951
00:43:08,750 --> 00:43:13,469
It takes W time where W is the length of a word.
它花费W时间，其中W是单词的长度。 

952
00:43:13,469 --> 00:43:15,661
Now here we said that the length of a word
现在我们说一个字的长度

953
00:43:15,661 --> 00:43:17,619
is constant because we're dealing with English.
是恒定的，因为我们正在处理英语。 

954
00:43:17,619 --> 00:43:19,889
So you could tell me it is constant because of that.
因此，您可以告诉我，它是恒定的。 

955
00:43:19,889 --> 00:43:22,181
But I would like to hear the argument before I take it.
但是，我想在接受之前先听听论点。 

956
00:43:22,181 --> 00:43:24,630



957
00:43:24,630 --> 00:43:26,050
How about line 6?
第6行如何？ 

958
00:43:26,050 --> 00:43:31,130



959
00:43:31,329 --> 00:43:32,769
AUDIENCE: Well, if the plus equals
听众：好吧，如果加等于

960
00:43:32,769 --> 00:43:36,139
is going to be the same thing before when we were,
那时我们将是同一回事， 

961
00:43:36,139 --> 00:43:39,269
every new time your plus equals, so it's
每一次新的加值等于

962
00:43:39,269 --> 00:43:41,940
going to be like how the word list before we were adding it,
就像单词列表在我们添加之前一样， 

963
00:43:41,940 --> 00:43:43,347
where we have to create that object,
我们必须创建该对象的地方

964
00:43:43,547 --> 00:43:45,523
and then add it to the length.
然后将其添加到长度。 

965
00:43:45,523 --> 00:43:46,018
I mean, its going to be length of sum.
我的意思是，这将是总和的长度。 

966
00:43:46,018 --> 00:43:46,518
Sorry.
抱歉。 

967
00:43:46,518 --> 00:43:48,487
And then you add in the new one.
然后添加新的。 

968
00:43:48,487 --> 00:43:50,571
So every time its going to be increasing, correct?
所以每次它会增加，对吗？ 

969
00:43:50,572 --> 00:43:51,288
VICTOR COSTAN: Almost.
维克多·科斯坦：差不多了。 

970
00:43:51,487 --> 00:43:52,556
It's a trap again.
这又是一个陷阱。 

971
00:43:52,556 --> 00:43:53,389
[INTERPOSING VOICES]
 [插入语音] 

972
00:43:53,389 --> 00:43:55,019
VICTOR COSTAN: Yep.
维克多·科斯坦：是的。 

973
00:43:55,019 --> 00:43:56,769
Yeah, so this time they're not lists.
是的，所以这次他们不在列表中。 

974
00:43:56,769 --> 00:44:00,460
So if you look at what's going on inside there,
所以，如果您看看里面发生了什么， 

975
00:44:00,460 --> 00:44:03,840
you have count one and count two are
你数一，二是

976
00:44:03,840 --> 00:44:08,780
these numbers in the document vector, so they're numbers.
这些数字在文档向量中，所以它们是数字。 

977
00:44:08,780 --> 00:44:10,923
And then some starts out at 0, and then it
然后一些从0开始，然后

978
00:44:11,123 --> 00:44:12,039
keeps getting numbers.
不断获取数字。 

979
00:44:12,039 --> 00:44:14,050
So sum is going to be a number.
所以总和将是一个数字。 

980
00:44:14,050 --> 00:44:16,039
And multiplying numbers is constant time,
乘以数字是恒定时间

981
00:44:16,239 --> 00:44:19,149
adding numbers is constant time, so plus for numbers
加数是固定时间，所以加数

982
00:44:19,150 --> 00:44:20,586
is order 1 indeed.
确实是第1阶。 

983
00:44:20,586 --> 00:44:22,420
AUDIENCE: You're reassigning sum every time?
听众：您每次都在重新分配总和吗？ 

984
00:44:22,420 --> 00:44:24,003
VICTOR COSTAN: Which is also constant.
维克多·科斯坦：这也是不变的。 

985
00:44:24,003 --> 00:44:24,545
AUDIENCE: OK.
听众：好的。 

986
00:44:24,545 --> 00:44:26,510
VICTOR COSTAN: Because you're copying a number over.
维克多·科斯坦：因为您要复制一个号码。 

987
00:44:26,710 --> 00:44:28,659
So as long as you're copying one element over,
因此，只要您要复制一个元素， 

988
00:44:28,659 --> 00:44:29,534
that's constant time.
那是恒定的时间。 

989
00:44:29,534 --> 00:44:32,369
If you're adding two elements together-- two elements,
如果您将两个元素加在一起-两个元素， 

990
00:44:32,369 --> 00:44:36,069
not two lists-- that's constant time.
不是两个列表-这是固定时间。 

991
00:44:36,070 --> 00:44:39,090
So this is constant.
因此，这是恒定的。 

992
00:44:39,090 --> 00:44:42,010
And the last line is returned.
最后一行返回。 

993
00:44:42,010 --> 00:44:43,750
So what's the running time for this?
那么，这是什么时间？ 

994
00:44:43,750 --> 00:44:46,630



995
00:44:46,630 --> 00:44:49,039
AUDIENCE: L2 times L1.
听众：L2乘以L1。 

996
00:44:49,039 --> 00:44:50,250
VICTOR COSTAN: Excellent.
 VICTOR COSTAN：太好了。 

997
00:44:50,250 --> 00:44:52,880
So I assume this is a constant.
所以我认为这是一个常数。 

998
00:44:52,880 --> 00:44:55,860
So this lets me say this is 1, and then
所以这可以说是1，然后

999
00:44:55,860 --> 00:45:00,260
if we do the partial products we get 1L, 1L, 1, and L2.
如果我们做部分乘积，我们得到1L，1L，1和L2。 

1000
00:45:00,260 --> 00:45:01,510
L1, L2, L1, L2.
 L1，L2，L1，L2。 

1001
00:45:01,510 --> 00:45:03,780
And if you add them up, you get L1 and L2.
如果将它们加起来，就会得到L1和L2。 

1002
00:45:03,780 --> 00:45:06,380



1003
00:45:06,380 --> 00:45:11,289
So this is going to be L1, L2.
因此，这将是L1，L2。 

1004
00:45:11,289 --> 00:45:15,409
Vector angle calls inner product three times, right?
向量角调用内积三次，对吗？ 

1005
00:45:15,409 --> 00:45:18,894
So what's it's running time?
那是什么时间？ 

1006
00:45:18,894 --> 00:45:19,876
AUDIENCE: L1, L2.
听众：L1，L2。 

1007
00:45:19,876 --> 00:45:23,699



1008
00:45:23,699 --> 00:45:24,539
VICTOR COSTAN: Excellent.
 VICTOR COSTAN：太好了。 

1009
00:45:24,739 --> 00:45:27,389



1010
00:45:27,389 --> 00:45:29,089
Count frequency.
计数频率。 

1011
00:45:29,090 --> 00:45:31,130
You're going to have to take my word for it
你将不得不相信我的话

1012
00:45:31,130 --> 00:45:36,869
that this is order of W squared.
这是W的平方的平方。 

1013
00:45:36,869 --> 00:45:39,269
And if that's the case, what's the running
如果是这样，正在运行什么

1014
00:45:39,269 --> 00:45:41,489
time for a word frequency for file?
时间为文件的单词频率？ 

1015
00:45:41,489 --> 00:45:44,982



1016
00:45:44,983 --> 00:45:45,981
AUDIENCE: W squared?
听众：W平方？ 

1017
00:45:45,981 --> 00:45:49,773



1018
00:45:49,972 --> 00:45:50,980
VICTOR COSTAN: Cool.
维克多·科斯坦：太好了。 

1019
00:45:50,980 --> 00:45:51,030
So.
所以。 

1020
00:45:51,030 --> 00:45:52,769
What's the running time for main now?
现在main的运行时间是几点？ 

1021
00:45:52,769 --> 00:45:55,835



1022
00:45:55,835 --> 00:45:56,335
Last trick.
最后一招。 

1023
00:45:56,335 --> 00:45:57,000
AUDIENCE: [INAUDIBLE]
观众：[听不清] 

1024
00:45:57,000 --> 00:45:58,833
VICTOR COSTAN: Yep, If you just add them up,
维克多·科斯坦：是的，如果您将它们加起来， 

1025
00:45:58,833 --> 00:46:00,731
except there is one last trick there.
除了那里还有最后一招。 

1026
00:46:00,931 --> 00:46:04,298
AUDIENCE: If W is constant, [INAUDIBLE]
听众：如果W为常数，则[听不清] 

1027
00:46:04,298 --> 00:46:05,260
VICTOR COSTAN: No.
维克多·科斯坦：不。 

1028
00:46:05,260 --> 00:46:08,159
AUDIENCE: [INAUDIBLE] W's constant, right?
听众：[听不清] W不变，对吧？ 

1029
00:46:08,159 --> 00:46:09,389
VICTOR COSTAN: No.
维克多·科斯坦：不。 

1030
00:46:09,389 --> 00:46:11,792
So W is the number of words in a document.
因此，W是文档中的单词数。 

1031
00:46:11,793 --> 00:46:12,460
AUDIENCE: Oh.
听众：哦。 

1032
00:46:12,659 --> 00:46:14,440
VICTOR COSTAN: So it's huge.
维克多·科斯坦：太好了。 

1033
00:46:14,440 --> 00:46:16,190
If that's constant, then the whole problem
如果那是恒定的，那么整个问题

1034
00:46:16,190 --> 00:46:18,065
should run in order one time, and we're done.
应该运行一次，到此我们就完成了。 

1035
00:46:18,065 --> 00:46:19,789
We're going home.
我们要回家了。 

1036
00:46:19,789 --> 00:46:23,940
AUDIENCE: W squared because it beats out L1 and L2.
听众：W平方，因为它击败了L1和L2。 

1037
00:46:23,940 --> 00:46:25,460
VICTOR COSTAN: OK, so--
维克多·科斯坦：好的，所以- 

1038
00:46:25,460 --> 00:46:26,110
AUDIENCE: L1--
听众：L1-- 

1039
00:46:26,110 --> 00:46:28,130
VICTOR COSTAN: --you're going faster than me.
维克多·科斯坦：-你的速度比我快。 

1040
00:46:28,130 --> 00:46:31,190
You're going too fast, but you're right.
你走得太快了，但是你是对的。 

1041
00:46:31,190 --> 00:46:35,289
So word frequency for file is called twice.
因此，文件的字频称为两次。 

1042
00:46:35,489 --> 00:46:38,219
The first document is going to have W1 words.
第一个文档将包含W1个单词。 

1043
00:46:38,219 --> 00:46:41,459
The second document is going to have W2 words.
第二个文档将包含W2个单词。 

1044
00:46:41,460 --> 00:46:44,269
So you can just copy W because this is called twice
所以您可以复制W，因为它被两次调用

1045
00:46:44,469 --> 00:46:46,939
for different files.
用于不同的文件。 

1046
00:46:46,940 --> 00:46:51,409
So this is order of W1 squared plus W2
所以这是W1平方加W2的阶数

1047
00:46:51,409 --> 00:46:54,289
squared, different documents.
平方，不同的文件。 

1048
00:46:54,289 --> 00:46:59,869



1049
00:46:59,869 --> 00:47:03,759
And then I have plus L1, L2.
然后我有加号L1，L2。 

1050
00:47:03,760 --> 00:47:07,550



1051
00:47:07,550 --> 00:47:12,960
And you said that W1 and W2 dominate L1 and L2, right?
您说W1和W2支配L1和L2，对吗？ 

1052
00:47:12,960 --> 00:47:16,119
Because W's the total number of words in a document,
因为W是文档中单词的总数， 

1053
00:47:16,119 --> 00:47:19,639
whereas L the is the number of unique words,
而L是唯一字的数量， 

1054
00:47:19,639 --> 00:47:22,809
because it the length of the vector.
因为它是向量的长度

1055
00:47:22,809 --> 00:47:24,500
So that is true, but I'm not sure
没错，但我不确定

1056
00:47:24,500 --> 00:47:28,000
how to reduce this here to make use of that.
如何在这里减少它以利用它。 

1057
00:47:28,000 --> 00:47:31,961
However, I made use of what you said already when I wrote this.
但是，当我写这篇文章时，我已经利用了你已经说过的话。 

1058
00:47:31,961 --> 00:47:35,739



1059
00:47:35,739 --> 00:47:37,299
You see why?
你明白为什么吗？ 

1060
00:47:37,300 --> 00:47:39,039
Can anyone else see why?
谁能看到为什么？ 

1061
00:47:39,239 --> 00:47:42,599



1062
00:47:42,599 --> 00:47:52,460
So let's look at the vector angle again, lines 2 and 3.
因此，让我们再次看一下矢量角度，第2行和第3行。 

1063
00:47:52,460 --> 00:47:58,329
So line 2, it calls inner product with L1 and L2.
因此，第2行使用L1和L2调用内部乘积。 

1064
00:47:58,329 --> 00:48:00,670
But if you look at line 3, it calls inner product
但是，如果您看一下第3行，它称为内部乘积

1065
00:48:00,670 --> 00:48:05,670
with L1, L1 and then L2, L2 So the total running time
依次是L1，L1然后是L2，L2 

1066
00:48:05,670 --> 00:48:10,880
for vector angle is actually L1, L2 plus L1
向量角实际上是L1，L2加L1 

1067
00:48:10,880 --> 00:48:12,539
squared plus L2 squared.
平方加L2平方。 

1068
00:48:12,539 --> 00:48:17,880



1069
00:48:17,880 --> 00:48:20,550
So if the first document has 1,000 words
因此，如果第一个文档有1,000个单词

1070
00:48:20,550 --> 00:48:22,610
and the second document as one word,
第二个文档是一个单词， 

1071
00:48:22,809 --> 00:48:25,679
computing the inner product between L1 and L1
计算L1和L1之间的内积

1072
00:48:25,679 --> 00:48:27,829
is going to take a lot more time than computing
比计算要花很多时间

1073
00:48:27,829 --> 00:48:30,049
the inner product between L1 and L2.
 L1和L2之间的内积。 

1074
00:48:30,050 --> 00:48:32,710
So I can't leave out these terms.
所以我不能忘记这些条款。 

1075
00:48:32,909 --> 00:48:34,440
They have to be here.
他们必须在这里。 

1076
00:48:34,440 --> 00:48:37,130
However, when I add them up here--
但是，当我在此处添加它们时- 

1077
00:48:37,130 --> 00:48:41,269
if I would write W1 squared plus W2 squared plus L1 squared
如果我写W1平方加W2平方加L1平方

1078
00:48:41,269 --> 00:48:44,650
plus L2 squared plus this-- in that case,
再加上L2的平方再加上-在这种情况下， 

1079
00:48:44,650 --> 00:48:47,340
I can use the fact that W1 is bigger than L1,
我可以使用W1大于L1的事实， 

1080
00:48:47,340 --> 00:48:50,735
and it cancels it out.
它取消了它。 

1081
00:48:50,735 --> 00:48:51,610
Does this make sense?
这有意义吗？ 

1082
00:48:51,610 --> 00:48:52,420
Did I lose people?
我丢人了吗？ 

1083
00:48:52,420 --> 00:48:55,289



1084
00:48:55,489 --> 00:48:58,187
Ask questions, please.
请问问题。 

1085
00:48:58,188 --> 00:49:02,751



1086
00:49:02,751 --> 00:49:04,384
AUDIENCE: But you can't get rid of L1 and L2
听众：但是你不能摆脱L1和L2 

1087
00:49:04,583 --> 00:49:07,576
and not an [INAUDIBLE].
而不是[听不清]。 

1088
00:49:07,577 --> 00:49:08,460
VICTOR COSTAN: You can't--
维克多·科斯坦：您不能- 

1089
00:49:08,659 --> 00:49:09,710
AUDIENCE: [INAUDIBLE]
观众：[听不清] 

1090
00:49:09,710 --> 00:49:11,500
VICTOR COSTAN: Oh, so I can't get rid of this term--
维克多·科斯坦（VICTOR COSTAN）：哦，所以我不能放弃这个名词- 

1091
00:49:11,500 --> 00:49:12,541
AUDIENCE: --those, right?
听众：-对吧？ 

1092
00:49:12,541 --> 00:49:17,335
So this should be the sum of this and this, right?
所以这应该是这件事的总和，对吧？ 

1093
00:49:17,335 --> 00:49:18,199
AUDIENCE: Right.
听众：对。 

1094
00:49:18,199 --> 00:49:22,079
VICTOR COSTAN: So it should be W1 squared plus W2 squared
维克多·波士坦（VICTOR COSTAN）：所以应该W1平方加W2平方

1095
00:49:22,079 --> 00:49:26,382
plus L1 squared plus L2 squared plus L1, L2.
加L1平方加L2平方加L1，L2。 

1096
00:49:26,382 --> 00:49:28,110
AUDIENCE: Right.
听众：对。 

1097
00:49:28,110 --> 00:49:30,480
L1 is strictly smaller than W1.
 L1严格小于W1。 

1098
00:49:30,679 --> 00:49:31,619
AUDIENCE: Yeah.
听众：是的。 

1099
00:49:31,619 --> 00:49:35,402
Goes away, L2 smaller than W2 goes away, and I get this.
消失，小于W2的L2消失，我明白了。 

1100
00:49:35,402 --> 00:49:36,326
Correct.
正确。 

1101
00:49:36,326 --> 00:49:40,795
So L1L2 isn't smaller than W [INAUDIBLE] squared?
那么L1L2不小于W [音频不清晰]的平方吗？ 

1102
00:49:40,795 --> 00:49:41,669
VICTOR COSTAN: Is it?
维克多·科斯坦：是吗？ 

1103
00:49:41,670 --> 00:49:42,885
If you know more math than me, you
如果您比我了解更多数学

1104
00:49:43,085 --> 00:49:44,529
might be able to prove that it is,
也许可以证明它是， 

1105
00:49:44,530 --> 00:49:47,422
but I don't, so I'm just leaving it in there.
但是我没有，所以我只是把它留在那里。 

1106
00:49:47,422 --> 00:49:47,963
AUDIENCE: Ok.
听众：好的。 

1107
00:49:47,963 --> 00:49:49,367
VICTOR COSTAN: Yeah.
维克多·科斯坦：是的。 

1108
00:49:49,367 --> 00:49:51,000
I think there is some relation, but I really
我认为有些关系，但是我真的

1109
00:49:51,199 --> 00:49:53,939
don't remember what it this, so let's
不记得这是什么了，所以让我们

1110
00:49:53,940 --> 00:49:55,070
leave it like that for now.
现在就这样离开。 

1111
00:49:55,070 --> 00:50:00,653



1112
00:50:00,853 --> 00:50:02,769
Yeah, I think it should be the case that these
是的，我认为应该是这些

1113
00:50:02,769 --> 00:50:06,250
are bigger than this, but I'm not sure.
比这更大，但我不确定。 

1114
00:50:06,250 --> 00:50:07,463
OK, yes.
好的。 

1115
00:50:07,463 --> 00:50:12,000
AUDIENCE: How do you get the line for vector angle?
听众：如何获得矢量角线？ 

1116
00:50:12,199 --> 00:50:15,019
VICTOR COSTAN: How do I get the running time for it?
 VICTOR COSTAN：如何获得运行时间？ 

1117
00:50:15,019 --> 00:50:19,389
So vector angle gets two vectors, right?
那么向量角得到两个向量，对吗？ 

1118
00:50:19,389 --> 00:50:22,250
The vector for document one and the vector for document two.
文档一的向量和文档二的向量。 

1119
00:50:22,250 --> 00:50:24,190
The length of the first vector is L1.
第一个向量的长度为L1。 

1120
00:50:24,190 --> 00:50:26,590
The length of the second vector is L2.
第二向量的长度为L2。 

1121
00:50:26,590 --> 00:50:29,260
Now, line, where is it?
现在，行，在哪里？ 

1122
00:50:29,260 --> 00:50:32,550



1123
00:50:32,550 --> 00:50:38,050
Line 2, for numerator calls inner product with L1 and L2.
分子的第2行用L1和L2调用内积。 

1124
00:50:38,050 --> 00:50:43,150
So we know that the running time is L1, L2 up here.
因此，我们知道运行时间在这里是L1，L2。 

1125
00:50:43,349 --> 00:50:46,079
Now the next line, line 3 in vector angle,
现在是下一行，矢量角度的第3行， 

1126
00:50:46,079 --> 00:50:49,989
calls inner product with L1 and L1.
用L1和L1调用内积。 

1127
00:50:49,989 --> 00:50:53,699
So the running time is L1 times L1 which is L1 squared.
因此，运行时间是L1乘以L1的平方。 

1128
00:50:53,699 --> 00:50:54,891
OK.
好。 

1129
00:50:54,891 --> 00:50:56,599
AUDIENCE: Can we say that because there's
观众：我们可以这么说是因为

1130
00:50:56,599 --> 00:51:02,813
a bounded number of words in the English language, L1's bounded?
英语中有一定数量的单词，L1有界吗？ 

1131
00:51:02,813 --> 00:51:04,286
And as the length of the document
和作为文件的长度

1132
00:51:04,286 --> 00:51:08,214
gets really, really big, that [INAUDIBLE] constant?
这个[音频不清晰]常数变得非常非常大吗？ 

1133
00:51:08,215 --> 00:51:10,980



1134
00:51:11,179 --> 00:51:15,299
VICTOR COSTAN: Yeah, you might be able to do that.
 COSTAN COSTAN：是的，您也许可以做到。 

1135
00:51:15,300 --> 00:51:19,150
Yes, I think for the cases that we give you, that is true.
是的，我认为对于我们给您的情况，这是真的。 

1136
00:51:19,150 --> 00:51:21,036
Yeah, I never thought of that, that's cool.
是的，我从没想过，这很酷。 

1137
00:51:21,036 --> 00:51:24,012
AUDIENCE: It doesn't work if it's not a language, right?
听众：如果不是语言，那是行不通的，对吗？ 

1138
00:51:24,012 --> 00:51:25,380
If you just have gibberish?
如果你只是胡言乱语？ 

1139
00:51:25,579 --> 00:51:32,759
VICTOR COSTAN: Yes, also, to say that its constant is useful
 VICTOR COSTAN：是的，也可以说其常数很有用

1140
00:51:32,760 --> 00:51:35,050
when the number of words in English
当英文单词数

1141
00:51:35,050 --> 00:51:37,460
is much smaller than your input size.
比您输入的尺寸小得多。 

1142
00:51:37,659 --> 00:51:40,179
So if, say, English has 50,000 words
所以如果说英语有50,000个单词

1143
00:51:40,179 --> 00:51:43,849
and your input is 3,000 words, then the input is much smaller.
而您输入的是3,000个单词，则输入的内容要小得多。 

1144
00:51:43,849 --> 00:51:45,909
But if you're input is a million words, which
但是如果您输入的是一百万个字， 

1145
00:51:45,909 --> 00:51:48,329
I think is what we use, then yeah,
我认为这是我们使用的，是的， 

1146
00:51:48,329 --> 00:51:49,708
it comes down to constant.
它归结为常数。 

1147
00:51:49,708 --> 00:51:51,000
So yeah, that's a good insight.
是的，这是一个很好的见解。 

1148
00:51:51,000 --> 00:51:51,791
That's really nice.
这是非常好的。 

1149
00:51:51,791 --> 00:51:54,572



1150
00:51:54,572 --> 00:51:55,536
Anything else?
还要别的吗？ 

1151
00:51:55,536 --> 00:52:02,780



1152
00:52:02,780 --> 00:52:06,210
OK, so you get to go through document distance 3 to 8.
好的，因此您可以遍历3至8的文档距离。 

1153
00:52:06,409 --> 00:52:08,690
We'll tell you what's changed, and we'll
我们会告诉您发生了什么变化，我们会

1154
00:52:08,690 --> 00:52:11,019
give you a chance to help you analyze it.
给您一个机会来帮助您进行分析。 

1155
00:52:11,019 --> 00:52:13,849
But you have to analyze it, then update the scorecard
但是您必须分析它，然后更新记分卡

1156
00:52:13,849 --> 00:52:19,000
for each algorithm to see how things improve.
对于每种算法，看看情况如何改善。 

1157
00:52:19,000 --> 00:52:20,067
Thanks.
谢谢。 

1158
00:52:20,067 --> 00:52:25,067



