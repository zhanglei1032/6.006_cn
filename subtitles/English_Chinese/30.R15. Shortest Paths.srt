1
00:00:00,000 --> 00:00:00,050



2
00:00:00,050 --> 00:00:01,770
The following content is provided
提供以下内容

3
00:00:01,770 --> 00:00:04,009
under a Creative Commons license.
根据知识共享许可。 

4
00:00:04,009 --> 00:00:06,859
Your support will help MIT OpenCourseWare continue
您的支持将帮助MIT OpenCourseWare继续

5
00:00:06,860 --> 00:00:10,720
to offer high quality educational resources for free.
免费提供高质量的教育资源。 

6
00:00:10,720 --> 00:00:13,330
To make a donation or view additional materials
捐款或查看其他材料

7
00:00:13,330 --> 00:00:17,207
from hundreds of MIT courses, visit MIT OpenCourseWare
从数百门麻省理工学院的课程中，访问MIT OpenCourseWare 

8
00:00:17,207 --> 00:00:17,832
at ocw.mit.edu.
在ocw.mit.edu。 

9
00:00:17,832 --> 00:00:21,544



10
00:00:21,544 --> 00:00:23,460
PROFESSOR: Ok then, let's start with problems.
教授：好的，让我们开始讨论问题。 

11
00:00:23,460 --> 00:00:29,414
And as we find concept issues, we'll get to concept issues.
当我们发现概念问题时，我们将涉及概念问题。 

12
00:00:29,414 --> 00:00:30,629
So, we talked about shortest-path,
因此，我们谈到了最短路径， 

13
00:00:30,829 --> 00:00:32,390
but we talked about shortest-path
但是我们谈到了最短路径

14
00:00:32,390 --> 00:00:34,529
in a very odd way, right?
以一种非常奇怪的方式，对吗？ 

15
00:00:34,729 --> 00:00:35,359
I'm a coder.
我是编码员。 

16
00:00:35,359 --> 00:00:39,259
So for me I'm used to, all right I go to one of these lectures,
所以对于我来说，我习惯了，去参加这些讲座之一， 

17
00:00:39,259 --> 00:00:41,599
I hear a problem, then I get out of the lecture
我听到一个问题，然后离开了讲座

18
00:00:41,600 --> 00:00:44,429
with an algorithm and the running time, right?
有算法和运行时间，对吗？ 

19
00:00:44,429 --> 00:00:45,929
This time we got out of the lecture
这次我们离开了讲座

20
00:00:45,929 --> 00:00:47,659
with no algorithm and no running time.
没有算法，也没有运行时间。 

21
00:00:47,659 --> 00:00:49,649
So, what's the point?
那么，有什么意义呢？ 

22
00:00:49,649 --> 00:00:52,089
The point is that we learned some analysis tricks
关键是我们学到了一些分析技巧

23
00:00:52,090 --> 00:00:55,419
that we can use for any shortest-path algorithm.
我们可以将其用于任何最短路径算法。 

24
00:00:55,619 --> 00:00:58,469
And the advantage of knowing that-- by the way too easy
知道这一点的好处-太容易了

25
00:00:58,469 --> 00:01:00,719
to forget, at least until you see the first real
忘记，至少直到看到第一个真实

26
00:01:00,719 --> 00:01:02,960
algorithms-- if you know that, if you
算法-如果您知道，如果您

27
00:01:02,960 --> 00:01:06,588
have to modify an algorithm, you can still use the same analysis
必须修改算法，仍然可以使用相同的分析

28
00:01:06,588 --> 00:01:08,879
to prove that your new algorithm is going to be correct
证明您的新算法是正确的

29
00:01:08,879 --> 00:01:11,164
and that it's going to be fast.
而且将会很快。 

30
00:01:11,164 --> 00:01:12,579
They're really nice tools to have,
它们是非常好的工具， 

31
00:01:12,579 --> 00:01:15,500
especially if you have to do that on a problem set
特别是如果您必须在问题集上这样做

32
00:01:15,500 --> 00:01:20,019
or on an interview, or who knows, maybe even on a quiz.
或面试，或谁知道，甚至是测验。 

33
00:01:20,019 --> 00:01:21,950
We'll see if that happens or not.
我们将看看是否发生这种情况。 

34
00:01:21,950 --> 00:01:24,530
We didn't talk about any shortest-path algorithms.
我们没有谈论任何最短路径算法。 

35
00:01:24,530 --> 00:01:27,129
So, we're not going to assume shortest-path algorithms.
因此，我们不会采用最短路径算法。 

36
00:01:27,129 --> 00:01:32,530
Instead we're going to use them as if we had them.
相反，我们将像使用它们一样使用它们。 

37
00:01:32,530 --> 00:01:33,269
No, wait.
不，等等

38
00:01:33,269 --> 00:01:34,180
I don't like that.
我不喜欢

39
00:01:34,180 --> 00:01:35,179
That's kind of annoying.
真烦人。 

40
00:01:35,180 --> 00:01:36,090
Let's not do that.
我们不要那样做。 

41
00:01:36,090 --> 00:01:37,119
Let's do something else.
让我们做点别的。 

42
00:01:37,319 --> 00:01:39,319
We didn't talk about the shortest-path algorithm
我们没有谈论最短路径算法

43
00:01:39,319 --> 00:01:39,819
in lecture.
在演讲中。 

44
00:01:39,819 --> 00:01:42,939
Let's build one right now, how about that?
让我们现在建立一个，那怎么样？ 

45
00:01:42,939 --> 00:01:45,230
Let's turn to the graph.
我们来看一下图。 

46
00:01:45,230 --> 00:01:46,340
Vertices and edges, right?
顶点和边缘，对吗？ 

47
00:01:46,340 --> 00:01:52,619



48
00:01:52,819 --> 00:01:54,429
Let's see if I can make this work.
让我们看看我是否可以完成这项工作。 

49
00:01:54,430 --> 00:02:16,840



50
00:02:17,039 --> 00:02:18,199
Suppose we have a graph.
假设我们有一个图。 

51
00:02:18,199 --> 00:02:24,689
We have V vertices, E edges and all the edges
我们有V个顶点，E个边和所有边

52
00:02:24,689 --> 00:02:27,199
have a weight that's non-negative.
权重为非负数。 

53
00:02:27,199 --> 00:02:31,289
Sorry, let's make it positive just to make things easy.
抱歉，为了让事情变得简单，让我们积极向上。 

54
00:02:31,289 --> 00:02:35,429
It's smaller than W, so it's not too big.
它比W小，所以不是太大。 

55
00:02:35,430 --> 00:02:38,219
And they're all integers.
它们都是整数。 

56
00:02:38,219 --> 00:02:38,719
Go.
走。 

57
00:02:38,719 --> 00:02:44,490



58
00:02:44,490 --> 00:02:46,157
There's brute-force, OK.
蛮力的，行。 

59
00:02:46,157 --> 00:02:47,490
So, brute-force would mean what?
那么，蛮力意味着什么？ 

60
00:02:47,490 --> 00:02:49,310
Enumerate all the paths?
列举所有路径？ 

61
00:02:49,509 --> 00:02:50,606
OK.
好。 

62
00:02:50,606 --> 00:02:52,439
Let's go over something a little bit better.
让我们来看一些更好的东西。 

63
00:02:52,439 --> 00:02:56,199



64
00:02:56,199 --> 00:02:58,819
Does anyone remember the algorithm
有人记得算法吗

65
00:02:58,819 --> 00:03:00,849
that was taught in class?
在课堂上教的？ 

66
00:03:00,849 --> 00:03:02,019
The structure?
结构？ 

67
00:03:02,020 --> 00:03:03,469
No.
没有。 

68
00:03:03,669 --> 00:03:08,339
Klaus mentioned Dijkstra and mentioned Bellman-Ford.
克劳斯提到了迪克斯特拉，并提到了贝尔曼·福特。 

69
00:03:08,340 --> 00:03:09,490
Let's write them up here.
让我们在这里写下它们。 

70
00:03:09,490 --> 00:03:15,110



71
00:03:15,110 --> 00:03:16,900
And they gave us the running times,
他们给了我们跑步时间， 

72
00:03:17,099 --> 00:03:19,250
which we'll try to remember in a bit.
我们会尽力记住这一点。 

73
00:03:19,250 --> 00:03:24,159
But, we don't know algorithms, so no Dijkstra, no Bellman-Ford
但是，我们不知道算法，所以没有Dijkstra，没有Bellman-Ford 

74
00:03:24,159 --> 00:03:27,000
for us.
为了我们。 

75
00:03:27,000 --> 00:03:29,780
What do we know?
我们知道什么？ 

76
00:03:29,780 --> 00:03:31,689
Let's start with a simpler case.
让我们从一个简单的案例开始。 

77
00:03:31,889 --> 00:03:33,429
What if there are no weights here.
如果这里没有重量怎么办。 

78
00:03:33,430 --> 00:03:35,050
What if the graph looked like this.
如果图形看起来像这样呢？ 

79
00:03:35,050 --> 00:03:42,460



80
00:03:42,460 --> 00:03:43,599
You're making my life hard.
你让我的生活很难。 

81
00:03:43,599 --> 00:03:49,049



82
00:03:49,050 --> 00:03:51,090
Like this.
像这样。 

83
00:03:51,090 --> 00:03:51,870
No costs.
没有费用

84
00:03:51,870 --> 00:03:54,606
All the edges have the same costs.
所有边缘的成本相同。 

85
00:03:54,606 --> 00:03:56,189
What would we do to solve the problem?
我们将如何解决该问题？ 

86
00:03:56,189 --> 00:03:58,740



87
00:03:58,740 --> 00:04:06,590
Say we want the shortest path from A to E.
假设我们想要从A到E的最短路径。 

88
00:04:06,789 --> 00:04:08,329
AUDIENCE: BFS.
观众：BFS。 

89
00:04:08,330 --> 00:04:10,400
PROFESSOR: BFS.
教授：BFS。 

90
00:04:10,400 --> 00:04:11,800
How's everyone feeling about BFS?
每个人对BFS的感觉如何？ 

91
00:04:11,800 --> 00:04:15,150



92
00:04:15,150 --> 00:04:16,899
What does BFS do, really quickly?
 BFS真的可以做什么？ 

93
00:04:16,899 --> 00:04:19,579



94
00:04:19,579 --> 00:04:21,079
How do you run BFS?
您如何运行BFS？ 

95
00:04:21,079 --> 00:04:23,103
AUDIENCE: Take a starting node and then you
听众：以一个起始节点然后

96
00:04:23,103 --> 00:04:24,579
can search all it's neighbors.
可以搜索所有邻居。 

97
00:04:24,579 --> 00:04:25,729
PROFESSOR: OK.
教授：好的。 

98
00:04:25,730 --> 00:04:27,389
Pick a starting node.
选择一个起始节点。 

99
00:04:27,589 --> 00:04:30,409
Then, look at its neighbors?
然后，看看它的邻居？ 

100
00:04:30,410 --> 00:04:33,290
AUDIENCE: And then you enter it through each of its neighbors
听众：然后您通过它的每个邻居输入它

101
00:04:33,290 --> 00:04:36,939
to find its neighbors and so forth.
寻找邻居等等。 

102
00:04:36,939 --> 00:04:39,221
PROFESSOR: Sounds an awful lot like BFS.
教授：听起来很像BFS。 

103
00:04:39,221 --> 00:04:40,680
What's the difference between them?
它们之间有什么区别？ 

104
00:04:40,680 --> 00:04:43,720
AUDIENCE: Well, you go through all of these neighbors
听众：好吧，你经历了所有这些邻居

105
00:04:43,720 --> 00:04:45,449
before you start going through any of it.
在您开始进行任何操作之前。 

106
00:04:45,649 --> 00:04:47,279
I mean, you go through all As neighbors
我的意思是，你经历了所有的邻居

107
00:04:47,279 --> 00:04:48,401
before you take a neighbor and go
在你带邻居去之前

108
00:04:48,401 --> 00:04:49,699
through all of its neighbors.
通过它的所有邻居。 

109
00:04:49,699 --> 00:04:51,560
PROFESSOR: Ok, that's the difference.
教授：好的，就是这样。 

110
00:04:51,560 --> 00:04:53,250
And it makes a huge difference as we've
就像我们已经

111
00:04:53,250 --> 00:04:55,490
seen in topological sorting last time.
上次在拓扑排序中看到的。 

112
00:04:55,490 --> 00:04:57,990
So we have a list and we're going
所以我们有一个清单，我们要去

113
00:04:57,990 --> 00:05:01,069
to use it to keep track of the nodes that we need to visit.
使用它来跟踪我们需要访问的节点。 

114
00:05:01,069 --> 00:05:05,459
We start with A. We numerate all of As neighbors.
我们从A开始。我们对所有As邻居进行计数。 

115
00:05:05,459 --> 00:05:08,509
And the ones that haven't been seen
还有那些没被看到的

116
00:05:08,509 --> 00:05:10,579
get stuck at the end of the list.
卡在列表的末尾。 

117
00:05:10,579 --> 00:05:13,689
A, B, C. A is out of the list.
 A，B，C。A不在列表中。 

118
00:05:13,689 --> 00:05:19,230
Then we take out the first node from the list, B in this case.
然后我们从列表中取出第一个节点，在这种情况下为B。 

119
00:05:19,230 --> 00:05:24,259
We numerate all its neighbors, A, C, D, E. Out of all these,
我们对所有邻居A，C，D，E进行计数。 

120
00:05:24,259 --> 00:05:26,074
we take the neighbors that we haven't seen
我们带走了我们未曾见过的邻居

121
00:05:26,074 --> 00:05:27,699
and we put them at the end of the list.
然后将它们放在列表的末尾。 

122
00:05:27,699 --> 00:05:32,459



123
00:05:32,459 --> 00:05:34,329
take out C, we look at its neighbors.
取出C，我们看一下它的邻居。 

124
00:05:34,329 --> 00:05:35,039
We've seen them.
我们已经看到了。 

125
00:05:35,040 --> 00:05:36,790
We take out D, we look at his neighbors.
我们拿出D，我们看着他的邻居。 

126
00:05:36,790 --> 00:05:37,350
We've seen them.
我们已经看到了。 

127
00:05:37,350 --> 00:05:38,983
We take out E, we look at all its neighbors.
我们取出E，然后看它的所有邻居。 

128
00:05:39,182 --> 00:05:40,040
We've seen them.
我们已经看到了。 

129
00:05:40,040 --> 00:05:43,060
So this is BFS.
这就是BFS。 

130
00:05:43,060 --> 00:05:44,829
BFS has this concept of levels.
 BFS具有这种级别的概念。 

131
00:05:44,829 --> 00:05:48,889
And another way to look at levels is, if you start at A,
看水平的另一种方法是，如果您从A开始， 

132
00:05:48,889 --> 00:05:52,669
and you draw a circus of radius one,
然后画一个半径为一的马戏团

133
00:05:52,670 --> 00:05:55,360
it's going to have all the nodes that are distance 1 from 8.
它将具有与8的距离为1的所有节点。 

134
00:05:55,560 --> 00:05:56,060
Right?
对？ 

135
00:05:56,060 --> 00:05:58,079
Exactly one edge.
恰好一个边缘。 

136
00:05:58,079 --> 00:06:01,789
Then you draw a circus of radius 2
然后画一个半径为2的马戏团

137
00:06:01,790 --> 00:06:06,550
and you get all the nodes that you can reach in two edges.
然后得到两个边缘都可以到达的所有节点。 

138
00:06:06,550 --> 00:06:10,629
And BFS calls these circles levels.
 BFS称之为这些圈子级别。 

139
00:06:10,629 --> 00:06:11,939
A is at level 0.
 A处于0级。 

140
00:06:11,939 --> 00:06:13,589
This is level 1.
这是1级。 

141
00:06:13,589 --> 00:06:15,859
This is level 2.
这是2级。 

142
00:06:15,860 --> 00:06:18,509
If you look at this list and you write down the levels,
如果您查看此列表并写下级别， 

143
00:06:18,709 --> 00:06:21,859
you have 0, 1, 1, 2, 2.
您有0、1、1、2、2。 

144
00:06:21,860 --> 00:06:26,610
If you had another node out here, say F,
如果您还有另一个节点，请说F， 

145
00:06:26,610 --> 00:06:28,629
this would be discovered when we get
这将在我们得到时被发现

146
00:06:28,629 --> 00:06:33,199
to D. It would go all the way here at the end,
到D。最后会一直到这里， 

147
00:06:33,199 --> 00:06:34,899
and this is level 3.
这是3级

148
00:06:34,899 --> 00:06:38,479
In BFS the levels are always increasing.
在BFS中，水平始终在增加。 

149
00:06:38,480 --> 00:06:40,750
If you keep track of parent pointers,
如果您跟踪父指针， 

150
00:06:40,949 --> 00:06:43,899
the parent pointer of a node, at some level,
在某种程度上，节点的父指针

151
00:06:43,899 --> 00:06:47,489
will always point to a node at the previous level.
将始终指向上一级的节点。 

152
00:06:47,490 --> 00:06:51,769
So, in BFS we get the shortest paths in terms of edge count.
因此，在BFS中，就边缘计数而言，我们获得了最短的路径。 

153
00:06:51,769 --> 00:06:55,310



154
00:06:55,310 --> 00:06:56,240
Make sense?
说得通？ 

155
00:06:56,240 --> 00:06:57,240
This is a recall, right?
这是召回吧？ 

156
00:06:57,240 --> 00:06:58,579
It is not new stuff.
这不是新东西。 

157
00:06:58,579 --> 00:07:01,349
Everyone happy with it?
每个人都满意吗？ 

158
00:07:01,350 --> 00:07:02,850
If it wouldn't have costs, we could
如果没有成本，我们可以

159
00:07:02,850 --> 00:07:06,750
use BFS to compute shortest paths.
使用BFS计算最短路径。 

160
00:07:06,750 --> 00:07:09,005
But, we have costs.
但是，我们有成本。 

161
00:07:09,005 --> 00:07:12,159
How do we deal with that?
我们该如何处理？ 

162
00:07:12,160 --> 00:07:15,750
Intuitively, I'd like to make BFS go across this edge
凭直觉，我想让BFS跨越这一边缘

163
00:07:15,949 --> 00:07:19,259
faster than it would go across the edge.
快过边缘。 

164
00:07:19,259 --> 00:07:21,930
If I could do that, if this guy could get stuck in the queue
如果我能做到的话，如果这个人可能陷入困境

165
00:07:21,930 --> 00:07:24,750
before this guy, I would be happy.
在这家伙之前，我会很高兴。 

166
00:07:24,750 --> 00:07:27,089
Intuitively, that's what I'd like to do.
凭直觉，这就是我想要做的。 

167
00:07:27,089 --> 00:07:29,647
How do we do that?
我们该怎么做？ 

168
00:07:29,648 --> 00:07:32,812
AUDIENCE: Sort before adding?
听众：添加之前先排序？ 

169
00:07:32,812 --> 00:07:33,319
PROFESSOR: Sort--
教授：排序- 

170
00:07:33,519 --> 00:07:35,799
AUDIENCE: Sort your neighbors sorts.
听众：对邻居排序。 

171
00:07:35,800 --> 00:07:36,850
PROFESSOR: Sort?
教授：排序？ 

172
00:07:36,850 --> 00:07:39,110
OK.
好。 

173
00:07:39,110 --> 00:07:41,759
AUDIENCE: What if you kept track of it in a menu?
听众：如果您在菜单中跟踪它怎么办？ 

174
00:07:41,959 --> 00:07:45,829
Kept track of your queue as a priority queue.
将队列保留为优先队列。 

175
00:07:45,829 --> 00:07:46,954
PROFESSOR: Congratulations.
教授：恭喜。 

176
00:07:46,954 --> 00:07:48,300
You deserve a Turing Award.
您应得图灵奖。 

177
00:07:48,300 --> 00:07:49,509
You have discovered Dijkstra.
您已找到Dijkstra。 

178
00:07:49,509 --> 00:07:53,240



179
00:07:53,240 --> 00:07:55,410
OK, let's go for something simpler.
好吧，让我们去简单一些。 

180
00:07:55,410 --> 00:07:57,160
I just say this is Dijkstra.
我只是说这是Dijkstra。 

181
00:07:57,160 --> 00:07:59,350
We'll talk about it in lecture on Tuesday.
我们将在星期二的讲座中谈论它。 

182
00:07:59,350 --> 00:08:02,069
Very good.
很好。 

183
00:08:02,269 --> 00:08:03,931
AUDIENCE: Like, have an adjacency list
听众：喜欢，有一个邻接表

184
00:08:03,932 --> 00:08:06,824
and, I think using what he said.
而且，我想使用他的话。 

185
00:08:06,824 --> 00:08:10,500
Just sort it by cost--
只需按成本排序- 

186
00:08:10,500 --> 00:08:12,490
PROFESSOR: OK, let's see how this would work.
教授：好的，让我们看看这将如何工作。 

187
00:08:12,490 --> 00:08:18,509
We have A, and we're pulling A out of the list.
我们有A，并且正在将A从列表中拉出。 

188
00:08:18,509 --> 00:08:22,250
And we see its neighbors are C and B. Right?
我们看到它的邻居是C和B。对吗？ 

189
00:08:22,250 --> 00:08:23,610
The distance to C is 2.
到C的距离是2。 

190
00:08:23,610 --> 00:08:25,660
The distance to B is 4.
到B的距离是4。 

191
00:08:25,660 --> 00:08:29,379
So we start with A. Does this mean
所以我们从A开始。这是否意味着

192
00:08:29,579 --> 00:08:32,418
that I'm going to put in B before C?
我要在B之前放在C之前？ 

193
00:08:32,418 --> 00:08:34,537
I'm going to put in C and then B?
我要先输入C然后再输入B？ 

194
00:08:34,537 --> 00:08:36,671
AUDIENCE: No, it doesn't really matter
听众：不，没关系

195
00:08:36,871 --> 00:08:38,740
because at the end you just sort the part.
因为最后您只需要对零件进行排序。 

196
00:08:38,740 --> 00:08:41,753
I guess you could add in the costs.
我想您可以增加费用。 

197
00:08:41,953 --> 00:08:44,048
Like associate the costs of B with 4
就像将B的成本与4相关联

198
00:08:44,048 --> 00:08:48,009
and C with 2 within your adjacency list?
和C在您的邻接列表中带有2？ 

199
00:08:48,009 --> 00:08:50,099
PROFESSOR: So, that's how we would keep track of costs,
教授：因此，这就是我们跟踪成本的方式， 

200
00:08:50,299 --> 00:08:50,689
right?
对？ 

201
00:08:50,690 --> 00:08:51,079
One way.
单程。 

202
00:08:51,279 --> 00:08:52,274
AUDIENCE: --for the queue would be A
听众：-因为队列是A 

203
00:08:52,274 --> 00:08:54,856
and then the value would be like a [INAUDIBLE] B and its cost,
然后该值将类似于[音频不清晰] B及其费用， 

204
00:08:54,856 --> 00:08:57,620
and the [INAUDIBLE] C and its cost.
以及[音频不清晰] C及其成本。 

205
00:08:57,620 --> 00:09:00,529
PROFESSOR: So you're saying that what I would have in this list
教授：所以您是说我在这份清单中会得到的

206
00:09:00,529 --> 00:09:05,019
is B with a cost of 4?
是成本为4的B吗？ 

207
00:09:05,019 --> 00:09:09,149
And C with a cost of 2?
和C的成本为2？ 

208
00:09:09,149 --> 00:09:12,610
Presumably, the other way around, right?
大概是相反的方式，对吧？ 

209
00:09:12,610 --> 00:09:13,264
C goes first?
 C先走吗？ 

210
00:09:13,264 --> 00:09:20,889



211
00:09:20,889 --> 00:09:22,439
Like This?
像这样？ 

212
00:09:22,440 --> 00:09:26,220
And then I take out C, I explore the neighbors so and so forth?
然后我拿出C，然后探索邻居等等？ 

213
00:09:26,220 --> 00:09:28,769
The moment I did this I already lost the battle.
我这样做的那一刻，我已经输掉了战斗。 

214
00:09:28,769 --> 00:09:36,759
Because, see this path A, C, B, length 3?
因为看到此路径A，C，B的长度为3？ 

215
00:09:36,759 --> 00:09:38,659
If I put both of them in the queue,
如果我把它们都放在队列中， 

216
00:09:38,659 --> 00:09:41,699
then the parent pointers are going to look like this.
那么父指针将看起来像这样。 

217
00:09:41,700 --> 00:09:44,070
So, I already have a bad path from B to A.
因此，我从B到A的路已经很差。 

218
00:09:44,270 --> 00:09:46,919
AUDIENCE: OK, well don't add that node then.
听众：好的，那么不要添加该节点。 

219
00:09:46,919 --> 00:09:48,754
PROFESSOR: OK, then how do we do it?
教授：好的，那我们该怎么做？ 

220
00:09:48,754 --> 00:09:52,634
AUDIENCE: I guess you can talk to each of them
听众：我想你可以和他们每个人谈谈

221
00:09:52,634 --> 00:09:54,490
and see which one's lower and then, only
然后看看哪一个更低

222
00:09:54,490 --> 00:09:56,850
add that one if it's the lowest.
如果是最低的，再加上一个。 

223
00:09:56,850 --> 00:09:58,500
So it's more like depth search then--
因此，这更像是深度搜索- 

224
00:09:58,500 --> 00:10:00,416
PROFESSOR: Well, you two need to talk together
教授：好，你们两个需要一起聊天

225
00:10:00,416 --> 00:10:02,329
because you're getting to Dijkstra, too.
因为你也要去Dijkstra。 

226
00:10:02,529 --> 00:10:06,120
You're both going to rediscover Dijkstra.
你们都将重新发现Dijkstra。 

227
00:10:06,120 --> 00:10:09,370
So that's great, but I'm looking for something simple.
太好了，但我正在寻找简单的东西。 

228
00:10:09,370 --> 00:10:10,940
This is too complicated.
这太复杂了。 

229
00:10:10,940 --> 00:10:12,740
If you're going to do Dijkstra now, then
如果您现在要进行Dijkstra，那么

230
00:10:12,740 --> 00:10:14,697
what are going to do on lecture on Tuesday?
周二的演讲会做什么？ 

231
00:10:14,697 --> 00:10:17,557
AUDIENCE: More Dijkstra problems?
观众：还有Dijkstra问题吗？ 

232
00:10:17,557 --> 00:10:20,139
PROFESSOR: Well, I think Shreeny wants to talk about Dijkstra,
教授：好吧，我想Shreeny想谈谈Dijkstra， 

233
00:10:20,139 --> 00:10:21,279
so let's not get there.
所以我们不要去那里。 

234
00:10:21,279 --> 00:10:24,514
AUDIENCE: How do you do this without doing Dijkstra?
观众：您如何在不执行Dijkstra的情况下做到这一点？ 

235
00:10:24,514 --> 00:10:24,979
PROFESSOR: Good.
教授：很好。 

236
00:10:25,179 --> 00:10:27,149
That's exactly what I want to know.
这正是我想知道的。 

237
00:10:27,149 --> 00:10:29,970
[LAUGHTER]
 [笑声] 

238
00:10:29,970 --> 00:10:31,791
So, let me give you another hint.
所以，让我再给您一个提示。 

239
00:10:31,791 --> 00:10:33,839
The first hint was that I want to go through this edge
第一个暗示是我想经历这个边缘

240
00:10:34,039 --> 00:10:36,379
faster than I would go through this edge.
比我经历这个边缘要快。 

241
00:10:36,379 --> 00:10:40,744
The other hint is that we're allowed to change the graph.
另一个提示是允许我们更改图表。 

242
00:10:40,744 --> 00:10:43,379
AUDIENCE: Is this what we talked about in lecture,
听众：这是我们在演讲中谈到的， 

243
00:10:43,379 --> 00:10:46,490
or are we thinking of something else?
还是我们在想其他事情？ 

244
00:10:46,490 --> 00:10:48,240
PROFESSOR: He might have talked about that
教授：他可能已经谈论过

245
00:10:48,240 --> 00:10:51,610
at the end of lecture.
在讲座结束时。 

246
00:10:51,610 --> 00:10:54,960
AUDIENCE: Were you putting the current weight
观众：您是要放当前体重吗

247
00:10:54,960 --> 00:10:58,389
for each node inside the circles?
对于圈子中的每个节点？ 

248
00:10:58,389 --> 00:11:01,330
PROFESSOR: No.
教授：不。 

249
00:11:01,330 --> 00:11:02,599
AUDIENCE: You could add it and then
听众：您可以添加它，然后

250
00:11:02,799 --> 00:11:05,740
if you could find a better path to B?
是否可以找到通往B的更好途径？ 

251
00:11:05,740 --> 00:11:07,620
With rows relative to A, then you
相对于A的行，那么您

252
00:11:07,620 --> 00:11:09,500
could just delete that path?
可以删除该路径吗？ 

253
00:11:09,500 --> 00:11:10,625
And B to 4?
和B到4？ 

254
00:11:10,625 --> 00:11:12,625
So at the beginning you add them all, but then--
因此，一开始您将它们全部添加，但是- 

255
00:11:12,625 --> 00:11:15,312
PROFESSOR: You're risking to have exponential running time.
教授：您冒着成倍的运行时间的危险。 

256
00:11:15,312 --> 00:11:18,356
AUDIENCE: (LAUGHS)
观众：（笑声） 

257
00:11:18,356 --> 00:11:20,189
PROFESSOR: Those are all valid optimizations
教授：这些都是有效的优化

258
00:11:20,190 --> 00:11:21,570
under some constraints.
在某些约束下。 

259
00:11:21,570 --> 00:11:24,250
Like, this one's good if you don't have too much memory,
就像，如果您没有太多的记忆，这是一件好事， 

260
00:11:24,250 --> 00:11:27,730
but the time goes up.
但是时间到了。 

261
00:11:27,730 --> 00:11:30,609
I want my graph to have edges with no costs,
我希望我的图表没有成本， 

262
00:11:30,809 --> 00:11:34,250
because if I have costs, this is not going to work.
因为如果我有费用，这将无法工作。 

263
00:11:34,250 --> 00:11:36,950
BFS is not going to work.
 BFS无法正常工作。 

264
00:11:36,950 --> 00:11:37,700
We can't tweak it.
我们无法调整它。 

265
00:11:37,700 --> 00:11:41,110
If you could tweak it then that would be another Turing Award.
如果您可以调整它，那将是另一个图灵奖。 

266
00:11:41,110 --> 00:11:42,561
AUDIENCE: So, create dummy nodes?
听众：那么，创建虚拟节点吗？ 

267
00:11:42,561 --> 00:11:43,609
PROFESSOR: Create dummy nodes.
教授：创建虚拟节点。 

268
00:11:43,809 --> 00:11:46,929
How do I do that?
我怎么做？ 

269
00:11:46,929 --> 00:11:49,779
AUDIENCE:Put a band of node in between A and C?
听众：在A和C之间放置一个节点带？ 

270
00:11:49,779 --> 00:11:50,480
PROFESSOR: OK.
教授：好的。 

271
00:11:50,480 --> 00:11:51,389
Why am I doing this?
我为什么要这样做？ 

272
00:11:51,389 --> 00:11:56,509



273
00:11:56,509 --> 00:11:59,710
So now I have two edges and they have costs.
所以现在我有两个优势，而且它们都有成本。 

274
00:11:59,710 --> 00:12:00,600
AUDIENCE: One.
听众：一。 

275
00:12:00,600 --> 00:12:03,091
Then you put three nodes in between A and B.
然后将三个节点放在A和B之间。 

276
00:12:03,091 --> 00:12:03,674
PROFESSOR: OK.
教授：好的。 

277
00:12:03,674 --> 00:12:07,120



278
00:12:07,120 --> 00:12:10,980
And now here I have four edges, right?
现在我在这里有四个优势，对吗？ 

279
00:12:10,980 --> 00:12:12,990
1, 1, 1, 1.
 1 1 1 

280
00:12:12,990 --> 00:12:17,990
There was a 4 here before and there was a 2 here before.
以前这里有4个，以前这里有2个。 

281
00:12:17,990 --> 00:12:20,039
Do you guys see what's happening?
你们看到发生了什么吗？ 

282
00:12:20,039 --> 00:12:24,519
So, instead of one edge of cost C, I have C edges.
因此，我有C个边，而不是成本C的边。 

283
00:12:24,519 --> 00:12:31,009
So, now BFS is going to take C steps to go through that edge.
因此，现在BFS将采取C步骤来穿越该边缘。 

284
00:12:31,009 --> 00:12:33,230
And all the edges now have the same cost.
现在所有边缘的成本都相同。 

285
00:12:33,230 --> 00:12:35,274
This looks like a problem that BFS can solve.
这似乎是BFS可以解决的问题。 

286
00:12:35,274 --> 00:12:36,149
We know it can solve.
我们知道它可以解决。 

287
00:12:36,149 --> 00:12:37,929
We proved that it can solve it.
我们证明它可以解决。 

288
00:12:37,929 --> 00:12:39,259
Well, CLRS did.
好吧，CLRS做到了。 

289
00:12:39,259 --> 00:12:41,139
We take their word for granted, sort of.
我们认为他们的话是理所当然的。 

290
00:12:41,139 --> 00:12:45,139



291
00:12:45,139 --> 00:12:46,976
This works right?
这样行吗？ 

292
00:12:46,976 --> 00:12:48,059
Is everyone happy with it?
每个人都满意吗？ 

293
00:12:48,059 --> 00:12:49,769
Does it make sense?
是否有意义？ 

294
00:12:49,769 --> 00:12:55,159
AUDIENCE: So basically, we get through C
听众：基本上，我们通过了C 

295
00:12:55,159 --> 00:12:57,250
before you'll get to B on the other path.
在到达另一条路之前，先到达B。 

296
00:12:57,250 --> 00:12:58,000
PROFESSOR: Yep.
教授：是的。 

297
00:12:58,000 --> 00:13:00,230
This is the path of length 3, so this node
这是长度为3的路径，所以这个节点

298
00:13:00,230 --> 00:13:02,730
is going to get in the queue first.
将首先进入队列。 

299
00:13:02,730 --> 00:13:03,610
Then this node.
然后是这个节点。 

300
00:13:03,610 --> 00:13:04,980
Then these two nodes.
然后这两个节点。 

301
00:13:04,980 --> 00:13:09,970
And they're going to get in the queue from C.
他们将从C入队。 

302
00:13:09,970 --> 00:13:12,620
Let's see what happened here.
让我们看看这里发生了什么。 

303
00:13:12,620 --> 00:13:14,440
This is really important because this
这真的很重要，因为这

304
00:13:14,440 --> 00:13:16,969
is what you're going to be doing in real life.
是您在现实生活中要做的事情。 

305
00:13:17,169 --> 00:13:20,000
Chances of having to build a new algorithm?
是否有必要构建新算法？ 

306
00:13:20,000 --> 00:13:20,700
Kind of slim.
有点苗条。 

307
00:13:20,700 --> 00:13:22,250
Why don't you want to do that?
您为什么不想这样做？ 

308
00:13:22,250 --> 00:13:25,240
Say you take Dijkstra and you tweak it a little bit.
假设您选择了Dijkstra，然后对其进行了一些调整。 

309
00:13:25,240 --> 00:13:27,909
If you did that, you have to go through the analysis
如果这样做，则必须进行分析

310
00:13:27,909 --> 00:13:29,319
and prove the running time again,
并再次证明运行时间， 

311
00:13:29,320 --> 00:13:30,599
prove the correctness again.
再次证明正确性。 

312
00:13:30,799 --> 00:13:35,089
Time-consuming, error-prone, it's really hard.
费时，容易出错，这真的很难。 

313
00:13:35,090 --> 00:13:37,379
However, what happened here is that we
但是，这里发生的是

314
00:13:37,379 --> 00:13:39,879
have some problem that we want to solve.
有一些我们要解决的问题。 

315
00:13:39,879 --> 00:13:41,629
Say we have the raw input for that problem
说我们有这个问题的原始输入

316
00:13:41,629 --> 00:13:44,909
that we're trying to solve.
我们正在尝试解决的问题。 

317
00:13:44,909 --> 00:13:48,365
That is this graph that I draw the board.
这就是我画图的这张图。 

318
00:13:48,365 --> 00:13:51,740



319
00:13:51,740 --> 00:13:54,889
And we apply some transform and we
然后我们进行一些变换， 

320
00:13:54,889 --> 00:13:57,120
get an input that's suitable for an algorithm
获得适合算法的输入

321
00:13:57,120 --> 00:13:58,080
that we already know.
我们已经知道。 

322
00:13:58,080 --> 00:14:05,469



323
00:14:05,669 --> 00:14:07,459
I'm going to take a shortcut here.
我这里要走捷径。 

324
00:14:07,460 --> 00:14:13,120



325
00:14:13,120 --> 00:14:14,870
We apply the transform, right?
我们应用转换，对不对？ 

326
00:14:14,870 --> 00:14:17,549
We took this graph and we built a new graph in.
我们使用了此图，并在其中建立了一个新图。 

327
00:14:17,549 --> 00:14:19,740
And this is hopefully easy.
希望这很容易。 

328
00:14:19,740 --> 00:14:20,720
Right?
对？ 

329
00:14:20,720 --> 00:14:22,320
Take an edge and split it up.
占据优势，将其拆分。 

330
00:14:22,320 --> 00:14:23,070
Put in fake nodes.
放入假节点。 

331
00:14:23,070 --> 00:14:23,840
This is easy.
这很容易。 

332
00:14:23,840 --> 00:14:26,209
We know how to code that.
我们知道如何编写代码。 

333
00:14:26,409 --> 00:14:28,675
And now we have this algorithm that you already know,
现在我们有了您已经知道的算法

334
00:14:28,676 --> 00:14:30,099
and we're treating it like a black box.
我们将其视为黑匣子。 

335
00:14:30,299 --> 00:14:33,179



336
00:14:33,179 --> 00:14:34,186
We know it's correct.
我们知道这是正确的。 

337
00:14:34,187 --> 00:14:35,269
We know it's running time.
我们知道这是运行时间。 

338
00:14:35,269 --> 00:14:36,289
We're not questioning them.
我们不是在问他们。 

339
00:14:36,289 --> 00:14:37,909
We're taking them straight from the textbook.
我们直接从教科书中获取它们。 

340
00:14:37,909 --> 00:14:38,779
They have to be right.
他们必须是正确的。 

341
00:14:38,779 --> 00:14:40,571
By the way, what's the running time of BFS?
顺便问一下，BFS的运行时间是多少？ 

342
00:14:40,571 --> 00:14:48,620



343
00:14:48,620 --> 00:14:49,426
AUDIENCE: V plus E?
听众：V加E？ 

344
00:14:49,426 --> 00:14:50,099
PROFESSOR: Very good.
教授：非常好。 

345
00:14:50,299 --> 00:14:55,049



346
00:14:55,049 --> 00:14:57,109
Then BFS is going to give us a path, right?
然后BFS会给我们一条路，对吗？ 

347
00:14:57,110 --> 00:14:58,830
And the path is going to look like this.
路径将看起来像这样。 

348
00:14:58,830 --> 00:15:07,700
It's going to be A, fake node, C, D,
它将是A，假节点，C，D， 

349
00:15:07,700 --> 00:15:12,911
fake node, E. If you're giving this back to the guy who
假节点E。如果您将其退还给

350
00:15:13,111 --> 00:15:15,069
gave you the problem, they're going to be like,
给你的问题，他们会像

351
00:15:15,070 --> 00:15:16,210
what are these fake nodes?
这些假节点是什么？ 

352
00:15:16,210 --> 00:15:17,769
I don't know anything about them.
我对他们一无所知。 

353
00:15:17,769 --> 00:15:19,319
This doesn't make sense.
这没有道理。 

354
00:15:19,320 --> 00:15:23,940
You need to take this raw output and you
您需要获取原始输出，然后

355
00:15:23,940 --> 00:15:25,079
need to transform it again.
需要再次对其进行转换。 

356
00:15:25,279 --> 00:15:28,110
Based on what you did this transformation,
根据您所做的转换， 

357
00:15:28,110 --> 00:15:29,509
you have to read out the output.
您必须读出输出。 

358
00:15:29,509 --> 00:15:31,110
You have to interpret it.
您必须对其进行解释。 

359
00:15:31,110 --> 00:15:33,970
So, this is either interpret or readout.
因此，这是解释或读出。 

360
00:15:33,970 --> 00:15:38,230
And then you get a nice output that's
然后您会得到一个不错的输出

361
00:15:38,230 --> 00:15:40,700
the output to your original problem.
输出到您原来的问题。 

362
00:15:40,700 --> 00:15:43,079



363
00:15:43,279 --> 00:15:47,490
This process here is the most likely way
这是最可能的方法

364
00:15:47,490 --> 00:15:50,110
in which you'll use your 6006 knowledge.
在其中您将使用您的6006知识。 

365
00:15:50,110 --> 00:15:53,460
And this is replaced by any algorithm that we taught.
这被我们教过的任何算法所取代。 

366
00:15:53,460 --> 00:15:55,118
This is replaced by any real life problem
这被任何现实生活中的问题所取代

367
00:15:55,318 --> 00:15:56,235
that you'll encounter.
你会遇到的。 

368
00:15:56,235 --> 00:16:01,580



369
00:16:01,580 --> 00:16:02,844
There's one missing step here.
这里缺少一个步骤。 

370
00:16:02,844 --> 00:16:04,059
We know the running time for this.
我们知道运行时间。 

371
00:16:04,259 --> 00:16:08,649
Let's find out the running time for the whole thing.
让我们找出整个过程的运行时间。 

372
00:16:08,649 --> 00:16:11,220
In order to do that, we have to figure out
为了做到这一点，我们必须弄清楚

373
00:16:11,220 --> 00:16:13,389
given this original graph.
给出这个原始图。 

374
00:16:13,389 --> 00:16:15,179
Let's say that now, in the original graph,
假设现在在原始图中

375
00:16:15,179 --> 00:16:18,219
we have V prime vertices, E prime edges, and W
我们有V个素顶点，E个素边缘和W 

376
00:16:18,220 --> 00:16:20,759
prime weights.
素重。 

377
00:16:20,759 --> 00:16:24,100
We have to convert this into V plus E.
我们必须将其转换为V加E。 

378
00:16:24,100 --> 00:16:26,599
We have to see when we make this transform, how many vertices
我们必须看到进行转换时有多少个顶点

379
00:16:26,799 --> 00:16:27,299
do we get?
我们得到吗？ 

380
00:16:27,299 --> 00:16:30,261
How many edges do we get in terms of the original graph
就原始图形而言，我们可以获得多少条边

381
00:16:30,261 --> 00:16:31,927
so that we can compute the running time?
这样我们才能计算出运行时间？ 

382
00:16:31,927 --> 00:16:34,529



383
00:16:34,529 --> 00:16:38,669
In the original graph, V prime vertices, E prime edges,
在原始图中，V个素顶点，E个素边缘， 

384
00:16:38,669 --> 00:16:40,179
W prime weights.
 W质数权重。 

385
00:16:40,179 --> 00:16:43,539
In this new graph, how many edges do I have, at most?
在这张新图中，我最多有多少条边？ 

386
00:16:43,539 --> 00:16:51,014



387
00:16:51,014 --> 00:16:52,245
AUDIENCE: Something times E?
听众：大约是E？ 

388
00:16:52,245 --> 00:16:52,870
PROFESSOR: Yep.
教授：是的。 

389
00:16:52,870 --> 00:16:53,369
Perfect.
完善。 

390
00:16:53,369 --> 00:16:57,209



391
00:16:57,409 --> 00:17:00,100
Each edge has cost at most W. That
每个边的成本最高为W​​。 

392
00:17:00,100 --> 00:17:04,361
means we're going to split it up into most W edges.
意味着我们将把它分成大部分W边缘。 

393
00:17:04,361 --> 00:17:05,965
How many vertices are we going to have?
我们要有多少个顶点？ 

394
00:17:06,165 --> 00:17:14,461



395
00:17:14,461 --> 00:17:16,920
AUDIENCE: W prime?
听众：W素数？ 

396
00:17:16,920 --> 00:17:19,509
PROFESSOR: W prime, E prime.
教授：W素数，E素数。 

397
00:17:19,509 --> 00:17:20,776
AUDIENCE: Plus V prime?
听众：加V素数？ 

398
00:17:20,776 --> 00:17:21,776
PROFESSOR: Plus V prime.
教授：加V素数。 

399
00:17:21,776 --> 00:17:23,148
Don't forget about the original ones.
不要忘记原始的。 

400
00:17:23,348 --> 00:17:25,639
They're still there.
他们仍然在那里。 

401
00:17:25,640 --> 00:17:29,875
So, total running time for BFS on this new graph is?
那么，在这个新图表上BFS的总运行时间是？ 

402
00:17:29,875 --> 00:17:37,778



403
00:17:37,778 --> 00:17:40,200
AUDIENCE: --E prime.
听众：--E素。 

404
00:17:40,200 --> 00:17:44,409
PROFESSOR: Put it the other way around, plus W prime, E prime.
教授：反之，再加上W素数，E素数。 

405
00:17:44,609 --> 00:17:48,240



406
00:17:48,240 --> 00:17:50,339
This is the running time that we have.
这是我们的运行时间。 

407
00:17:50,339 --> 00:17:53,299
Now, does anyone remember Dijkstra's running time
现在，有谁记得Dijkstra的跑步时间

408
00:17:53,299 --> 00:17:55,059
and Bellam-Ford's running time?
贝拉姆·福特的放映时间？ 

409
00:17:55,059 --> 00:17:58,869



410
00:17:58,869 --> 00:18:00,622
So what is the running time for Dijkstra?
那么Dijkstra的运行时间是多少？ 

411
00:18:00,623 --> 00:18:04,970
AUDIENCE: V log V plus E?
听众：V log V加E？ 

412
00:18:04,970 --> 00:18:06,593
PROFESSOR: Almost.
教授：差不多了。 

413
00:18:06,593 --> 00:18:07,980
AUDIENCE: V log V?
听众：V log V？ 

414
00:18:07,980 --> 00:18:09,001
PROFESSOR: Oh, wait.
教授：哦，等等。 

415
00:18:09,001 --> 00:18:10,849
I think you're right.
我想你是正确的。 

416
00:18:10,849 --> 00:18:14,451
V log V plus--
 V log V加- 

417
00:18:14,451 --> 00:18:16,839
AUDIENCE: E?
听众：E？ 

418
00:18:16,839 --> 00:18:19,679
PROFESSOR: I already named this from CRS?
教授：我已经从CRS取这个名字了吗？ 

419
00:18:19,680 --> 00:18:20,670
Or is this what we got?
还是这是我们得到的？ 

420
00:18:20,670 --> 00:18:23,630



421
00:18:23,630 --> 00:18:25,445
Entry is a fancy key to give this running time.
进入是赋予此运行时间的理想选择。 

422
00:18:25,645 --> 00:18:26,845
AUDIENCE: [INAUDIBLE].
听众：[听不清]。 

423
00:18:26,845 --> 00:18:29,470
PROFESSOR: You can get this, but you need the really fancy data
教授：可以得到，但是您需要真正的数据

424
00:18:29,470 --> 00:18:30,720
structure for it.
它的结构。 

425
00:18:30,720 --> 00:18:36,980
In real life, the running time looks more like E log V.
在现实生活中，运行时间看起来更像E logV。 

426
00:18:36,980 --> 00:18:38,160
And how about Bellam-Ford?
贝拉姆·福特怎么样？ 

427
00:18:38,160 --> 00:18:49,970



428
00:18:49,970 --> 00:18:52,226
So let's take this running time for Dijkstra
因此，让我们把这个运行时间带给Dijkstra 

429
00:18:52,226 --> 00:18:53,399
because this is what you're going
因为这就是你要走的

430
00:18:53,599 --> 00:18:54,928
to implement in real life.
在现实生活中实施。 

431
00:18:54,929 --> 00:18:57,220
And we can argue about that after next lecture for now.
在下一堂课之后，我们可以就此进行辩论。 

432
00:18:57,220 --> 00:18:58,759
Take my word for it.
相信我。 

433
00:18:58,759 --> 00:19:02,480
And let's compare it to what we got here.
让我们将其与我们在这里得到的进行比较。 

434
00:19:02,480 --> 00:19:05,990
V is smaller than E in most same cases.
在大多数情况下，V小于E。 

435
00:19:05,990 --> 00:19:09,450
Let's say that this is actually W prime, E prime.
假设这实际上是W素数，E素数。 

436
00:19:09,450 --> 00:19:12,630
If you compare this with this, you'll
如果将此与此进行比较，您将

437
00:19:12,630 --> 00:19:18,619
see that, if W is smaller than log V, well, smaller equal,
可以看到，如果W小于log V，那么等于

438
00:19:18,819 --> 00:19:22,419
then this algorithm is not worse than Dijkstra.
那么这个算法并不比Dijkstra差。 

439
00:19:22,420 --> 00:19:25,440
It's on par with Dijkstra.
与Dijkstra相当。 

440
00:19:25,440 --> 00:19:28,759
For graphs with small costs, we discovered an algorithm
对于成本小的图，我们发现了一种算法

441
00:19:28,759 --> 00:19:30,720
that solves shortest paths.
解决最短的路径。 

442
00:19:30,720 --> 00:19:33,380
You walked into this recitation knowing no algorithm
您走进本课时不知道算法

443
00:19:33,380 --> 00:19:34,859
to solve shortest path.
解决最短路径。 

444
00:19:35,059 --> 00:19:36,440
Now we have an algorithm.
现在我们有了一个算法。 

445
00:19:36,440 --> 00:19:38,480
Already in a much better position.
已经处于更好的位置。 

446
00:19:38,480 --> 00:19:39,029
Right?
对？ 

447
00:19:39,029 --> 00:19:40,619
And we didn't invent anything new.
而且我们没有发明任何新东西。 

448
00:19:40,619 --> 00:19:42,419
We don't have to prove correctness.
我们不必证明正确性。 

449
00:19:42,420 --> 00:19:46,490
All we did was one of these transformations.
我们所做的只是这些转换之一。 

450
00:19:46,490 --> 00:19:49,588
How's everyone feeling?
大家感觉如何？ 

451
00:19:49,588 --> 00:19:50,629
Those things makes sense?
那些事情有意义吗？ 

452
00:19:50,630 --> 00:19:51,169
Everyone happy?
大家开心吗

453
00:19:51,369 --> 00:19:54,769



454
00:19:54,769 --> 00:20:00,025
Let's talk about another problem that also uses this structure.
让我们讨论另一个也使用此结构的问题。 

455
00:20:00,025 --> 00:20:10,037



456
00:20:10,037 --> 00:20:11,419
Suppose we have the same graph that we
假设我们有与我们相同的图

457
00:20:11,619 --> 00:20:17,039
had before, or actually, any graph with V vertices, E edges.
之前或实际上具有V顶点，E边的任何图形。 

458
00:20:17,039 --> 00:20:18,909
Now we know how to compute shortest paths.
现在我们知道了如何计算最短路径。 

459
00:20:18,910 --> 00:20:22,250
So we can assume these as black boxes.
因此，我们可以将这些假设为黑匣子。 

460
00:20:22,250 --> 00:20:26,619



461
00:20:26,619 --> 00:20:29,149
We're going to use these as they are.
我们将按原样使用它们。 

462
00:20:29,150 --> 00:20:31,339
We have a graph with V vertices and E edges.
我们有一个带有V顶点和E边的图。 

463
00:20:31,539 --> 00:20:44,639



464
00:20:44,640 --> 00:20:46,234
Let me copy the costs really quickly.
让我真正迅速地复制费用。 

465
00:20:46,434 --> 00:20:55,659



466
00:20:55,660 --> 00:20:57,720
Suppose this is the highway system,
假设这是公路系统， 

467
00:20:57,720 --> 00:20:59,700
right, like in Google Maps.
对，就像在Google Maps中一样。 

468
00:20:59,700 --> 00:21:01,319
And we have two brothers.
我们有两个兄弟。 

469
00:21:01,319 --> 00:21:03,956
They start off from a place and they
他们从一个地方开始，他们

470
00:21:03,957 --> 00:21:05,089
have to end up in another place.
必须在另一个地方结束。 

471
00:21:05,289 --> 00:21:07,519
They're going to drive together.
他们将一起开车。 

472
00:21:07,519 --> 00:21:10,329
They want this to be sort of fair.
他们希望这是公平的。 

473
00:21:10,329 --> 00:21:12,240
Every time they go between two cities
每次他们去两个城市之间

474
00:21:12,240 --> 00:21:14,950
they're going to switch seats so that none of them
他们要换座位，所以他们都不

475
00:21:14,950 --> 00:21:16,129
drives too much.
开车太多。 

476
00:21:16,329 --> 00:21:21,356
So say the brothers are Tim and Jim.
可以说兄弟是蒂姆和吉姆。 

477
00:21:21,356 --> 00:21:22,190
The names are wrong.
名称错误。 

478
00:21:22,190 --> 00:21:25,420
This is actually a problem from last year's quiz.
这实际上是去年测验中的一个问题。 

479
00:21:25,420 --> 00:21:26,700
So, by the way, real problem.
因此，顺便说一句，真正的问题。 

480
00:21:26,700 --> 00:21:29,899
You can pay attention now.
您现在可以关注。 

481
00:21:30,099 --> 00:21:32,699
These are two brothers.
这是两个兄弟。 

482
00:21:32,700 --> 00:21:34,009
They're going to alternate.
他们将交替。 

483
00:21:34,009 --> 00:21:34,509
Right?
对？ 

484
00:21:34,509 --> 00:21:36,691
One of them is going to drive across one road,
其中之一将驶过一条路， 

485
00:21:36,691 --> 00:21:39,190
then the other one, then the first one, then the second one.
然后是另一个，然后是第一个，然后是第二个。 

486
00:21:39,190 --> 00:21:40,970
So on and so forth.
等等等等。 

487
00:21:40,970 --> 00:21:45,950
Now, two Tim has a much better sense of direction than Jim.
现在，两个蒂姆比吉姆有更好的方向感。 

488
00:21:45,950 --> 00:21:47,450
That's just how things are.
事情就是这样。 

489
00:21:47,450 --> 00:21:50,880
And if you ever driven long distances,
如果你开车远距离， 

490
00:21:50,880 --> 00:21:53,109
the hardest thing to do is to get from the city
最难的事情是从城市中获得

491
00:21:53,309 --> 00:21:54,378
to the highway.
到高速公路。 

492
00:21:54,378 --> 00:21:56,419
Like, if you have to drive from here to New York.
就像，如果您必须从这里开车前往纽约。 

493
00:21:56,420 --> 00:21:57,410
Hardest thing to do?
最难做的事？ 

494
00:21:57,410 --> 00:21:59,599
Get out of Boston and onto the highway.
离开波士顿，驶向高速公路。 

495
00:21:59,799 --> 00:22:02,159
Then, at the end, the hardest thing to do?
那么，最后最难的事情是什么？ 

496
00:22:02,160 --> 00:22:03,779
Get from the highway into where you
从高速公路进入您所在的地方

497
00:22:03,779 --> 00:22:05,629
want to go through New York traffic.
想通过纽约的交通。 

498
00:22:05,630 --> 00:22:06,420
Everything else?
还有其他吗

499
00:22:06,420 --> 00:22:08,890
Piece of cake.
小菜一碟。 

500
00:22:08,890 --> 00:22:13,055
We want Tim to handle both of these situations.
我们希望蒂姆能够处理这两种情况。 

501
00:22:13,055 --> 00:22:17,220
The driving path must start with Tim and must end with Tim.
行驶路径必须以蒂姆开始，并且必须以蒂姆结束。 

502
00:22:17,220 --> 00:22:19,259
Otherwise, God knows, they're going to crash.
否则，上帝知道，它们将会崩溃。 

503
00:22:19,259 --> 00:22:21,849



504
00:22:21,849 --> 00:22:24,730
First off let's convert this into graph terms.
首先，让我们将其转换为图形项。 

505
00:22:24,730 --> 00:22:26,059
And then let's solve it.
然后解决它。 

506
00:22:26,059 --> 00:22:29,618



507
00:22:29,618 --> 00:22:31,951
AUDIENCE: You might convert what's already in the graph.
听众：您可能会转换图中已经存在的内容。 

508
00:22:31,951 --> 00:22:34,619



509
00:22:34,619 --> 00:22:36,149
PROFESSOR: I have this constraint
教授：我有这个限制

510
00:22:36,150 --> 00:22:39,989
that they're going to switch seats and that Tim has to start
他们要换座位，而蒂姆必须开始

511
00:22:39,989 --> 00:22:40,779
and Tim has to end.
蒂姆必须结束。 

512
00:22:40,779 --> 00:22:43,539
How do I phrase this in mathy terms?
我该如何用数学术语表述？ 

513
00:22:43,539 --> 00:22:44,299
In graph terms?
用图来表示？ 

514
00:22:44,299 --> 00:22:52,430



515
00:22:52,430 --> 00:22:54,621
AUDIENCE: We're starting it where and ending where?
听众：我们在哪里开始，在哪里结束？ 

516
00:22:54,621 --> 00:22:56,169
PROFESSOR: We're given where in the graph.
教授：我们在图中的位置。 

517
00:22:56,369 --> 00:23:00,419
We're starting at S, ending at T. Some points in the graph.
我们从S开始，在T结束。图中的某些点。 

518
00:23:00,420 --> 00:23:05,500
AUDIENCE: And people have to drive with it an entire edge?
听众：人们必须全力以赴吗？ 

519
00:23:05,500 --> 00:23:07,657
PROFESSOR: Ya.
教授：是的。 

520
00:23:07,657 --> 00:23:13,487
AUDIENCE: So basically, Jim has to-- whoever
听众：所以基本上，吉姆必须- 

521
00:23:13,488 --> 00:23:17,170
the good driver has to-- to drive on the edge that's
优秀的驾驶员必须-在

522
00:23:17,170 --> 00:23:19,345
adjacent to E and S.
与E和S相邻。 

523
00:23:19,345 --> 00:23:20,220
PROFESSOR: Yep.
教授：是的。 

524
00:23:20,220 --> 00:23:21,351
OK.
好。 

525
00:23:21,551 --> 00:23:24,709
AUDIENCE: You physically need, like an odd number of edges.
听众：您实际上需要像奇数个边缘。 

526
00:23:24,710 --> 00:23:25,890
PROFESSOR: Yep.
教授：是的。 

527
00:23:25,890 --> 00:23:28,859
So I want the shortest path with an odd number of edges.
所以我想要一条具有奇数个边的最短路径。 

528
00:23:29,059 --> 00:23:30,490
Why odd number of edges?
为什么边数奇数？ 

529
00:23:30,490 --> 00:23:33,419
If we look at the edges, Tim's going to take the first one.
如果我们看看边缘，蒂姆将采取第一个。 

530
00:23:33,619 --> 00:23:37,209
Then Jim, then Tim, then Jim, then Tim, then Jim.
然后是Jim，然后是Tim，然后是Jim，然后是Tim，然后是Jim。 

531
00:23:37,210 --> 00:23:40,410
No matter how many I have here, it has to end with Tim.
无论我在这里有多少人，都必须以蒂姆结束。 

532
00:23:40,410 --> 00:23:42,710
So, I'm going to have an odd number of letters here,
所以，我这里的字母奇数， 

533
00:23:42,710 --> 00:23:44,460
therefore, odd number of edges.
因此，边缘数为奇数。 

534
00:23:44,460 --> 00:23:44,960
Right?
对？ 

535
00:23:44,960 --> 00:23:51,730
So I want the shortest path that has an odd number of edges.
所以我想要一条具有奇数个边的最短路径。 

536
00:23:51,730 --> 00:23:58,569



537
00:23:58,569 --> 00:24:02,139
And as the hint we're going to use that trick over there.
作为提示，我们将在那儿使用该技巧。 

538
00:24:02,140 --> 00:24:02,759
Yes?
是？ 

539
00:24:02,759 --> 00:24:05,596
AUDIENCE: But, the shortest path isn't necessarily
听众：但是，最短的路径并不一定

540
00:24:05,596 --> 00:24:07,093
like the fairest, right?
像最美丽的吧？ 

541
00:24:07,093 --> 00:24:10,889
Like, in terms of distributing driving?
喜欢，在分配驾驶方面？ 

542
00:24:11,089 --> 00:24:13,679
PROFESSOR: One of them is going to drive one more road,
教授：其中一个人要再开一条路， 

543
00:24:13,680 --> 00:24:14,639
such is life.
这就是生活。 

544
00:24:14,839 --> 00:24:16,345
Sorry, one more edge segment.
抱歉，还有一个边缘部分。 

545
00:24:16,345 --> 00:24:18,914



546
00:24:18,914 --> 00:24:20,289
Tim's going to drive three times,
蒂姆要开车三遍， 

547
00:24:20,289 --> 00:24:21,991
Jim is going to drive two times.
吉姆要开车两次。 

548
00:24:21,991 --> 00:24:24,450
AUDIENCE: Right, but like, in terms of the weights?
听众：对，但是就重量而言？ 

549
00:24:24,450 --> 00:24:25,082
PROFESSOR: Oh, yeah.
教授：哦，是的。 

550
00:24:25,282 --> 00:24:27,679
We don't care about that.
我们不在乎。 

551
00:24:27,680 --> 00:24:29,321
Jim doesn't know where he's going anyways.
吉姆不知道他要去哪里。 

552
00:24:29,521 --> 00:24:31,980
AUDIENCE: Just a minimum, we have to have like three paths,
听众：至少，我们必须走三条路， 

553
00:24:31,980 --> 00:24:33,116
right?
对？ 

554
00:24:33,116 --> 00:24:35,116
We don't just want Tim to get out to the highway
我们不只是希望蒂姆走上高速公路

555
00:24:35,116 --> 00:24:37,157
and be like, oh look our journey's not that far--
就像，哦，看来我们的旅程不远了- 

556
00:24:37,157 --> 00:24:39,649



557
00:24:39,650 --> 00:24:42,940
PROFESSOR: So I went to the path with the smallest cost.
教授：所以我去了成本最低的道路。 

558
00:24:42,940 --> 00:24:45,787
So, smallest total weight.
因此，总重量最小。 

559
00:24:45,787 --> 00:24:47,419
AUDIENCE: In theory it could be length, too.
听众：从理论上讲，它也可以是长度。 

560
00:24:47,619 --> 00:24:48,529
Right?
对？ 

561
00:24:48,529 --> 00:24:50,070
PROFESSOR: Well, if it's length, too,
教授：好吧，如果也是， 

562
00:24:50,070 --> 00:24:53,849
then it's not going to be good because they're going to crash.
那就不好了，因为它们会崩溃。 

563
00:24:53,849 --> 00:24:54,689
AUDIENCE: Oh, I see.
听众：哦，我知道了。 

564
00:24:54,690 --> 00:24:56,592
They have to switch every time.
他们每次都必须切换。 

565
00:24:56,592 --> 00:24:58,599
PROFESSOR: Tim can't drive for two consecutive edges.
教授：蒂姆不能连续两个边缘开车。 

566
00:24:58,799 --> 00:25:08,116



567
00:25:08,116 --> 00:25:09,950
AUDIENCE: You could use breadth-first search
听众：您可以使用广度优先搜索

568
00:25:09,950 --> 00:25:14,410
and, once you get to the end point,
而且，一旦到达终点， 

569
00:25:14,410 --> 00:25:20,267
or made all paths that are [INAUDIBLE] and then,
或将所有路径设为[音频不清晰]，然后， 

570
00:25:20,267 --> 00:25:23,105
of those paths, go through to see
在这些路径中，经历看看

571
00:25:23,105 --> 00:25:24,880
which one's the lowest cost?
哪个费用最低？ 

572
00:25:24,880 --> 00:25:26,380
PROFESSOR: You're thinking enumerate
教授：您正在考虑列举

573
00:25:26,380 --> 00:25:28,910
all paths of even length?
所有长度均等的路径？ 

574
00:25:28,910 --> 00:25:30,629
Just to make sure I got it.
只是为了确保我明白了。 

575
00:25:30,829 --> 00:25:32,569
So this is cool because it let's me
所以这很酷，因为它让我

576
00:25:32,569 --> 00:25:34,289
show something else that's cool.
展示其他很酷的东西。 

577
00:25:34,289 --> 00:25:38,319
So, enumerate all paths of even length.
因此，请列举所有长度均匀的路径。 

578
00:25:38,319 --> 00:25:40,159
Something else I heard, enumerate
我还听到了其他一些东西

579
00:25:40,160 --> 00:25:41,869
all the shortest paths.
所有最短的路径。 

580
00:25:42,069 --> 00:25:44,109
For both of these, let's look at this graph.
对于这两种情况，让我们看一下这张图。 

581
00:25:44,109 --> 00:25:53,829



582
00:25:53,829 --> 00:25:57,963
S, T, all the paths have length 1.
 S，T，所有路径的长度为1。 

583
00:25:57,963 --> 00:26:00,909



584
00:26:00,910 --> 00:26:02,740
How many ways are there to get from S to T?
从S到T有多少种方法？ 

585
00:26:02,740 --> 00:26:06,009



586
00:26:06,009 --> 00:26:06,970
AUDIENCE: Two to three.
听众：二到三。 

587
00:26:06,970 --> 00:26:07,970
PROFESSOR: Two to three.
教授：两到三个。 

588
00:26:07,970 --> 00:26:10,740
Two ways to go across this diamond.
穿越这颗钻石的两种方法。 

589
00:26:10,740 --> 00:26:13,079
Two ways to go across this one.
有两种方法可以解决这一问题。 

590
00:26:13,079 --> 00:26:15,039
Two ways to go across this one.
有两种方法可以解决这一问题。 

591
00:26:15,039 --> 00:26:15,990
Right?
对？ 

592
00:26:15,990 --> 00:26:17,519
2 times 2 times 2?
 2 2 2 

593
00:26:17,519 --> 00:26:19,269
8.
 8。 

594
00:26:19,269 --> 00:26:25,369
If I add another diamond, how many paths?
如果我添加另一个菱形，有多少条路径？ 

595
00:26:25,369 --> 00:26:25,949
One more?
多一个？ 

596
00:26:25,950 --> 00:26:29,220



597
00:26:29,220 --> 00:26:32,399
So the number of even paths, or the number of shortest paths,
因此，偶数路径数或最短路径数

598
00:26:32,599 --> 00:26:38,379
the number of whatever paths I can think about is, order of?
我能想到的任何路径的数量是多少？ 

599
00:26:38,380 --> 00:26:41,245



600
00:26:41,445 --> 00:26:42,199
Come on, guys.
拜托了伙计们。 

601
00:26:42,200 --> 00:26:44,421
Math.
数学。 

602
00:26:44,421 --> 00:26:44,920
Rrrr!
 rr！ 

603
00:26:44,920 --> 00:26:45,420
Go!
走！ 

604
00:26:45,420 --> 00:26:47,294
[LAUGHTER]
 [笑声] 

605
00:26:47,294 --> 00:26:49,706
AUDIENCE: 2 to a number of diamonds?
观众：2颗钻石？ 

606
00:26:49,906 --> 00:26:50,740
PROFESSOR: Which is?
教授：那是什么？ 

607
00:26:50,740 --> 00:26:54,700



608
00:26:54,700 --> 00:26:58,519
Roughly to the vertices.
大致到顶点。 

609
00:26:58,519 --> 00:27:01,039
Exponential in the number of vertices.
顶点数的指数。 

610
00:27:01,039 --> 00:27:02,670
Not very good, not very good.
不是很好，不是很好。 

611
00:27:02,670 --> 00:27:05,660
We can't do this.
我们做不到

612
00:27:05,660 --> 00:27:07,486
So, it's better that we talked about it here,
因此，最好在这里讨论它， 

613
00:27:07,686 --> 00:27:09,269
then that you try to do it on the quiz
然后您尝试在测验中做到这一点

614
00:27:09,269 --> 00:27:11,709
and you have to discover this on your own, right?
而且您必须自己发现它，对吧？ 

615
00:27:11,709 --> 00:27:12,250
Good comment.
好评论。 

616
00:27:12,250 --> 00:27:14,708
AUDIENCE: Didn't understand what you meant by that lecture.
听众：听不懂那堂课的意思。 

617
00:27:14,708 --> 00:27:15,399
Now it makes sense.
现在有道理了。 

618
00:27:15,599 --> 00:27:17,379
PROFESSOR: That's completely different.
教授：那是完全不同的。 

619
00:27:17,380 --> 00:27:18,409
AUDIENCE: That wasn't the thing he was talking about?
听众：那不是他在说的吗？ 

620
00:27:18,609 --> 00:27:19,919
PROFESSOR: That's different.
教授：不一样。 

621
00:27:19,920 --> 00:27:22,599
AUDIENCE: OK.
听众：好的。 

622
00:27:22,799 --> 00:27:25,069
PROFESSOR: That's where relaxation can go wrong.
教授：那是放松的地方。 

623
00:27:25,069 --> 00:27:27,659
So if you show that if you relax the edges in a random order,
因此，如果您证明以随机顺序放松边缘， 

624
00:27:27,660 --> 00:27:29,639
you can have an exponential number of steps.
您可以有指数级的步骤。 

625
00:27:29,839 --> 00:27:33,076



626
00:27:33,076 --> 00:27:35,410
This shows that there are an exponential number of paths
这表明路径的数量是指数的

627
00:27:35,410 --> 00:27:40,161
for any graph, no matter how good your algorithm is.
对于任何图形，无论您的算法有多好。 

628
00:27:40,161 --> 00:27:42,160
So we're not going to be able to enumerate them.
因此，我们将无法枚举它们。 

629
00:27:42,160 --> 00:27:43,201
Let's try something else.
让我们尝试其他事情。 

630
00:27:43,201 --> 00:27:47,980



631
00:27:47,980 --> 00:27:49,944
AUDIENCE: You have another suggestion?
听众：您还有其他建议吗？ 

632
00:27:49,944 --> 00:27:51,889
Just look at all the--
只要看看所有- 

633
00:27:51,890 --> 00:27:53,700
PROFESSOR: So, you're doing this.
教授：所以，您正在这样做。 

634
00:27:53,700 --> 00:27:56,035
You're looking here.
你在这儿

635
00:27:56,035 --> 00:27:57,599
Everyone's looking here.
大家都在看

636
00:27:57,799 --> 00:27:58,879
How about this?
这个怎么样？ 

637
00:27:58,880 --> 00:28:03,236



638
00:28:03,236 --> 00:28:04,690
AUDIENCE: We should do that?
听众：我们应该这样做吗？ 

639
00:28:04,690 --> 00:28:05,509
PROFESSOR: Ther's that, right?
教授：就是这样吗？ 

640
00:28:05,509 --> 00:28:06,359
There's a transform.
有一个转变。 

641
00:28:06,359 --> 00:28:08,429
You need to transform your graph in some way,
您需要以某种方式变换图形， 

642
00:28:08,430 --> 00:28:10,039
then run the algorithm.
然后运行算法。 

643
00:28:10,039 --> 00:28:14,109
And then reading off the outputs should be easy.
然后读取输出应该很容易。 

644
00:28:14,109 --> 00:28:16,381
I claim that the hard step is the transform step, not
我声称困难的步骤是转换步骤，而不是

645
00:28:16,382 --> 00:28:17,197
the read off step.
读取步骤。 

646
00:28:17,397 --> 00:28:24,981



647
00:28:24,981 --> 00:28:26,815
Let me give you one more piece of intuition.
让我再给你一个直觉。 

648
00:28:26,815 --> 00:28:30,659



649
00:28:30,859 --> 00:28:34,129
We're going to keep track of states, somehow.
我们将以某种方式跟踪状态。 

650
00:28:34,130 --> 00:28:35,919
Remember Rubik's cube?
还记得魔方的魔方吗？ 

651
00:28:36,119 --> 00:28:38,979
We had one vertex for each state.
每个状态都有一个顶点。 

652
00:28:38,980 --> 00:28:43,279
A state representing the configuration of the cube.
表示多维数据集配置的状态。 

653
00:28:43,279 --> 00:28:48,359
Here, suppose I'm looking at the path from S
在这里，假设我正在寻找从S出发的路径

654
00:28:48,359 --> 00:28:51,529
to D. The problem that I have with this
给D。我有这个问题

655
00:28:51,529 --> 00:28:55,480
is that, if I have an algorithm that tells me the shortest
是的，如果我有一个算法可以告诉我最短的算法

656
00:28:55,480 --> 00:28:59,980
path from S to D is something, I don't know if it's even
从S到D的路径是东西，我什至不知道

657
00:28:59,980 --> 00:29:00,819
or if it's odd.
还是很奇怪

658
00:29:00,819 --> 00:29:02,990
It's not keeping track of that.
它没有跟踪。 

659
00:29:02,990 --> 00:29:04,089
It's missing some state.
它缺少某些状态。 

660
00:29:04,089 --> 00:29:06,449
The state that it's missing is whether the path
缺少的状态是路径是否

661
00:29:06,450 --> 00:29:09,470
that I used to get here is even or odd length.
我以前来这里的长度是偶数还是奇数。 

662
00:29:09,470 --> 00:29:10,990
I should do something to the graph
我应该对图做点事

663
00:29:10,990 --> 00:29:12,395
to keep track of this state.
跟踪此状态。 

664
00:29:12,395 --> 00:29:16,589



665
00:29:16,589 --> 00:29:17,990
AUDIENCE: Can you BFS it once?
听众：可以一次BFS吗？ 

666
00:29:17,990 --> 00:29:23,743
To plan-- You BFS once.
计划-您一次BFS。 

667
00:29:23,743 --> 00:29:27,076
Then you that B and C are all like 108,
那么你B和C都像108 

668
00:29:27,076 --> 00:29:28,980
and then you know that E and D are 208?
然后你知道E和D是208？ 

669
00:29:28,980 --> 00:29:32,210



670
00:29:32,210 --> 00:29:36,650
PROFESSOR: B 208 if I take this path.
教授：如果我走这条路，请到B 208。 

671
00:29:36,650 --> 00:29:41,509
It might be 108, might be 208.
可能是108，可能是208。 

672
00:29:41,509 --> 00:29:42,259
But, this is good.
但是，这很好。 

673
00:29:42,259 --> 00:29:43,925
This is what you'll do on a quiz, right?
这就是您要进行的测验，对吧？ 

674
00:29:43,925 --> 00:29:46,679
You come up with an idea and then
你想出一个主意，然后

675
00:29:46,680 --> 00:29:48,470
you're going to think about it for a bit.
您将考虑一下。 

676
00:29:48,470 --> 00:29:51,000
If you get stuck, try to convince yourself
如果遇到困难，请尝试说服自己

677
00:29:51,000 --> 00:29:52,255
that it's wrong.
这是错误的。 

678
00:29:52,255 --> 00:29:56,480
If things get too hard, discard and look somewhere else.
如果事情变得太难了，则丢弃并找其他地方。 

679
00:29:56,480 --> 00:29:57,779
This is thought process, right?
这是思考过程，对吗？ 

680
00:29:57,779 --> 00:30:00,196
You think of something, backtrack, backtrack,
您想到的是回溯，回溯， 

681
00:30:00,196 --> 00:30:02,529
backtrack, and eventually you get to the right solution.
回溯，最终找到正确的解决方案。 

682
00:30:02,529 --> 00:30:13,824



683
00:30:13,824 --> 00:30:15,490
Let's go over the solution for this one,
让我们来看一下这个解决方案， 

684
00:30:15,490 --> 00:30:19,669
and then I'll give you a hard one that is sort of like this.
然后我会给你一个像这样的硬汉。 

685
00:30:19,869 --> 00:30:22,969
Then I'll want the solution from you for that one.
然后，我希望从您那里获得解决方案。 

686
00:30:22,970 --> 00:30:25,140
I'm going to draw this graph in a bigger version,
我将以更大的版本绘制此图， 

687
00:30:25,140 --> 00:30:26,660
so I'll have to erase this.
所以我必须删除它。 

688
00:30:26,660 --> 00:30:29,390



689
00:30:29,390 --> 00:30:32,650
So this is a cool concept.
因此，这是一个很酷的概念。 

690
00:30:32,650 --> 00:30:36,365
You will be able to do a lot of things with it.
您将可以用它做很多事情。 

691
00:30:36,365 --> 00:30:38,301
AUDIENCE: Is this one solvable by Dijkstra?
听众：Dijkstra可以解决这个问题吗？ 

692
00:30:38,301 --> 00:30:39,753
PROFESSOR: Ya.
教授：是的。 

693
00:30:39,753 --> 00:30:40,712
AUDIENCE: Just curious.
听众：很好奇。 

694
00:30:40,712 --> 00:30:42,420
PROFESSOR: Yeah, we'll run Dijkstra on it
教授：是的，我们将在其上运行Dijkstra 

695
00:30:42,420 --> 00:30:43,353
after we transform it.
改造之后

696
00:30:43,353 --> 00:30:51,369



697
00:30:51,569 --> 00:30:52,769
These are big nodes!
这些是大节点！ 

698
00:30:52,769 --> 00:30:53,900
Why am I doing it this way?
我为什么要这样呢？ 

699
00:30:53,900 --> 00:30:57,379
AUDIENCE: (LAUGHS) Is that like, Seattle, Portland, San
观众：（笑声）就像西雅图，波特兰，圣

700
00:30:57,579 --> 00:30:58,929
Francisco?
弗朗西斯科？ 

701
00:30:58,930 --> 00:31:02,000
PROFESSOR: It's because I'm going to need room for copies.
教授：这是因为我需要复印的空间。 

702
00:31:02,000 --> 00:31:05,750
I'm going to make a copy of each node to keep track of state.
我将制作每个节点的副本以跟踪状态。 

703
00:31:05,750 --> 00:31:06,594
AUDIENCE: Gosh.
听众：天哪。 

704
00:31:06,594 --> 00:31:08,009
PROFESSOR: So, instead of one node
教授：所以，而不是一个节点

705
00:31:08,009 --> 00:31:10,849
I'll have two nodes for each node.
每个节点有两个节点。 

706
00:31:10,849 --> 00:31:12,579
And I have two nodes because this
我有两个节点，因为

707
00:31:12,579 --> 00:31:15,699
is what lets me keep track of state, odd path or even path.
是什么让我跟踪状态，奇数路径甚至偶数路径。 

708
00:31:15,700 --> 00:31:19,000



709
00:31:19,000 --> 00:31:21,150
Let me erase the edges because that's not
让我抹掉边缘，因为那不是

710
00:31:21,150 --> 00:31:22,525
how it's going to work, actually.
实际上如何运作。 

711
00:31:22,525 --> 00:31:27,210



712
00:31:27,210 --> 00:31:32,900
Instead of having a node A, I'm going to have a node A even.
除了拥有节点A，我还要拥有一个节点A。 

713
00:31:32,900 --> 00:31:38,816
And I'm going to have a copy, A odd.
我要去复印，奇怪。 

714
00:31:38,816 --> 00:31:44,995
E even, I'm going to have to copy, V odd.
 E偶，我将不得不复制，V奇。 

715
00:31:45,195 --> 00:31:50,480
C even, copies to C odd.
 C偶数，复制到C奇数。 

716
00:31:50,480 --> 00:31:57,299
D even, make a copy to D odd.
 D偶数，将副本复制到D奇数。 

717
00:31:57,299 --> 00:31:59,119
Wait, this is E, sorry.
等等，这是E，对不起。 

718
00:31:59,119 --> 00:32:01,807
Sorry, my bad.
对不起这是我的错。 

719
00:32:01,807 --> 00:32:09,109
[QUIET TALKING]
 [安静交谈] 

720
00:32:09,109 --> 00:32:15,389
Suppose I got to A using an even length path.
假设我使用平均长度路径到达A。 

721
00:32:15,390 --> 00:32:18,900
If I take the edge from A to B, I
如果我从A到B占据优势，我

722
00:32:18,900 --> 00:32:21,670
will get to B using an even length path, or an odd length
将使用偶数长度或奇数长度的路径到达B 

723
00:32:21,670 --> 00:32:22,991
path?
路径？ 

724
00:32:22,991 --> 00:32:24,450
AUDIENCE: Odd.
听众：奇怪。 

725
00:32:24,450 --> 00:32:26,950
PROFESSOR: So, if I get to A using an even length path, then
教授：所以，如果我使用平均长度的路径到达A， 

726
00:32:26,950 --> 00:32:30,909
from there I'll get to B using an odd length path.
从那里，我将使用奇长路径到达B。 

727
00:32:31,109 --> 00:32:31,889
Sorry, four.
对不起，四个。 

728
00:32:31,890 --> 00:32:35,003
Using this exact road.
使用这条确切的路。 

729
00:32:35,203 --> 00:32:37,413
AUDIENCE: A really messed-up graph.
听众：一个非常混乱的图表。 

730
00:32:37,413 --> 00:32:39,079
PROFESSOR: That's a nice way to name it.
教授：这是一个好名字。 

731
00:32:39,079 --> 00:32:40,409
[WOMAN LAUGHING]
 [女子笑声] 

732
00:32:40,410 --> 00:32:42,509
I've heard worse.
我听得更糟。 

733
00:32:42,509 --> 00:32:46,240
If I get to A using an odd number of edges,
如果我用奇数个边到A， 

734
00:32:46,240 --> 00:32:49,170
how many edges will I have and I get to B?
我将拥有多少条边，然后到达B？ 

735
00:32:49,170 --> 00:32:50,160
AUDIENCE: [INAUDIBLE].
听众：[听不清]。 

736
00:32:50,160 --> 00:32:53,160



737
00:32:53,160 --> 00:32:55,919
PROFESSOR: So this edge became these edges here.
教授：所以这条边变成了这些边。 

738
00:32:56,119 --> 00:32:58,669



739
00:32:58,670 --> 00:33:01,240
Now let's do the edge between B and E.
现在让我们来做B和E之间的优势。 

740
00:33:01,240 --> 00:33:04,730
I get to be using an even number of edges.
我开始使用偶数个边缘。 

741
00:33:04,730 --> 00:33:08,681
I take B. Do I get to the even or to the odd?
我选B。我会达到偶数还是奇数？ 

742
00:33:08,681 --> 00:33:09,063
AUDIENCE: Odd.
听众：奇怪。 

743
00:33:09,263 --> 00:33:12,009



744
00:33:12,009 --> 00:33:14,029
PROFESSOR: I get to B using an odd path.
教授：我是通过一条奇怪的路到达B的。 

745
00:33:14,029 --> 00:33:17,190



746
00:33:17,190 --> 00:33:20,364
What are the lengths of these paths?
这些路径的长度是多少？ 

747
00:33:20,364 --> 00:33:20,864
AUDIENCE: 5.
听众：5。 

748
00:33:20,864 --> 00:33:23,324



749
00:33:23,324 --> 00:33:23,990
PROFESSOR: Cool.
教授：太好了。 

750
00:33:23,990 --> 00:33:26,669



751
00:33:26,869 --> 00:33:28,939
God, this is starting to look ugly, you're right.
天哪，这看起来很难看，你是对的。 

752
00:33:28,940 --> 00:33:30,190
[LAUGHTER]
 [笑声] 

753
00:33:30,190 --> 00:33:33,369
Let's do A, C and stop there.
让我们做A，C，然后停在那里。 

754
00:33:33,569 --> 00:33:35,179
A even is connected to?
一个偶数连接到？ 

755
00:33:35,180 --> 00:33:36,669
AUDIENCE: Odd.
听众：奇怪。 

756
00:33:36,869 --> 00:33:40,889
PROFESSOR: C odd, by a path the length.
教授：C奇数，按路径的长度。 

757
00:33:40,890 --> 00:33:43,349
And A odd is connected to C even by a path of length.
奇数通过一条长度路径连接到C。 

758
00:33:43,549 --> 00:33:47,388



759
00:33:47,388 --> 00:33:48,679
Is this starting to make sense?
这开始有意义吗？ 

760
00:33:48,680 --> 00:33:53,919



761
00:33:54,119 --> 00:33:57,865
So all the edges are going to look like this.
因此，所有边缘都将看起来像这样。 

762
00:33:57,865 --> 00:34:02,089
AUDIENCE: So are those like two independent graphs?
听众：那么那些像两个独立的图吗？ 

763
00:34:02,089 --> 00:34:04,119
PROFESSOR: Well, I have edges connecting them.
教授：好吧，我在连接它们时有优势。 

764
00:34:04,119 --> 00:34:06,079
But, I like your question.
但是，我喜欢你的问题。 

765
00:34:06,079 --> 00:34:08,730
The reason this is ugly is because I'm
这个丑陋的原因是因为我

766
00:34:08,730 --> 00:34:12,320
looking at a 2D projection of a 3D graph.
看着3D图形的2D投影。 

767
00:34:12,320 --> 00:34:15,039
If I had a holographic display, which would be a lot nicer,
如果我有全息显示器，那就更好了， 

768
00:34:15,039 --> 00:34:17,065
then I would do something along these lines.
然后我会按照这些方针做点事。 

769
00:34:17,065 --> 00:34:21,750



770
00:34:21,750 --> 00:34:22,699
Two pieces of paper.
两张纸。 

771
00:34:22,699 --> 00:34:25,260



772
00:34:25,260 --> 00:34:27,900
I would draw the original graph, and call it the even graph.
我会绘制原始图形，并将其称为偶数图形。 

773
00:34:28,099 --> 00:34:29,710
Put it here.
放在这里。 

774
00:34:29,710 --> 00:34:32,409
I would draw the graph again, call it the odd graph,
我会再次绘制该图，称为奇数图， 

775
00:34:32,409 --> 00:34:34,679
and put it here.
放在这里

776
00:34:34,679 --> 00:34:36,050
So this is my 2D graph.
这是我的2D图形。 

777
00:34:36,050 --> 00:34:38,400
This is my map, the original map.
这是我的地图，原始地图。 

778
00:34:38,400 --> 00:34:39,329
And this is state.
这是状态。 

779
00:34:39,329 --> 00:34:40,663
The third dimension is state.
第三维是状态。 

780
00:34:40,663 --> 00:34:43,889



781
00:34:43,889 --> 00:34:46,909
When I'm at a node, and I used an even number of edges
当我在节点上时，我使用了偶数个边

782
00:34:46,909 --> 00:34:51,829
to get here, I'm going to go take one edge
到这里，我要走一个优势

783
00:34:51,829 --> 00:34:55,489
and go to another node using an odd number of edges.
然后使用奇数个边缘转到另一个节点。 

784
00:34:55,489 --> 00:34:57,389
So all the edges are going to go from here
所以所有的边缘都会从这里消失

785
00:34:57,389 --> 00:34:58,839
to here, and from here to here.
到这里，从这里到这里。 

786
00:34:58,840 --> 00:35:02,050



787
00:35:02,050 --> 00:35:04,130
Does it makes more sense now?
现在更有意义了吗？ 

788
00:35:04,130 --> 00:35:06,550
So the reason that looks ugly is because you're
所以看起来丑陋的原因是因为你

789
00:35:06,550 --> 00:35:08,380
seeing the graph like this.
看到这样的图。 

790
00:35:08,579 --> 00:35:11,239
If you could see like this, and maybe play with it
如果您可以看到这样的画面，也许可以玩

791
00:35:11,239 --> 00:35:13,528
a little bit, it would make more sense.
一点，这将更有意义。 

792
00:35:13,528 --> 00:35:14,570
It wouldn't look as ugly.
看起来并不难看。 

793
00:35:14,570 --> 00:35:18,150



794
00:35:18,150 --> 00:35:20,650
There are two graphs, the even graph and the odd graph.
有两个图，偶数图和奇数图。 

795
00:35:20,650 --> 00:35:26,289
And the edges between them represent you doing something.
它们之间的边缘代表您正在做某事。 

796
00:35:26,289 --> 00:35:29,550
When you take the highway, you transition from an even state
上高速公路时，您会从平坦状态过渡

797
00:35:29,550 --> 00:35:31,980
to an odd state, and from an odd state to an even state.
从奇数状态到偶数状态。 

798
00:35:32,179 --> 00:35:35,839
So that's why the edges are the way they are.
这就是为什么边缘是它们的样子。 

799
00:35:35,840 --> 00:35:37,519
Now let me see if you guys get it.
现在让我看看你们是否明白。 

800
00:35:37,719 --> 00:35:39,250
What node do I start from?
我从哪个节点开始？ 

801
00:35:39,250 --> 00:35:41,788
What node do I want to end up in?
我想在哪个节点结束？ 

802
00:35:41,788 --> 00:35:45,079
AUDIENCE: A, and you're ending up at B?
听众：A，而您最终将到达B？ 

803
00:35:45,079 --> 00:35:45,579
[INAUDIBLE]
 [听不清] 

804
00:35:45,579 --> 00:35:49,860



805
00:35:49,860 --> 00:35:51,630
PROFESSOR: OK.
教授：好的。 

806
00:35:51,630 --> 00:35:54,326
AUDIENCE: Oh, there's two--
听众：哦，有两个

807
00:35:54,525 --> 00:35:55,899
PROFESSOR: I heard three answers.
教授：我听到了三个答案。 

808
00:35:55,900 --> 00:35:57,500
One of them is correct.
其中之一是正确的。 

809
00:35:57,699 --> 00:36:00,939
Do you want to vote or do you guys want to figure it out?
您要投票还是要弄清楚？ 

810
00:36:00,940 --> 00:36:02,025
Talk it out?
说出来吗

811
00:36:02,025 --> 00:36:03,099
Fight?
斗争？ 

812
00:36:03,099 --> 00:36:04,829
AUDIENCE: A even, E odd.
听众：偶数，奇数。 

813
00:36:04,829 --> 00:36:07,489



814
00:36:07,489 --> 00:36:10,859
PROFESSOR: We start from A even and we end up at E odd.
教授：我们从A偶数开始，到E奇数结束。 

815
00:36:10,860 --> 00:36:14,224
Why do I started at A even?
为什么我甚至从A开始？ 

816
00:36:14,224 --> 00:36:15,690
AUDIENCE: We've seen exactly zero cities
观众：我们已经看到了零个城市

817
00:36:15,889 --> 00:36:16,369
when we started out.
当我们开始的时候。 

818
00:36:16,369 --> 00:36:17,868
PROFESSOR: Yep, so the original path
教授：是的，所以原来的路径

819
00:36:17,869 --> 00:36:20,289
has length the 0, which happens to be even.
长度为0，恰好是偶数。 

820
00:36:20,489 --> 00:36:24,399
And we want to end up with an odd length path.
我们希望最终得到一条奇数长度的路径。 

821
00:36:24,400 --> 00:36:26,360
So if we go from here to here-- see how
所以，如果我们从这里到这里-看看如何

822
00:36:26,360 --> 00:36:29,800
because we have two nodes out of each original node,
因为我们在每个原始节点中都有两个节点， 

823
00:36:29,800 --> 00:36:32,385
the path is going to alternate between even and odd.
路径将在偶数和奇数之间交替。 

824
00:36:32,385 --> 00:36:34,009
And is going to keep track of the state
并将跟踪状态

825
00:36:34,010 --> 00:36:35,393
that they didn't have before, and it's
他们以前没有的

826
00:36:35,592 --> 00:36:38,539
going to just do the right thing.
去做正确的事。 

827
00:36:38,539 --> 00:36:39,239
It's magic!
这是魔法！ 

828
00:36:39,239 --> 00:36:41,463
It works!
有用！ 

829
00:36:41,463 --> 00:36:43,505
Let's see what is the running this new algorithm.
让我们看看运行这种新算法的情况。 

830
00:36:43,505 --> 00:36:46,559



831
00:36:46,559 --> 00:36:48,570
Say my original graph had V and E.
假设我的原始图形有V和E。 

832
00:36:48,570 --> 00:36:52,016
How many new vertices do I have?
我有几个新顶点？ 

833
00:36:52,016 --> 00:36:53,909
AUDIENCE: Two kinds.
听众：两种。 

834
00:36:53,909 --> 00:36:56,105
PROFESSOR: How many edges?
教授：几条边？ 

835
00:36:56,106 --> 00:36:56,572
AUDIENCE: Twice?
听众：两次？ 

836
00:36:56,771 --> 00:37:01,079



837
00:37:01,079 --> 00:37:03,079
PROFESSOR: Each edge is copied exactly twice.
教授：每个边精确地复制了两次。 

838
00:37:03,079 --> 00:37:04,579
Which algorithm am I going to use?
我要使用哪种算法？ 

839
00:37:04,579 --> 00:37:06,918
All my weights are positive because they're
我所有的重量都是正的，因为它们

840
00:37:06,918 --> 00:37:08,460
the time it takes to drive somewhere,
开车去某个地方的时间

841
00:37:08,460 --> 00:37:09,840
the distance or something.
距离之类的。 

842
00:37:09,840 --> 00:37:12,659
So which algorithm do I use?
那么我该使用哪种算法？ 

843
00:37:12,659 --> 00:37:13,750
AUDIENCE: Breadth-first search?
听众：广度优先搜索？ 

844
00:37:13,949 --> 00:37:19,366



845
00:37:19,367 --> 00:37:21,000
PROFESSOR: We can't use breadth-first search
教授：我们无法使用广度优先搜索

846
00:37:21,199 --> 00:37:23,586
because you have weight.
因为你有体重。 

847
00:37:23,586 --> 00:37:26,170
So breadth-first search is not going to find the right answer.
因此，广度优先搜索不会找到正确的答案。 

848
00:37:26,170 --> 00:37:27,019
AUDIENCE: [INAUDIBLE].
听众：[听不清]。 

849
00:37:27,219 --> 00:37:28,969
PROFESSOR: Oh, you want to use this thing.
教授：哦，你想用这个东西。 

850
00:37:28,969 --> 00:37:29,509
AUDIENCE: Yes.
听众：是的。 

851
00:37:29,510 --> 00:37:30,250
PROFESSOR: Well, so we don't have
教授：好吧，所以我们没有

852
00:37:30,250 --> 00:37:32,780
to worry about that because now we put the shortest path
担心这一点，因为现在我们走了最短的道路

853
00:37:32,780 --> 00:37:34,798
algorithm in the black box and we have them.
黑盒中的算法，我们有它们。 

854
00:37:34,998 --> 00:37:36,539
AUDIENCE: Oh, so we can use them now.
听众：哦，所以我们现在就可以使用它们。 

855
00:37:36,539 --> 00:37:38,070
PROFESSOR: We use these black boxes.
教授：我们使用这些黑匣子。 

856
00:37:38,070 --> 00:37:40,360
But what we need to know is when to use this black box
但是我们需要知道的是何时使用这个黑匣子

857
00:37:40,360 --> 00:37:42,000
and when is this black box.
这个黑匣子是什么时候

858
00:37:42,000 --> 00:37:45,420
Which boxes faster, by the way?
顺便说一下，哪个盒子更快？ 

859
00:37:45,420 --> 00:37:47,903
Please, please give me the right answer.
请，请给我正确的答案。 

860
00:37:47,903 --> 00:37:48,795
AUDIENCE: Dijkstra?
听众：Dijkstra？ 

861
00:37:48,795 --> 00:37:49,670
PROFESSOR: All right!
教授：好的！ 

862
00:37:49,670 --> 00:37:50,539
Dijkstra is faster.
 Dijkstra更快。 

863
00:37:50,539 --> 00:37:51,079
[LAUGHTER]
 [笑声] 

864
00:37:51,079 --> 00:37:54,000
So whenever we can use Dijkstra we will use Dijkstra.
因此，只要我们可以使用Dijkstra，就将使用Dijkstra。 

865
00:37:54,000 --> 00:37:55,650
When can't we use Dijkstra?
我们什么时候不能使用Dijkstra？ 

866
00:37:55,650 --> 00:37:57,399
AUDIENCE: When it's negative, [INAUDIBLE].
听众：否定时，[听不清]。 

867
00:37:57,400 --> 00:38:00,250



868
00:38:00,250 --> 00:38:01,440
PROFESSOR: Negative--
教授：负面

869
00:38:01,440 --> 00:38:02,190
AUDIENCE: Weights.
听众：重量。 

870
00:38:02,190 --> 00:38:05,280
PROFESSOR: Negative weights.
教授：负权数。 

871
00:38:05,280 --> 00:38:08,900
If I have weights greater or equal to 0,
如果我的权重大于或等于0， 

872
00:38:09,099 --> 00:38:10,630
I'm happy I can use Dijkstra.
我很高兴可以使用Dijkstra。 

873
00:38:10,630 --> 00:38:15,030
If I have weights that are smaller than 0, well, whatever.
如果我的权重小于0，那么无论如何。 

874
00:38:15,030 --> 00:38:17,260
It's going to be slower, but I can still solve it.
速度会变慢，但我仍然可以解决。 

875
00:38:17,260 --> 00:38:19,280
AUDIENCE: It's like arbitrary negative weights.
听众：这就像任意负重。 

876
00:38:19,280 --> 00:38:21,070
PROFESSOR: Yep.
教授：是的。 

877
00:38:21,070 --> 00:38:22,067
Arbitrary negative weights.
任意负权重。 

878
00:38:22,266 --> 00:38:25,250



879
00:38:25,250 --> 00:38:30,213
So all the edges here are positive, so I'm going to use--
所以这里的所有边缘都是积极的，所以我将使用- 

880
00:38:30,213 --> 00:38:31,105
AUDIENCE: Dijkstra.
听众：Dijkstra。 

881
00:38:31,105 --> 00:38:31,480
PROFESSOR: Dijkstra!
教授：Dijkstra！ 

882
00:38:31,480 --> 00:38:32,150
Very good.
很好。 

883
00:38:32,150 --> 00:38:37,625
So the running time will be, order of--
因此，运行时间约为- 

884
00:38:37,625 --> 00:38:39,315
AUDIENCE: V log V?
听众：V log V？ 

885
00:38:39,315 --> 00:38:43,190
PROFESSOR: V log V plus E. If you're a theory person,
教授：V log V加E。如果您是理论人士， 

886
00:38:43,190 --> 00:38:47,869
if you're in real life it's E log V.
如果您在现实生活中，则为E logV。 

887
00:38:47,869 --> 00:38:52,069
This is exactly the running time for the original graph.
这正是原始图形的运行时间。 

888
00:38:52,070 --> 00:38:54,710
The transformation only increased the graph size
转换只会增加图形大小

889
00:38:54,710 --> 00:38:55,849
by a constant factor.
不变的因素。 

890
00:38:55,849 --> 00:38:57,618
So, same running time.
因此，相同的运行时间。 

891
00:38:57,619 --> 00:38:58,210
Pretty good, right?
还不错吧？ 

892
00:38:58,409 --> 00:39:01,649



893
00:39:01,650 --> 00:39:02,900
OK, let's do one more problem.
好，让我们再做一个问题。 

894
00:39:02,900 --> 00:39:04,148
Let's do the hard problem now.
让我们现在解决这个难题。 

895
00:39:04,148 --> 00:39:11,109



896
00:39:11,110 --> 00:39:13,110
Are you guys getting ready for the hard problem?
你们准备好迎接这个难题了吗？ 

897
00:39:13,110 --> 00:39:20,277



898
00:39:20,476 --> 00:39:22,184
AUDIENCE: If we hadn't seen this probably
听众：如果我们可能没有看到这个

899
00:39:22,184 --> 00:39:23,351
wouldn't have thought of it.
不会想到的。 

900
00:39:23,351 --> 00:39:25,190
I wouldn't even think about this.
我什至不会考虑这一点。 

901
00:39:25,389 --> 00:39:28,489
PROFESSOR: Well, that's why we taught you this.
教授：好的，这就是我们教你这个原因的原因。 

902
00:39:28,489 --> 00:39:29,769
So I wanted to do two things.
所以我想做两件事。 

903
00:39:29,769 --> 00:39:32,061
I wanted to show you that trick, which is a cool trick,
我想向您展示这个技巧，这很酷， 

904
00:39:32,061 --> 00:39:35,539
keep track of state by multiplying
通过相乘来跟踪状态

905
00:39:35,739 --> 00:39:37,659
the vertices that you have.
您拥有的顶点。 

906
00:39:37,659 --> 00:39:39,619
And I wanted to go through some wrong solutions
我想通过一些错误的解决方案

907
00:39:39,619 --> 00:39:41,244
and figure out why they're wrong so you
弄清楚为什么他们错了，所以你

908
00:39:41,244 --> 00:39:42,851
can develop an intuition.
可以发展直觉。 

909
00:39:42,851 --> 00:39:44,849
Because, when you're going to get a new problem,
因为，当您遇到新问题时， 

910
00:39:44,849 --> 00:39:46,789
you're going to think of something.
你会想一些事情。 

911
00:39:46,789 --> 00:39:48,820
Unless you're really good, unless you
除非你真的很好，除非你

912
00:39:48,820 --> 00:39:51,309
are destined to win a Turing Award of some sort,
注定要获得图灵奖， 

913
00:39:51,309 --> 00:39:53,833
the first solution will probably be wrong.
第一个解决方案可能是错误的。 

914
00:39:53,833 --> 00:39:55,750
Even if you're destined to win a Turing Award,
即使您注定要获得图灵奖， 

915
00:39:55,750 --> 00:39:57,670
the first thing that comes to mind will probably be wrong.
首先想到的可能是错误的。 

916
00:39:57,670 --> 00:40:00,135
I'm willing to bet Dijkstra didn't think of Dijkstra
我愿意打赌Dijkstra没想到Dijkstra 

917
00:40:00,135 --> 00:40:05,010
off the top of his head when he heard about the problem.
听说这个问题时，他的头顶掉了。 

918
00:40:05,010 --> 00:40:07,630
What you want to do is get an intuition.
您想要做的就是获得直觉。 

919
00:40:07,630 --> 00:40:10,619
So you think of a solution and it starts getting complicated,
所以您想到一个解决方案，它开始变得复杂， 

920
00:40:10,619 --> 00:40:12,679
or things start looking wrong, you
或事情开始看起来不对，你

921
00:40:12,679 --> 00:40:15,121
want to back out and think of something else.
想退出并想其他事情。 

922
00:40:15,121 --> 00:40:17,579
The more things we can consider, higher chances that you're
我们可以考虑的事情越多，您获得的机会就越高

923
00:40:17,579 --> 00:40:19,429
going to stumble upon the correct solution.
会偶然发现正确的解决方案。 

924
00:40:19,429 --> 00:40:22,069
So that's why we are building an intuition for bad solutions.
因此，这就是我们为不良解决方案建立直觉的原因。 

925
00:40:22,070 --> 00:40:23,800
[LAUGHTER]
 [笑声] 

926
00:40:23,800 --> 00:40:25,500
I'm not just saying, hey, give me a solution
我不只是说，嘿，给我一个解决方案

927
00:40:25,699 --> 00:40:26,659
and now I'll tell you it's wrong.
现在我告诉你这是错误的。 

928
00:40:26,659 --> 00:40:28,710
It's not just to embarrass you or something.
这不只是让您感到尴尬。 

929
00:40:28,710 --> 00:40:30,251
There's that intuition building step.
有直觉的建立步骤。 

930
00:40:30,251 --> 00:40:32,769
That's really important.
那真的很重要。 

931
00:40:32,769 --> 00:40:36,224
There's this network that we keep talking about.
我们一直在谈论这个网络。 

932
00:40:36,224 --> 00:40:37,940
There's this highway network, except this time
除了这次有公路网

933
00:40:38,139 --> 00:40:39,306
it's a bit more complicated.
这有点复杂。 

934
00:40:39,306 --> 00:40:42,480



935
00:40:42,480 --> 00:40:46,949
So for each edge I have two things.
所以对于每个边缘我都有两件事。 

936
00:40:46,949 --> 00:40:50,079
I have a fuel cost, which is constant.
我的油费是固定的。 

937
00:40:50,079 --> 00:40:54,130
A fuel cost is a function of the length of the road.
燃油成本是道路长度的函数。 

938
00:40:54,130 --> 00:40:58,039
But now, I have these realistic highways where I have traffic.
但是现在，我在这些现实的高速公路上有交通。 

939
00:40:58,239 --> 00:41:01,699
If you try to go from Boston to New York, 2 AM?
如果您尝试从波士顿凌晨2点去纽约？ 

940
00:41:01,699 --> 00:41:03,139
Three hours.
三个小时。 

941
00:41:03,139 --> 00:41:03,849
Rush hour?
高峰时间？ 

942
00:41:03,849 --> 00:41:05,099
Six hours.
六个小时。 

943
00:41:05,099 --> 00:41:07,909
So we have to keep track of this in some way.
因此，我们必须以某种方式对此进行跟踪。 

944
00:41:07,909 --> 00:41:10,909
Well we're going to split up the day into minutes.
好吧，我们将把时间分成几分钟。 

945
00:41:10,909 --> 00:41:12,750
Say you have 10 minutes in a day.
假设您每天有10分钟。 

946
00:41:12,750 --> 00:41:15,340
Can anyone tell me what M is, really quickly?
谁能很快告诉我M是什么？ 

947
00:41:15,340 --> 00:41:18,809
Not a number, a formula, something.
不是数字，公式或其他东西。 

948
00:41:18,809 --> 00:41:23,625
AUDIENCE: What's 3,600 times 24?
观众：3,600乘24是多少？ 

949
00:41:23,625 --> 00:41:27,090
And that's seconds.
那是几秒钟。 

950
00:41:27,090 --> 00:41:28,579
PROFESSOR: All right.
教授：好的。 

951
00:41:28,579 --> 00:41:30,525
So this is how many minutes in a day.
因此，这是一天中的分钟数。 

952
00:41:30,525 --> 00:41:36,329



953
00:41:36,329 --> 00:41:39,719
This is how many minutes we have in a day, right?
这是我们一天有几分钟的时间，对吗？ 

954
00:41:39,719 --> 00:41:42,609
For each edge, we're going to have a function that's
对于每个边缘，我们将具有一个

955
00:41:42,610 --> 00:41:44,905
the time cost of the edge.
边缘的时间成本。 

956
00:41:44,905 --> 00:41:48,799
So it's the time cost of this edge, and it's going to say,
所以这是此优势的时间成本，并且会说， 

957
00:41:48,800 --> 00:41:50,820
if I start at a certain time, it's
如果我在某个时间开始，那就是

958
00:41:50,820 --> 00:41:54,510
going to take this many minutes to go across the edge.
要花这么多分钟才能穿越边缘。 

959
00:41:54,510 --> 00:41:57,800
For each highway I know how much time
我知道每条高速公路要花费多少时间

960
00:41:57,800 --> 00:42:01,610
it's going to take to go across it, given when I start.
当我开始的时候，将会经历它。 

961
00:42:01,610 --> 00:42:04,789
And I know much fuel I'm going to consume.
而且我知道我要消耗很多燃料。 

962
00:42:04,989 --> 00:42:06,719
By the way, edges are directed now, just
顺便说一句，现在就将边缘指向

963
00:42:06,719 --> 00:42:08,659
to make our life easy.
使我们的生活变得轻松。 

964
00:42:08,659 --> 00:42:13,500
This graph is going to be like this.
该图将是这样的。 

965
00:42:13,500 --> 00:42:15,463
Let's see if I can get this right.
让我们看看我能不能正确解决这个问题。 

966
00:42:15,463 --> 00:42:16,380
AUDIENCE: [INAUDIBLE].
听众：[听不清]。 

967
00:42:16,380 --> 00:42:19,494



968
00:42:19,494 --> 00:42:20,869
PROFESSOR: So the real reason I'm
教授：所以我真正的原因是

969
00:42:20,869 --> 00:42:26,529
having this is the time to go across the highway
这是时候过高速公路了

970
00:42:26,530 --> 00:42:29,090
might be different, depending which way you go.
可能会有所不同，具体取决于您走的路。 

971
00:42:29,090 --> 00:42:29,670
AUDIENCE:Oh--
观众：哦- 

972
00:42:29,670 --> 00:42:31,320
PROFESSOR: Getting into Boston in the morning
教授：早上去波士顿

973
00:42:31,320 --> 00:42:33,039
versus getting into Boston in the evening.
而不是晚上去波士顿。 

974
00:42:33,239 --> 00:42:34,549
Which one's easier?
哪个更容易？ 

975
00:42:34,550 --> 00:42:37,192
Sorry, versus getting out of Boston in the morning.
对不起，早上要离开波士顿。 

976
00:42:37,391 --> 00:42:39,099
Intuitively, I'd say it's probably harder
凭直觉，我会说这可能更难

977
00:42:39,099 --> 00:42:41,769
to get in in the morning because people are going to work.
早上起床，因为人们要去上班。 

978
00:42:41,769 --> 00:42:42,960
And it's easier to get out.
而且更容易下车。 

979
00:42:42,960 --> 00:42:44,539
But ya, I don't know either.
但是，我也不知道。 

980
00:42:44,539 --> 00:42:46,916
AUDIENCE: The 95 one's a hurdle.
听众：95人是一个障碍。 

981
00:42:46,916 --> 00:42:47,519
[LAUGHTER]
 [笑声] 

982
00:42:47,719 --> 00:42:48,885
PROFESSOR:We have an answer.
教授：我们有一个答案。 

983
00:42:48,885 --> 00:42:51,469
[LAUGHTER]
 [笑声] 

984
00:42:51,469 --> 00:42:53,159
Our edges are going to be oriented.
我们的优势将定位。 

985
00:42:53,159 --> 00:42:56,989



986
00:42:56,989 --> 00:43:00,254
I want to find an itinerary that satisfies two constraints.
我想找到一个满足两个约束的行程。 

987
00:43:00,255 --> 00:43:03,530
AUDIENCE: [INAUDIBLE].
听众：[听不清]。 

988
00:43:03,530 --> 00:43:05,610
PROFESSOR: Ya, that's not good, right?
教授：是的，那不好，对吗？ 

989
00:43:05,809 --> 00:43:07,442
New York and New York.
纽约和纽约。 

990
00:43:07,442 --> 00:43:10,181
[WOMAN LAUGHING]
 [女子笑声] 

991
00:43:10,181 --> 00:43:12,429
So I want to see how fast I can get to my destination.
所以我想看看我能多快到达目的地。 

992
00:43:12,429 --> 00:43:14,739
That's my top priority.
这是我的首要任务。 

993
00:43:14,739 --> 00:43:20,579
If I get to New York at 5:00 PM, I want to get there at 5:00 PM.
如果我在下午5:00到达纽约，我想在下午5:00到达那里。 

994
00:43:20,579 --> 00:43:23,119
I don't want to get there at 5:01, for example.
例如，我不想在5:01到达那里。 

995
00:43:23,119 --> 00:43:25,951
But if I have three ways to get there at 5:00 PM,
但是，如果我有3种方法在下午5:00到达那里， 

996
00:43:25,952 --> 00:43:28,900
I want to choose the way that's the most eco-friendly.
我想选择最环保的方式。 

997
00:43:28,900 --> 00:43:32,369
So, the least amount of fuel.
因此，最少的燃料。 

998
00:43:32,369 --> 00:43:35,349
So out of all possible ways, the fastest way?
那么，从所有可能的方法中，最快的方法是什么？ 

999
00:43:35,349 --> 00:43:38,170
Out of all possible fastest ways,
在所有可能的最快方法中， 

1000
00:43:38,170 --> 00:43:39,880
the way that consumes the least fuel?
消耗最少燃料的方式？ 

1001
00:43:39,880 --> 00:43:42,690



1002
00:43:42,690 --> 00:43:44,539
Go.
走。 

1003
00:43:44,739 --> 00:43:48,469
You have two minutes.
你有两分钟

1004
00:43:48,469 --> 00:43:49,019
Maybe five.
也许五个。 

1005
00:43:49,019 --> 00:43:52,130
AUDIENCE: And we have the same costs for the--
观众：而且我们为- 

1006
00:43:52,130 --> 00:43:55,440
PROFESSOR: Each edge always has the same fuel cost.
教授：每个边总是有相同的燃料成本。 

1007
00:43:55,440 --> 00:43:58,010
But, depending on when you start, going across it
但是，视您开始的时间而定

1008
00:43:58,010 --> 00:44:00,440
is going to take a different time, too.
也将花费不同的时间。 

1009
00:44:00,440 --> 00:44:02,519
AUDIENCE: And we don't know what those times are?
听众：我们不知道那时候是什么时候？ 

1010
00:44:02,719 --> 00:44:05,076
PROFESSOR: They're going to be different for each edge.
教授：每个方面都会有所不同。 

1011
00:44:05,076 --> 00:44:06,885
AUDIENCE: One guess, take Dijkstra.
听众：一个猜想，以迪克斯特拉为例。 

1012
00:44:07,085 --> 00:44:09,133
Find the shortest path length and we
找到最短的路径长度，我们

1013
00:44:09,134 --> 00:44:11,871
look for all path lengths that are that length.
查找该长度的所有路径长度。 

1014
00:44:11,871 --> 00:44:13,149
I don't know.
我不知道。 

1015
00:44:13,150 --> 00:44:15,760
PROFESSOR: So we have the issue that-- I might still have it.
教授：所以我们有一个问题-我可能仍然有。 

1016
00:44:15,760 --> 00:44:16,630
Oh no, never mind.
哦，不，没关系。 

1017
00:44:16,829 --> 00:44:19,250
Sorry, I erased it so it's not on your mind anymore.
抱歉，我删除了它，因此您不再在意它了。 

1018
00:44:19,251 --> 00:44:20,750
We have those diamonds that show you
我们有那些钻石向您展示

1019
00:44:20,750 --> 00:44:23,239
that there might be an exponential number of paths
可能存在指数级的路径

1020
00:44:23,239 --> 00:44:25,273
with the same length, or the same distance.
具有相同的长度或相同的距离。 

1021
00:44:25,273 --> 00:44:26,815
AUDIENCE: And it doesn't help that we
观众：而且这对我们没有帮助

1022
00:44:26,815 --> 00:44:28,994
know we should cut off the--
知道我们应该切断- 

1023
00:44:28,994 --> 00:44:30,150
PROFESSOR: Nope.
教授：不。 

1024
00:44:30,150 --> 00:44:32,750
So we need to do the process that I just erased.
因此，我们需要执行刚刚删除的过程。 

1025
00:44:32,750 --> 00:44:35,384
Transform the graph in.
转换图形。 

1026
00:44:35,384 --> 00:44:37,300
The thing is, now you're missing state, right?
问题是，现在您缺少状态，对吗？ 

1027
00:44:37,300 --> 00:44:38,019
This misses state.
这错过了状态。 

1028
00:44:38,219 --> 00:44:40,179
This tells you how many edges you
告诉你你有多少条边

1029
00:44:40,179 --> 00:44:42,359
have to get from source to destination.
必须从源头到目的地。 

1030
00:44:42,360 --> 00:44:46,289
But we're not keeping track of some state that these vital.
但是我们没有跟踪这些至关重要的状态。 

1031
00:44:46,289 --> 00:44:48,980
Transform the graph to keep track of state,
变换图形以跟踪状态， 

1032
00:44:48,980 --> 00:44:52,590
run, say Dijkstra, and then interpret the output.
运行，例如Dijkstra，然后解释输出。 

1033
00:44:52,590 --> 00:44:55,800



1034
00:44:55,800 --> 00:44:56,777
What state do we need?
我们需要什么状态？ 

1035
00:44:56,777 --> 00:44:57,610
Let's think of that.
让我们考虑一下。 

1036
00:44:57,610 --> 00:44:59,981
AUDIENCE: Fuel cost, I think.
听众：我想是燃料成本。 

1037
00:45:00,181 --> 00:45:00,889
PROFESSOR: Sorry?
教授：对不起？ 

1038
00:45:00,889 --> 00:45:04,136
AUDIENCE: The two costs is the same for each edge.
听众：每条边的两个成本相同。 

1039
00:45:04,137 --> 00:45:06,481
It's just the time is different.
只是时间不同了。 

1040
00:45:06,481 --> 00:45:07,889
To be in traffic.
待在交通中。 

1041
00:45:07,889 --> 00:45:12,170
AUDIENCE: But once we have found the fastest spot
观众：但是一旦我们找到了最快的位置

1042
00:45:12,369 --> 00:45:17,201
that we wanted to see cut into our fuel cost range
我们希望看到削减了我们的燃料成本范围

1043
00:45:17,202 --> 00:45:20,224
and which one do we want to take.
以及我们要选哪一个。 

1044
00:45:20,423 --> 00:45:24,710



1045
00:45:24,710 --> 00:45:27,900
Thinking about the priority, our priority is time.
考虑优先事项，我们的优先事项是时间。 

1046
00:45:27,900 --> 00:45:34,983
So we want to save fuels as a state, to check it?
因此，我们想节省燃料以进行检查吗？ 

1047
00:45:34,983 --> 00:45:38,447



1048
00:45:38,447 --> 00:45:40,030
PROFESSOR: The problem is I don't even
教授：问题是我什至没有

1049
00:45:40,030 --> 00:45:41,163
know if fuel costs are integers.
知道燃料成本是否是整数。 

1050
00:45:41,362 --> 00:45:44,549
I can't keep fuel as a state.
我不能保持精力充沛。 

1051
00:45:44,550 --> 00:45:45,568
How many copies would I have?
我要多少份？ 

1052
00:45:45,768 --> 00:45:47,309
For each vertex how many copies would
每个顶点有多少个副本

1053
00:45:47,309 --> 00:45:48,489
I have if fuel is a state?
我有没有加油的状态？ 

1054
00:45:48,489 --> 00:45:51,159
Who knows?
谁知道？ 

1055
00:45:51,159 --> 00:45:53,159
So let's try something else.
因此，让我们尝试其他事情。 

1056
00:45:53,159 --> 00:45:55,069
But, you're on the right track.
但是，您的方向正确。 

1057
00:45:55,070 --> 00:45:56,775
Let's take a variable and make it state.
让我们接受一个变量并将其设为状态。 

1058
00:45:56,974 --> 00:46:01,829



1059
00:46:01,829 --> 00:46:05,922
AUDIENCE: So for every vertex can you keep
听众：所以您可以保留每个顶点

1060
00:46:05,922 --> 00:46:15,479
track of what's the shortest time it took to get there?
到那里最短的时间是什么？ 

1061
00:46:15,480 --> 00:46:19,105
PROFESSOR: What's the shortest time it took to get there?
教授：到那里最短的时间是什么？ 

1062
00:46:19,105 --> 00:46:20,480
How would you keep track of that?
您将如何跟踪？ 

1063
00:46:20,480 --> 00:46:22,398
Would you make that state, or how
你会说那种状态吗？ 

1064
00:46:22,398 --> 00:46:23,606
would you keep track of that?
您会跟踪吗？ 

1065
00:46:23,606 --> 00:46:27,177



1066
00:46:27,376 --> 00:46:28,210
I'm not disagreeing.
我不同意。 

1067
00:46:28,210 --> 00:46:29,519
I'm trying to understand your--
我正试图了解您- 

1068
00:46:29,519 --> 00:46:36,291
AUDIENCE: So for example, let's say if you have B, right?
观众：例如，假设您有B，对吧？ 

1069
00:46:36,291 --> 00:46:41,380
Let's say it takes like one hour to go from A to B.
假设从A到B大约需要一个小时。 

1070
00:46:41,380 --> 00:46:44,590
PROFESSOR: It depends when you start, by the way.
教授：顺便说一下，这取决于您何时开始。 

1071
00:46:44,590 --> 00:46:47,019
How much time it takes depends on when you start.
需要多少时间取决于您何时开始。 

1072
00:46:47,019 --> 00:46:48,940
If you start at 8:00 AM, it might be an hour.
如果您从8:00 AM开始，则可能需要一个小时。 

1073
00:46:48,940 --> 00:46:53,980
If you start at 9:00 AM it might be two hours.
如果您从9:00 AM开始，则可能需要两个小时。 

1074
00:46:53,980 --> 00:46:57,599
AUDIENCE: Do you need to have a finite number of states?
听众：您是否需要有限数量的州？ 

1075
00:46:57,599 --> 00:46:59,380
PROFESSOR: It's nice if it's not infinite,
教授：如果不是无限的，那就太好了， 

1076
00:46:59,380 --> 00:47:02,110
but it doesn't have to be constant, like we had before.
但这并不需要像我们以前那样恒定。 

1077
00:47:02,110 --> 00:47:05,690
It can be more than constant, for sure.
当然，它可以不仅仅是常数。 

1078
00:47:05,690 --> 00:47:07,505
So what are you thinking?
那你在想什么

1079
00:47:07,505 --> 00:47:09,739
AUDIENCE: I want to use time as a state.
听众：我想以时间为状态。 

1080
00:47:09,739 --> 00:47:11,379
PROFESSOR: I like that idea.
教授：我喜欢这个主意。 

1081
00:47:11,380 --> 00:47:13,880
Let's try to do it.
让我们尝试去做。 

1082
00:47:13,880 --> 00:47:15,980
We're going to use time as a state.
我们将使用时间作为状态。 

1083
00:47:16,179 --> 00:47:20,069
How many vertices am I going to have for each vertex?
每个顶点要有多少个顶点？ 

1084
00:47:20,070 --> 00:47:22,059
So for each original vertex, how many vertices
因此，对于每个原始顶点，有多少个顶点

1085
00:47:22,059 --> 00:47:23,518
am I going to have in my new graph?
我要在新图表中显示吗？ 

1086
00:47:23,518 --> 00:47:26,045



1087
00:47:26,045 --> 00:47:27,544
AUDIENCE: Three or four [INAUDIBLE].
听众：三到四个[听不清]。 

1088
00:47:27,545 --> 00:47:31,150



1089
00:47:31,150 --> 00:47:33,750
AUDIENCE: The sum of all times?
听众：所有时间的总和？ 

1090
00:47:33,949 --> 00:47:38,009
PROFESSOR: So if I say, hey, I'm at this vertex at this time,
教授：所以，如果我说，嘿，我目前处于这个顶点， 

1091
00:47:38,010 --> 00:47:39,840
then I'm going to have M vertices
那我要有M个顶点

1092
00:47:39,840 --> 00:47:42,230
for each original vertex, right?
对于每个原始顶点，对不对？ 

1093
00:47:42,230 --> 00:47:43,190
AUDIENCE: Right.
听众：对。 

1094
00:47:43,190 --> 00:47:46,539
PROFESSOR: I promise that the resolution of time is minutes.
教授：我保证时间的分钟数是分钟。 

1095
00:47:46,539 --> 00:47:48,779
I promise that this thing gives you
我保证这东西会给你

1096
00:47:48,780 --> 00:47:50,855
an integer number of minutes.
分钟的整数。 

1097
00:47:51,054 --> 00:47:53,919
AUDIENCE: Can it be put into days, though?
听众：但是可以放几天吗？ 

1098
00:47:53,920 --> 00:47:56,597



1099
00:47:56,597 --> 00:47:58,730
PROFESSOR: Suppose we can get from source to destination
教授：假设我们可以从源头到达目的地

1100
00:47:58,929 --> 00:48:01,257
in one day.
一天内。 

1101
00:48:01,257 --> 00:48:03,090
So let's see how it builds this graph first,
因此，让我们先看看它如何构建该图， 

1102
00:48:03,090 --> 00:48:06,440
and then we can figure out the rest of the things.
然后我们可以找出其余的事情。 

1103
00:48:06,440 --> 00:48:10,809
So for each node I'm going to make M copies of it.
因此，对于每个节点，我将为其制作M个副本。 

1104
00:48:10,809 --> 00:48:13,670
Suppose in my original graph I had a node.
假设在我的原始图中有一个节点。 

1105
00:48:13,670 --> 00:48:16,150
I'm going to have M copies of that node.
我将拥有该节点的M个副本。 

1106
00:48:16,150 --> 00:48:18,820
And each copy has the original vertex,
每个副本都有原始顶点

1107
00:48:18,820 --> 00:48:20,900
and the time when I'm there.
还有我在那里的时间

1108
00:48:20,900 --> 00:48:21,400
Right?
对？ 

1109
00:48:21,400 --> 00:48:23,210
There are V of these.
这些有V。 

1110
00:48:23,210 --> 00:48:27,570
And there are M of these.
有M个。 

1111
00:48:27,570 --> 00:48:28,208
Yes?
是？ 

1112
00:48:28,407 --> 00:48:29,782
AUDIENCE: It totally makes sense.
听众：完全有道理。 

1113
00:48:29,782 --> 00:48:31,400
It's a great idea.
好主意。 

1114
00:48:31,400 --> 00:48:32,809
PROFESSOR: Yeah, you had it!
教授：是的，您拥有了！ 

1115
00:48:32,809 --> 00:48:33,880
Great idea.
好想法。 

1116
00:48:33,880 --> 00:48:34,460
So far so good.
到现在为止还挺好。 

1117
00:48:34,659 --> 00:48:35,159
[LAUGHTER]
 [笑声] 

1118
00:48:35,159 --> 00:48:36,784
AUDIENCE: Now they need to be connected
听众：现在需要连接

1119
00:48:36,784 --> 00:48:38,179
to the appropriate next one.
到适当的下一个。 

1120
00:48:38,179 --> 00:48:41,489
PROFESSOR: Let's hear how we do that.
教授：让我们听听我们是如何做到的。 

1121
00:48:41,489 --> 00:48:48,369
Suppose we have an edge from U to V.
假设我们有一条从U到V的边。 

1122
00:48:48,369 --> 00:48:49,989
How are going to connect this?
如何连接呢？ 

1123
00:48:49,989 --> 00:48:52,809
How are we going to transform this?
我们该如何改变呢？ 

1124
00:48:52,809 --> 00:48:54,849
How many edges are going to make from that edge?
该边缘将要形成多少个边缘？ 

1125
00:48:54,849 --> 00:49:01,243



1126
00:49:01,244 --> 00:49:03,452
AUDIENCE: Do you have to do it from every start time?
听众：您是否必须从每个开始时间开始？ 

1127
00:49:03,452 --> 00:49:05,090
I guess.
我猜。 

1128
00:49:05,289 --> 00:49:08,489
So you'd write M edges.
所以你要写M条边。 

1129
00:49:08,489 --> 00:49:09,359
PROFESSOR: M edges.
教授：M条边。 

1130
00:49:09,360 --> 00:49:16,016
From U and a start time to V and what?
从U到开始时间到V，又是什么？ 

1131
00:49:16,215 --> 00:49:19,137
AUDIENCE:T plus T C of T.
听众：T加上T的TC。 

1132
00:49:19,137 --> 00:49:22,880
PROFESSOR: T plus T C of going through that edge.
教授：经历那个边缘的T加TC。 

1133
00:49:22,880 --> 00:49:23,528
Right?
对？ 

1134
00:49:23,528 --> 00:49:24,195
AUDIENCE: Right.
听众：对。 

1135
00:49:24,195 --> 00:49:27,864
PROFESSOR: T C are going from U to V at the stop.
教授：TC在停靠站从U到V。 

1136
00:49:27,864 --> 00:49:32,639



1137
00:49:32,639 --> 00:49:35,069
Ya, like this.
嗯，像这样。 

1138
00:49:35,070 --> 00:49:36,260
So you start from a time.
因此，您从一个时间开始。 

1139
00:49:36,260 --> 00:49:39,000
So the edge points from the time that you start up
所以边缘点从您开始时起

1140
00:49:39,000 --> 00:49:42,610
until the time when you'd be able to finish.
直到您能够完成的时间为止。 

1141
00:49:42,610 --> 00:49:45,800
So, up until the time where you'd be off the highway
因此，直到您离开高速公路为止

1142
00:49:45,800 --> 00:49:47,480
and die in the next city.
死在下一个城市

1143
00:49:47,480 --> 00:49:49,250
And we need one more type of edges.
我们还需要另一种类型的边缘。 

1144
00:49:49,250 --> 00:49:51,889
There's one more tiny trick.
还有一个小技巧。 

1145
00:49:51,889 --> 00:49:55,170
If I'm somewhere in Massachusetts, and I know that
如果我在马萨诸塞州的某个地方，我知道

1146
00:49:55,170 --> 00:49:56,269
it's really bad now.
现在真的很糟糕。 

1147
00:49:56,469 --> 00:49:59,109
I prefer to wait out for a few minutes, go to a bar,
我宁愿等几分钟，去酒吧， 

1148
00:49:59,110 --> 00:50:02,440
and then come and drive-- OK not to a bar-- go to a food place,
然后开车去-好吧，不要去酒吧-去吃饭的地方， 

1149
00:50:02,639 --> 00:50:03,379
then drive later.
然后再开车。 

1150
00:50:03,380 --> 00:50:04,849
[LAUGHTER]
 [笑声] 

1151
00:50:04,849 --> 00:50:06,569
AUDIENCE: --vertical edges that--
听众：-垂直边缘- 

1152
00:50:06,570 --> 00:50:08,403
PROFESSOR: --represent waiting.
教授：-代表等待。 

1153
00:50:08,403 --> 00:50:10,989
AUDIENCE: You have to add one minute between them.
听众：您必须在两者之间增加一分钟。 

1154
00:50:10,989 --> 00:50:14,219
PROFESSOR: How do I do that?
教授：我该怎么做？ 

1155
00:50:14,219 --> 00:50:18,000
AUDIENCE: From U to U with a cost of 1.
观众：从U到U，费用为1。 

1156
00:50:18,000 --> 00:50:21,360



1157
00:50:21,360 --> 00:50:26,126
PROFESSOR: So from U to U at 20 plus 1.
教授：所以从U到U在20加1。 

1158
00:50:26,126 --> 00:50:29,170
I like this better.
我比较喜欢这个。 

1159
00:50:29,170 --> 00:50:31,730
What's the fuel cost of this?
燃料成本是多少？ 

1160
00:50:31,730 --> 00:50:33,809
AUDIENCE: Zero.
听众：零。 

1161
00:50:33,809 --> 00:50:36,009
PROFESSOR: So here this edge had fuel cost at C,
教授：所以这里的优势是燃料成本为C， 

1162
00:50:36,010 --> 00:50:37,510
Then the new edge is going have fuel
然后新的优势将不断发展

1163
00:50:37,510 --> 00:50:41,514
cost for the ones on the top.
顶部的成本。 

1164
00:50:41,514 --> 00:50:42,980
AUDIENCE: Is it proportional to minutes?
听众：与分钟成正比吗？ 

1165
00:50:43,179 --> 00:50:44,599
Speed?
速度？ 

1166
00:50:44,599 --> 00:50:46,969
PROFESSOR: It's the same.
教授：一样。 

1167
00:50:46,969 --> 00:50:49,859
F C stays the same, no matter when we go through the highway
无论我们何时通过高速公路，FC都保持不变

1168
00:50:49,860 --> 00:50:54,320
if C is a function of the distance of the road.
如果C是道路距离的函数。 

1169
00:50:54,320 --> 00:50:58,380
This edge becomes M edges with the same cost.
该边变为M边，且成本相同。 

1170
00:50:58,380 --> 00:51:00,690
And then I have to have vertical waiting edges.
然后我必须有垂直的等待边缘。 

1171
00:51:00,690 --> 00:51:03,840



1172
00:51:03,840 --> 00:51:05,360
If we had the holographic display
如果我们有全息显示器

1173
00:51:05,360 --> 00:51:08,940
that I talked about earlier you'd have M sheets of paper
我刚才说过的你会有M张纸

1174
00:51:09,139 --> 00:51:10,429
this time.
这次。 

1175
00:51:10,429 --> 00:51:12,299
You start at time 0 at your source
您从源头的时间0开始

1176
00:51:12,300 --> 00:51:17,150
and then your edges go represent the moves that you can make.
然后您的边缘代表您可以进行的动作。 

1177
00:51:17,349 --> 00:51:20,360
So, you could start in Boston at 8:00 AM.
因此，您可以从8:00 AM在波士顿开始。 

1178
00:51:20,360 --> 00:51:22,570
And you could take I-90 and end up
然后您可以乘坐I-90到达终点

1179
00:51:22,570 --> 00:51:26,650
in-- I don't know Massachusetts city names-- Albuquerque
在-我不知道马萨诸塞州的城市名称-阿尔伯克基

1180
00:51:26,849 --> 00:51:29,420
at 9:00 AM?
在9:00 AM？ 

1181
00:51:29,420 --> 00:51:31,079
[LAUGHTER]
 [笑声] 

1182
00:51:31,079 --> 00:51:32,000
AUDIENCE: Amherst.
听众：阿默斯特。 

1183
00:51:32,000 --> 00:51:32,980
PROFESSOR: Amherst, OK.
教授：阿默斯特，好的。 

1184
00:51:32,980 --> 00:51:34,353
So you started in Boston 8:00 AM,
所以您从8:00 AM在波士顿开始， 

1185
00:51:34,353 --> 00:51:37,239
you end up at Amherst at 9, 10:00 AM.
您将在上午9点10:00在阿默斯特（Amherst）结束。 

1186
00:51:37,239 --> 00:51:37,739
Right?
对？ 

1187
00:51:37,739 --> 00:51:39,449
So this is one edge.
所以这是一个优势。 

1188
00:51:39,449 --> 00:51:41,489
The edges represent the moves that you
边缘代表您的举动

1189
00:51:41,489 --> 00:51:42,809
could make in this graph.
可以在这张图中。 

1190
00:51:42,809 --> 00:51:46,110



1191
00:51:46,110 --> 00:51:47,230
Does this makes?
这会吗？ 

1192
00:51:47,230 --> 00:51:51,474
AUDIENCE: I don't understand the two last lines there.
听众：我不明白那里的最后两行。 

1193
00:51:51,474 --> 00:51:54,427
I don't really get what we were doing there [INAUDIBLE].
我真的不明白我们在那儿所做的[听不清]。 

1194
00:51:54,427 --> 00:51:56,510
PROFESSOR: Let's see what we're trying to do here.
教授：让我们看看我们要在这里做什么。 

1195
00:51:56,510 --> 00:52:01,070
We're saying that, if I'm a node U, and I'm starting at time T.
我们是说，如果我是节点U，并且我是从时间T开始。 

1196
00:52:01,269 --> 00:52:03,769
AUDIENCE: Ya, so that's like one piece of paper.
听众：是的，那就像一张纸。 

1197
00:52:03,769 --> 00:52:05,340
PROFESSOR: Yep.
教授：是的。 

1198
00:52:05,340 --> 00:52:07,250
I'm going to go on the road, right?
我要上路了吧？ 

1199
00:52:07,250 --> 00:52:09,949
I'm going to go on the road from U to V.
我要走从U到V的路。 

1200
00:52:09,949 --> 00:52:12,063
So where am I going to arrive?
那我要去哪里呢？ 

1201
00:52:12,063 --> 00:52:14,629
AUDIENCE: There at V at some time plus that.
听众：有时V在那儿。 

1202
00:52:14,630 --> 00:52:16,346
PROFESSOR: Now we have to figure out what time
教授：现在我们必须弄清楚什么时间

1203
00:52:16,545 --> 00:52:17,619
we're going to arrive at.
我们要到达。 

1204
00:52:17,619 --> 00:52:20,609
The time that we arrive at is the original time,
我们到达的时间是原始时间， 

1205
00:52:20,610 --> 00:52:23,519
plus whatever time I'm going to spend on the road.
再加上我要花在路上的任何时间。 

1206
00:52:23,519 --> 00:52:25,039
What's the time I spend on the road?
我在路上花什么时间？ 

1207
00:52:25,039 --> 00:52:27,940
It's not constant because I have that timetable that
它不是恒定的，因为我有时间表

1208
00:52:27,940 --> 00:52:29,820
includes traffic.
包括流量。 

1209
00:52:29,820 --> 00:52:31,480
So this is what this tells me.
这就是告诉我的。 

1210
00:52:31,679 --> 00:52:34,679
This is what this big, ugly formula is all about.
这就是这个大而丑陋的公式的全部含义。 

1211
00:52:34,679 --> 00:52:37,449
It says the timetable for this edge assuming
它说，这一优势的时间表假设

1212
00:52:37,449 --> 00:52:39,949
you start at time T. That's all there is.
您从时间T开始。仅此而已。 

1213
00:52:39,949 --> 00:52:40,634
Nothing else.
没有其他的。 

1214
00:52:40,635 --> 00:52:42,260
AUDIENCE: What's the second line, then?
观众：那第二行是什么？ 

1215
00:52:42,260 --> 00:52:44,289
PROFESSOR: So the second line is waiting.
教授：第二行正在等待。 

1216
00:52:44,489 --> 00:52:47,869
So if I don't have this then I'm constrained
所以，如果我没有这个，那我就会被束缚

1217
00:52:47,869 --> 00:52:50,759
in that I have to drive all the time.
因为我必须一直开车。 

1218
00:52:50,760 --> 00:52:52,804
I go from here to Amherst, then I
我从这里去阿默斯特，然后我

1219
00:52:52,804 --> 00:52:55,019
have to go from Amherst to somewhere else, and keep going,
必须从阿默斯特去其他地方，然后继续前进， 

1220
00:52:55,219 --> 00:52:56,177
keep going, keep going.
继续前进，继续前进。 

1221
00:52:56,177 --> 00:52:59,269
AUDIENCE: [INAUDIBLE].
听众：[听不清]。 

1222
00:52:59,269 --> 00:53:01,849
PROFESSOR: Yeah, this is where I wait for a minute.
教授：是的，这是我等一下。 

1223
00:53:01,849 --> 00:53:03,940
If I wait for a minute, I don't consume any fuel
如果我等一下，我不会消耗任何燃料

1224
00:53:03,940 --> 00:53:07,048
and I go from time T to time T plus 1.
我从时间T到时间T加1。 

1225
00:53:07,048 --> 00:53:08,320
AUDIENCE: OK.
听众：好的。 

1226
00:53:08,320 --> 00:53:10,860
PROFESSOR: Does this make sense?
教授：这有意义吗？ 

1227
00:53:10,860 --> 00:53:13,110
Do we want to analyze the running time for this really
我们是否真的要分析运行时间

1228
00:53:13,110 --> 00:53:14,059
quickly?
很快？ 

1229
00:53:14,059 --> 00:53:14,916
AUDIENCE: Sure.
听众：好的。 

1230
00:53:14,916 --> 00:53:16,000
PROFESSOR: How many edges?
教授：几条边？ 

1231
00:53:16,000 --> 00:53:19,324



1232
00:53:19,324 --> 00:53:21,230
AUDIENCE: E times M?
听众：E乘以M？ 

1233
00:53:21,230 --> 00:53:24,400
PROFESSOR: OK, let's do vertices because vertices is quick.
教授：好的，因为顶点很快，所以我们来做顶点。 

1234
00:53:24,400 --> 00:53:26,190
AUDIENCE: V times M?
听众：V乘以M？ 

1235
00:53:26,190 --> 00:53:31,429
PROFESSOR: So, edges is, you're saying, V times M?
教授：那么，边就是V乘M？ 

1236
00:53:31,429 --> 00:53:31,969
Almost.
几乎。 

1237
00:53:31,969 --> 00:53:33,038
AUDIENCE: Pause there.
听众：在那儿停一下。 

1238
00:53:33,039 --> 00:53:34,380
PROFESSOR: So there's a pause, right?
教授：所以有一个停顿吧？ 

1239
00:53:34,579 --> 00:53:38,440
How many pause edges do I have?
我有几个停顿边缘？ 

1240
00:53:38,440 --> 00:53:45,153
AUDIENCE: V-- M.
听众：V– M. 

1241
00:53:45,153 --> 00:53:46,695
PROFESSOR: This is how many vertices?
教授：这是多少个顶点？ 

1242
00:53:46,695 --> 00:53:48,380
This is how many edges?
这边有几条？ 

1243
00:53:48,380 --> 00:53:52,255
Plug this into which algorithm, Dijkstra or Bellam-Ford?
将其插入Dijkstra或Bellam-Ford哪种算法中？ 

1244
00:53:52,255 --> 00:53:54,170
AUDIENCE: Dijkstra.
听众：Dijkstra。 

1245
00:53:54,170 --> 00:53:56,460
PROFESSOR: Done!
教授：做完了！ 

1246
00:53:56,460 --> 00:53:58,501
Yay, we solved the hard problem.
是的，我们解决了难题。 

1247
00:53:58,501 --> 00:54:00,610
AUDIENCE: How do you ensure that the time's right?
听众：您如何确保时间合适？ 

1248
00:54:00,809 --> 00:54:03,304
Do you have to go through and see if there's a path?
您是否必须检查一下是否有路径？ 

1249
00:54:03,304 --> 00:54:04,929
PROFESSOR: How do we read the solution?
教授：我们如何阅读解决方案？ 

1250
00:54:04,929 --> 00:54:05,429
That's good.
那很好。 

1251
00:54:05,429 --> 00:54:06,387
That's a good question.
这是个好问题。 

1252
00:54:06,387 --> 00:54:07,289
I like that.
我喜欢。 

1253
00:54:07,289 --> 00:54:11,099
So, we're going to have M vertices of the destination.
因此，我们将拥有目标的M个顶点。 

1254
00:54:11,099 --> 00:54:12,449
Alright?
好的？ 

1255
00:54:12,449 --> 00:54:14,250
Let's see how they're going to look like.
让我们看看它们的外观。 

1256
00:54:14,250 --> 00:54:15,800
First off, if you start at 8:00 AM,
首先，如果您从8:00 AM开始， 

1257
00:54:15,800 --> 00:54:19,610
maybe you're not going to make it to New York at 8:01 AM.
也许您不会在上午8:01到达纽约。 

1258
00:54:19,809 --> 00:54:22,009
The vertex that says New York at 8:01 AM
在上午8:01说纽约的顶点

1259
00:54:22,010 --> 00:54:25,980
is probably going to have a cost of plus infinity.
可能要加上无穷大的成本。 

1260
00:54:26,179 --> 00:54:27,886
First off the really early times are
首先是真正的早期

1261
00:54:27,887 --> 00:54:29,269
going to have a cost of plus infinity.
将要加上无穷大的成本。 

1262
00:54:29,469 --> 00:54:30,769
Not going to happen.
不会发生。 

1263
00:54:30,769 --> 00:54:34,309
Then, at some point, the cost is going to become finite.
然后，在某个时候，成本将变得有限。 

1264
00:54:34,309 --> 00:54:36,909
That's the fastest way you can get from Boston to New York.
从波士顿到纽约，这是最快的方式。 

1265
00:54:36,909 --> 00:54:39,739



1266
00:54:39,739 --> 00:54:41,799
using the least amount of fuel.
使用最少的燃料。 

1267
00:54:41,800 --> 00:54:45,289
So the cost that you have there is the answer to our problem.
因此，您所付出的代价就是解决我们问题的答案。 

1268
00:54:45,489 --> 00:54:47,589
AUDIENCE: So basically, when you get there you
观众：所以基本上，当您到达那里时， 

1269
00:54:47,590 --> 00:54:49,550
have to enter it through all M.
必须通过所有M输入

1270
00:54:49,550 --> 00:54:52,210
PROFESSOR: All M vertices that correspond to the destination.
教授：对应于目的地的所有M个顶点。 

1271
00:54:52,210 --> 00:54:56,916



1272
00:54:56,916 --> 00:54:58,500
The costs are going to look like this.
费用将看起来像这样。 

1273
00:54:58,500 --> 00:55:01,731
They're going to be infinity, infinity, infinity all the way
它们将一直无穷大，无穷大

1274
00:55:01,731 --> 00:55:03,190
up, until some point in here you're
起来，直到这里的某个点

1275
00:55:03,190 --> 00:55:06,110
going to have your final answer.
将有您的最终答案。 

1276
00:55:06,110 --> 00:55:08,099
The cost to get there the fastest--
最快到达那里的成本- 

1277
00:55:08,099 --> 00:55:10,940
see, you can get there at 3:00 PM.
看，您可以在3:00 PM到达那里。 

1278
00:55:10,940 --> 00:55:13,849
This is how much fuel you have to spend to get there at 3;00
这是您在3; 00到达那里所需要花费的燃料

1279
00:55:13,849 --> 00:55:14,690
PM.
下午。 

1280
00:55:14,690 --> 00:55:18,409
But, if you're willing to wait until 3:01 PM,
但是，如果您愿意等到下午3:01， 

1281
00:55:18,409 --> 00:55:21,500
you're going to have the fastest cost you can have for that.
您将为此付出最快的代价。 

1282
00:55:21,500 --> 00:55:24,500
If you're willing to wait until 3:02,
如果您愿意等到3:02， 

1283
00:55:24,500 --> 00:55:26,650
you're going to have the answer for that, too.
您也将得到答案。 

1284
00:55:26,650 --> 00:55:29,550
So here you're going to get the whole trade-off curve of,
所以在这里，您将获得的总折衷曲线， 

1285
00:55:29,550 --> 00:55:31,384
if you're willing to wait for a few minutes,
如果您愿意等待几分钟， 

1286
00:55:31,384 --> 00:55:33,507
or if you're willing to wait for an extra hour, how
或者如果您愿意等待一个多小时，如何

1287
00:55:33,507 --> 00:55:34,469
much fuel you can save.
您可以节省很多燃料。 

1288
00:55:34,469 --> 00:55:38,809



1289
00:55:38,809 --> 00:55:43,269
So, I think that's cool about your questions.
因此，我认为您的问题很酷。 

1290
00:55:43,269 --> 00:55:44,599
You had a question, too.
您也有一个问题。 

1291
00:55:44,599 --> 00:55:47,063
AUDIENCE: Why did we have V times M
听众：为什么我们有V乘以M 

1292
00:55:47,063 --> 00:55:48,909
in the E prime expression?
在E素数表达式中？ 

1293
00:55:48,909 --> 00:55:50,971



1294
00:55:50,972 --> 00:55:52,730
PROFESSOR: First off, we have E times M, right?
教授：首先，我们有E倍M，对不对？ 

1295
00:55:52,929 --> 00:55:54,659
We're good with these.
我们对这些很好。 

1296
00:55:54,659 --> 00:55:56,710
These are the waiting edges.
这些是等待的边缘。 

1297
00:55:56,710 --> 00:56:01,400
AUDIENCE: So we are waiting after every minute?
观众：所以我们每分钟都在等待吗？ 

1298
00:56:01,400 --> 00:56:04,369
PROFESSOR: The waiting edges are vertex time
教授：等待的边缘是顶点时间

1299
00:56:04,369 --> 00:56:05,889
to vertex time plus 1.
顶点时间加1。 

1300
00:56:05,889 --> 00:56:08,269
How many vertices?
多少个顶点？ 

1301
00:56:08,269 --> 00:56:09,913
V. How many times?
五，多少次？ 

1302
00:56:09,913 --> 00:56:11,119
AUDIENCE: M.
听众：M. 

1303
00:56:11,119 --> 00:56:15,865
PROFESSOR: So it's V times M. Because at each minute,
教授：是V乘以M。因为每一分钟， 

1304
00:56:15,865 --> 00:56:17,489
you can be at a certain city and decide
你可以在某个城市决定

1305
00:56:17,489 --> 00:56:19,859
to wait one more minute to stay the same city.
再等一分钟再呆在同一座城市。 

1306
00:56:19,860 --> 00:56:23,130



1307
00:56:23,130 --> 00:56:25,934
OK Does this make sense?
好，这有意义吗？ 

1308
00:56:25,934 --> 00:56:26,559
Thank you guys!
感谢大伙们！ 

1309
00:56:26,559 --> 00:56:28,799
I'm really happy we solved the hard problem!
我真的很高兴我们解决了难题！ 

1310
00:56:28,800 --> 00:56:33,800
That's good.
那很好。 

